/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CardIssuanceCreateVirtualCardRequest;
import com.konfigthis.client.model.CardIssuanceCreateVirtualCardRequestCustomParametersInner;
import com.konfigthis.client.model.CardIssuanceCreateVirtualCardRequestTransmission;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CardIssuanceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardIssuanceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CardIssuanceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createVirtualCardCall(CardIssuanceCreateVirtualCardRequest cardIssuanceCreateVirtualCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardIssuanceCreateVirtualCardRequest;

        // create path and map variables
        String localVarPath = "/api/v1/IssueCard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVirtualCardValidateBeforeCall(CardIssuanceCreateVirtualCardRequest cardIssuanceCreateVirtualCardRequest, final ApiCallback _callback) throws ApiException {
        return createVirtualCardCall(cardIssuanceCreateVirtualCardRequest, _callback);

    }


    private ApiResponse<String> createVirtualCardWithHttpInfo(CardIssuanceCreateVirtualCardRequest cardIssuanceCreateVirtualCardRequest) throws ApiException {
        okhttp3.Call localVarCall = createVirtualCardValidateBeforeCall(cardIssuanceCreateVirtualCardRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createVirtualCardAsync(CardIssuanceCreateVirtualCardRequest cardIssuanceCreateVirtualCardRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVirtualCardValidateBeforeCall(cardIssuanceCreateVirtualCardRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateVirtualCardRequestBuilder {
        private final String merchantGuid;
        private final String firstName;
        private final String lastName;
        private final Float amountLimit;
        private final String purchaseType;
        private String phone;
        private String address1;
        private String address2;
        private String city;
        private String state;
        private String zipCode;
        private String country;
        private Long usageLimit;
        private LocalDate expirationDate;
        private LocalDate terminateDate;
        private List<String> miDWhitelist;
        private List<String> miDBlacklist;
        private String sequenceNumber;
        private String orderNumber;
        private String incomingTransactionCode;
        private String supplierId;
        private Boolean nonDomesticSupplier;
        private CardIssuanceCreateVirtualCardRequestTransmission transmission;
        private Boolean returnCardData;
        private String customerID;
        private String associationId;
        private List<CardIssuanceCreateVirtualCardRequestCustomParametersInner> customParameters;
        private List<String> labelIDs;

        private CreateVirtualCardRequestBuilder(String merchantGuid, String firstName, String lastName, Float amountLimit, String purchaseType) {
            this.merchantGuid = merchantGuid;
            this.firstName = firstName;
            this.lastName = lastName;
            this.amountLimit = amountLimit;
            this.purchaseType = purchaseType;
        }

        /**
         * Set phone
         * @param phone Cardholder&#39;s phone number. Phone number up to 20 character string, numbers and plus sign (+) allowed only. Telephone number of the user (including area code), prepended by the + symbol and the 1- to 3-digit country calling code. Do not include hyphens, spaces, or parentheses. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set address1
         * @param address1 Cardholder&#39;s address line 1. The street number is used by the supplier when submitting the transaction to perform an AVS check. Alphanumerics and [,.-&#39;] are allowed. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder address1(String address1) {
            this.address1 = address1;
            return this;
        }
        
        /**
         * Set address2
         * @param address2 Cardholder&#39;s address line 2. Alphanumerics and [,.-&#39;] are allowed. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder address2(String address2) {
            this.address2 = address2;
            return this;
        }
        
        /**
         * Set city
         * @param city Cardholder&#39;s city. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state Cardholder&#39;s short name state.  The ISO 3166-2 CA and US state or province code of a user. Length &#x3D; 2. If a non U.S. or Canadian value is submitted the virtual card request will not be processed and an error response returned. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zipCode
         * @param zipCode Cardholder&#39;s zipcode. The zip code is used by the supplier when submitting the transaction to perform an AVS check.  The Zipcode must be between 1 and 10 characters long, only numbers and letters are allowed. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }
        
        /**
         * Set country
         * @param country Cardholder&#39;s country.  Only alpha-2 digit country code allowed and numbers are not allowed.  See ISO-3166 country list of Alpha-2 country codes (https://www.iso.org/obp/ui/) . (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set usageLimit
         * @param usageLimit Security Control: Maximum number of times the card may be authorized. The maximum allowed field value is 99, and if you do not provide a value the card will be considered unlimited. Authorization attempts exceeding the provided value will be declined. Even though a virtual card is often considered a “one-time-use” card, some suppliers may need to authorize a card multiple times (pre-authorizations, a purchase comprised of multiple tickets, etc.) and you may consider a value that is not overly restrictive to avoid unwanted declines. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder usageLimit(Long usageLimit) {
            this.usageLimit = usageLimit;
            return this;
        }
        
        /**
         * Set expirationDate
         * @param expirationDate The ExpirationDate (YYYY-MM-DD) is the date to be provided to the supplier as the actual expiration date for the virtual card. The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed to avoid acceptance issues.  The expiration date cannot be more than 36 months in the future. If an expiration date is not provided, the expiration will default to issue date plus three years. For cards issued outside of the US/Canada, the expiration date will default to issue date plus three years and can not be overwritten - even if this parameter is included in the request. Note, Returns can still be processed on expired or terminated VCCs. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder expirationDate(LocalDate expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        
        /**
         * Set terminateDate
         * @param terminateDate The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed. If a terminate date is not indicated, the card will be inactivated as of the expiration date. Note, Returns can still be processed on terminated VCCs. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder terminateDate(LocalDate terminateDate) {
            this.terminateDate = terminateDate;
            return this;
        }
        
        /**
         * Set miDWhitelist
         * @param miDWhitelist MID &#x3D; Merchant ID. Whitelisted MIDs are a supplement to Purchase Type. Utilize if you have a supplier MID(s) where the card can be used if that MID is categorized in an MCC other than the Purchase Type selected. Or use instead of Purchase Type. (eg. [&#39;273514000108778&#39;, &#39;900074KLM&#39;]) (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder miDWhitelist(List<String> miDWhitelist) {
            this.miDWhitelist = miDWhitelist;
            return this;
        }
        
        /**
         * Set miDBlacklist
         * @param miDBlacklist MID &#x3D; Merchant ID. The list of MIDs where the virtual card will always be DECLINED regardless of PurchaseType or MIDWhitelist. MIDBlacklist overrides all other specifications. (eg. [&#39;273594000108778&#39;].) (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder miDBlacklist(List<String> miDBlacklist) {
            this.miDBlacklist = miDBlacklist;
            return this;
        }
        
        /**
         * Set sequenceNumber
         * @param sequenceNumber Transaction sequence number within client environment. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder sequenceNumber(String sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }
        
        /**
         * Set orderNumber
         * @param orderNumber This is the most common number you&#39;ll see throughout the ConnexPay Portal. Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field. The maximum length is 50 alpha-numeric characters and allows dashes ( - ). (optional, default to {{OrderNumber}})
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder orderNumber(String orderNumber) {
            this.orderNumber = orderNumber;
            return this;
        }
        
        /**
         * Set incomingTransactionCode
         * @param incomingTransactionCode ITC for short Application level setting to associate the virtual card request with an original sale or sale group. The value is provided in the sale response of the original sale transaction, or in the Group Sale response of the group sale. All virtual card requests must be associated with an original sale or group transaction. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder incomingTransactionCode(String incomingTransactionCode) {
            this.incomingTransactionCode = incomingTransactionCode;
            return this;
        }
        
        /**
         * Set supplierId
         * @param supplierId The SupplierId is used to assist with Intelligent Routing functionality. The field accepts up to 100 alpha-numeric characters.  Alphanumeric with a max length of 100 characters (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder supplierId(String supplierId) {
            this.supplierId = supplierId;
            return this;
        }
        
        /**
         * Set nonDomesticSupplier
         * @param nonDomesticSupplier We can issue the “Global VCC” if the Supplier accepting that VCC has an overseas merchant account. This is an optional field. Indicating true will result in issuing this Global VCC. Indicating false (or not including this property in your request) will result in receiving a VCC created for domestic use. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder nonDomesticSupplier(Boolean nonDomesticSupplier) {
            this.nonDomesticSupplier = nonDomesticSupplier;
            return this;
        }
        
        /**
         * Set transmission
         * @param transmission  (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder transmission(CardIssuanceCreateVirtualCardRequestTransmission transmission) {
            this.transmission = transmission;
            return this;
        }
        
        /**
         * Set returnCardData
         * @param returnCardData Optional field that may be set to true or false. When set to a value of true or if the field is not provided at all, card data is returned in the response. When set to a value of false, the Card Account Number and Security Code (CVV) will be excluded from the response. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder returnCardData(Boolean returnCardData) {
            this.returnCardData = returnCardData;
            return this;
        }
        
        /**
         * Set customerID
         * @param customerID Transaction ID within client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes.  The maximum length is 100 characters and is alpha-numeric. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder customerID(String customerID) {
            this.customerID = customerID;
            return this;
        }
        
        /**
         * Set associationId
         * @param associationId Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder associationId(String associationId) {
            this.associationId = associationId;
            return this;
        }
        
        /**
         * Set customParameters
         * @param customParameters You can add custom parameters to your issue card request in the event that you need to associate additional information with the virtual card. For example, if you want to add an invoice number you would include the custom parameters object with the name parameter &#x3D; \\\&quot;invoice\\\&quot; and the value parameter as the invoice number. This requires customized reporting so you&#39;ll need to work with your implementations specialist to determine what&#39;s required. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder customParameters(List<CardIssuanceCreateVirtualCardRequestCustomParametersInner> customParameters) {
            this.customParameters = customParameters;
            return this;
        }
        
        /**
         * Set labelIDs
         * @param labelIDs Utilize Label IDs to associate a virtual card to a specific label(s) within ConnexPay Bridge UI for your organization. If a virtual card is tied to an incorrect Label, it will not filter or display correctly in Bridge&#39;s Search Grid. Please contact your Customer Care Consultant for a list of valid Label IDs before use. (optional)
         * @return CreateVirtualCardRequestBuilder
         */
        public CreateVirtualCardRequestBuilder labelIDs(List<String> labelIDs) {
            this.labelIDs = labelIDs;
            return this;
        }
        
        /**
         * Build call for createVirtualCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardIssuanceCreateVirtualCardRequest cardIssuanceCreateVirtualCardRequest = buildBodyParams();
            return createVirtualCardCall(cardIssuanceCreateVirtualCardRequest, _callback);
        }

        private CardIssuanceCreateVirtualCardRequest buildBodyParams() {
            CardIssuanceCreateVirtualCardRequest cardIssuanceCreateVirtualCardRequest = new CardIssuanceCreateVirtualCardRequest();
            cardIssuanceCreateVirtualCardRequest.merchantGuid(this.merchantGuid);
            cardIssuanceCreateVirtualCardRequest.firstName(this.firstName);
            cardIssuanceCreateVirtualCardRequest.lastName(this.lastName);
            cardIssuanceCreateVirtualCardRequest.phone(this.phone);
            cardIssuanceCreateVirtualCardRequest.address1(this.address1);
            cardIssuanceCreateVirtualCardRequest.address2(this.address2);
            cardIssuanceCreateVirtualCardRequest.city(this.city);
            cardIssuanceCreateVirtualCardRequest.state(this.state);
            cardIssuanceCreateVirtualCardRequest.zipCode(this.zipCode);
            cardIssuanceCreateVirtualCardRequest.country(this.country);
            cardIssuanceCreateVirtualCardRequest.usageLimit(this.usageLimit);
            cardIssuanceCreateVirtualCardRequest.amountLimit(this.amountLimit);
            cardIssuanceCreateVirtualCardRequest.expirationDate(this.expirationDate);
            cardIssuanceCreateVirtualCardRequest.terminateDate(this.terminateDate);
            cardIssuanceCreateVirtualCardRequest.purchaseType(this.purchaseType);
            cardIssuanceCreateVirtualCardRequest.miDWhitelist(this.miDWhitelist);
            cardIssuanceCreateVirtualCardRequest.miDBlacklist(this.miDBlacklist);
            cardIssuanceCreateVirtualCardRequest.sequenceNumber(this.sequenceNumber);
            cardIssuanceCreateVirtualCardRequest.orderNumber(this.orderNumber);
            cardIssuanceCreateVirtualCardRequest.incomingTransactionCode(this.incomingTransactionCode);
            cardIssuanceCreateVirtualCardRequest.supplierId(this.supplierId);
            cardIssuanceCreateVirtualCardRequest.nonDomesticSupplier(this.nonDomesticSupplier);
            cardIssuanceCreateVirtualCardRequest.transmission(this.transmission);
            cardIssuanceCreateVirtualCardRequest.returnCardData(this.returnCardData);
            cardIssuanceCreateVirtualCardRequest.customerID(this.customerID);
            cardIssuanceCreateVirtualCardRequest.associationId(this.associationId);
            cardIssuanceCreateVirtualCardRequest.customParameters(this.customParameters);
            cardIssuanceCreateVirtualCardRequest.labelIDs(this.labelIDs);
            return cardIssuanceCreateVirtualCardRequest;
        }

        /**
         * Execute createVirtualCard request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            CardIssuanceCreateVirtualCardRequest cardIssuanceCreateVirtualCardRequest = buildBodyParams();
            ApiResponse<String> localVarResp = createVirtualCardWithHttpInfo(cardIssuanceCreateVirtualCardRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createVirtualCard request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            CardIssuanceCreateVirtualCardRequest cardIssuanceCreateVirtualCardRequest = buildBodyParams();
            return createVirtualCardWithHttpInfo(cardIssuanceCreateVirtualCardRequest);
        }

        /**
         * Execute createVirtualCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            CardIssuanceCreateVirtualCardRequest cardIssuanceCreateVirtualCardRequest = buildBodyParams();
            return createVirtualCardAsync(cardIssuanceCreateVirtualCardRequest, _callback);
        }
    }

    /**
     * Issue Card
     * Use this endpoint to issue virtual cards associated with a credit or ACH sale. Do not use this endpoint if you fund your virtual cards from cash and therefor don&#39;t have an associated sale. If you aren&#39;t sure which Issuance API to use, please contact your client support representative.
     * @return CreateVirtualCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateVirtualCardRequestBuilder createVirtualCard(String merchantGuid, String firstName, String lastName, Float amountLimit, String purchaseType) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (amountLimit == null) throw new IllegalArgumentException("\"amountLimit\" is required but got null");
        if (purchaseType == null) throw new IllegalArgumentException("\"purchaseType\" is required but got null");
            

        return new CreateVirtualCardRequestBuilder(merchantGuid, firstName, lastName, amountLimit, purchaseType);
    }
}
