/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CardActivateDelayedResponse;
import com.konfigthis.client.model.CardCancelVirtualCardResponse;
import com.konfigthis.client.model.CardCreateLodgedCardRequest;
import com.konfigthis.client.model.CardCreateLodgedCardRequestTransmission;
import com.konfigthis.client.model.CardGetDetailResponse;
import com.konfigthis.client.model.CardIssuanceCreateVirtualCardRequestCustomParametersInner;
import com.konfigthis.client.model.CardResendTransmissionInfoRequest;
import com.konfigthis.client.model.CardResendTransmissionInfoResponse;
import com.konfigthis.client.model.CardSearchIssuedVirtualCardsRequest;
import com.konfigthis.client.model.CardTerminateByDateResponse;
import com.konfigthis.client.model.CardUpdateCardDetailsRequest;
import com.konfigthis.client.model.CardUpdateCardDetailsResponse;
import com.konfigthis.client.model.CardUpdateDelayedActivationRequest;
import com.konfigthis.client.model.CardUpdateDelayedActivationResponse;
import com.konfigthis.client.model.CardUpdateLodgedCardRequest;
import com.konfigthis.client.model.CardUpdateLodgedCardResponse;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CardApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CardApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateDelayedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/IssueCard/ActivateDelayedCard/{{CardGuid}}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateDelayedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return activateDelayedCall(_callback);

    }


    private ApiResponse<CardActivateDelayedResponse> activateDelayedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = activateDelayedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CardActivateDelayedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateDelayedAsync(final ApiCallback<CardActivateDelayedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateDelayedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CardActivateDelayedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateDelayedRequestBuilder {

        private ActivateDelayedRequestBuilder() {
        }

        /**
         * Build call for activateDelayed
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateDelayedCall(_callback);
        }


        /**
         * Execute activateDelayed request
         * @return CardActivateDelayedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CardActivateDelayedResponse execute() throws ApiException {
            ApiResponse<CardActivateDelayedResponse> localVarResp = activateDelayedWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateDelayed request with HTTP info returned
         * @return ApiResponse&lt;CardActivateDelayedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CardActivateDelayedResponse> executeWithHttpInfo() throws ApiException {
            return activateDelayedWithHttpInfo();
        }

        /**
         * Execute activateDelayed request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CardActivateDelayedResponse> _callback) throws ApiException {
            return activateDelayedAsync(_callback);
        }
    }

    /**
     * Activate Virtual Card with Delayed Activation
     * Use this API to immediately activate a Virtual Card with a delayed activation date
     * @return ActivateDelayedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ActivateDelayedRequestBuilder activateDelayed() throws IllegalArgumentException {
        return new ActivateDelayedRequestBuilder();
    }
    private okhttp3.Call cancelVirtualCardCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/IssueCard/Cancel/{{CardGuid}}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelVirtualCardValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cancelVirtualCardCall(_callback);

    }


    private ApiResponse<CardCancelVirtualCardResponse> cancelVirtualCardWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cancelVirtualCardValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CardCancelVirtualCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelVirtualCardAsync(final ApiCallback<CardCancelVirtualCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelVirtualCardValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CardCancelVirtualCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelVirtualCardRequestBuilder {

        private CancelVirtualCardRequestBuilder() {
        }

        /**
         * Build call for cancelVirtualCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelVirtualCardCall(_callback);
        }


        /**
         * Execute cancelVirtualCard request
         * @return CardCancelVirtualCardResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CardCancelVirtualCardResponse execute() throws ApiException {
            ApiResponse<CardCancelVirtualCardResponse> localVarResp = cancelVirtualCardWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelVirtualCard request with HTTP info returned
         * @return ApiResponse&lt;CardCancelVirtualCardResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CardCancelVirtualCardResponse> executeWithHttpInfo() throws ApiException {
            return cancelVirtualCardWithHttpInfo();
        }

        /**
         * Execute cancelVirtualCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CardCancelVirtualCardResponse> _callback) throws ApiException {
            return cancelVirtualCardAsync(_callback);
        }
    }

    /**
     * Cancel Card
     * This endpoint should be called when you want to completely cancel a virtual card you created using the IssueLite endpoint.
     * @return CancelVirtualCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CancelVirtualCardRequestBuilder cancelVirtualCard() throws IllegalArgumentException {
        return new CancelVirtualCardRequestBuilder();
    }
    private okhttp3.Call createLodgedCardCall(CardCreateLodgedCardRequest cardCreateLodgedCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardCreateLodgedCardRequest;

        // create path and map variables
        String localVarPath = "/api/v1/IssueCard/LodgedCard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLodgedCardValidateBeforeCall(CardCreateLodgedCardRequest cardCreateLodgedCardRequest, final ApiCallback _callback) throws ApiException {
        return createLodgedCardCall(cardCreateLodgedCardRequest, _callback);

    }


    private ApiResponse<Object> createLodgedCardWithHttpInfo(CardCreateLodgedCardRequest cardCreateLodgedCardRequest) throws ApiException {
        okhttp3.Call localVarCall = createLodgedCardValidateBeforeCall(cardCreateLodgedCardRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLodgedCardAsync(CardCreateLodgedCardRequest cardCreateLodgedCardRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLodgedCardValidateBeforeCall(cardCreateLodgedCardRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLodgedCardRequestBuilder {
        private final String merchantGuid;
        private final String firstName;
        private final String lastName;
        private final Float amountLimit;
        private final String limitWindow;
        private String phone;
        private String address1;
        private String address2;
        private String city;
        private String state;
        private String zipCode;
        private String country;
        private Long usageLimit;
        private LocalDate expirationDate;
        private LocalDate terminateDate;
        private String purchaseType;
        private String sequenceNumber;
        private String orderNumber;
        private String supplierId;
        private Boolean nonDomesticSupplier;
        private CardCreateLodgedCardRequestTransmission transmission;
        private Boolean returnCardData;
        private String customerID;
        private String associationId;
        private List<String> labelIDs;
        private List<CardIssuanceCreateVirtualCardRequestCustomParametersInner> customParameters;

        private CreateLodgedCardRequestBuilder(String merchantGuid, String firstName, String lastName, Float amountLimit, String limitWindow) {
            this.merchantGuid = merchantGuid;
            this.firstName = firstName;
            this.lastName = lastName;
            this.amountLimit = amountLimit;
            this.limitWindow = limitWindow;
        }

        /**
         * Set phone
         * @param phone Cardholder&#39;s phone number. Phone number up to 20 character string, numbers and plus sign (+) allowed only. Telephone number of the user (including area code), prepended by the + symbol and the 1- to 3-digit country calling code. Do not include hyphens, spaces, or parentheses. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set address1
         * @param address1 Cardholder&#39;s address line 1. The street number is used by the supplier when submitting the transaction to perform an AVS check. Alphanumerics and [,.-&#39;] are allowed. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder address1(String address1) {
            this.address1 = address1;
            return this;
        }
        
        /**
         * Set address2
         * @param address2 Cardholder&#39;s address line 2. Alphanumerics and [,.-&#39;] are allowed. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder address2(String address2) {
            this.address2 = address2;
            return this;
        }
        
        /**
         * Set city
         * @param city Cardholder&#39;s city. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state Cardholder&#39;s short name state.  The ISO 3166-2 CA and US state or province code of a user. Length &#x3D; 2. If a non U.S. or Canadian value is submitted the virtual card request will not be processed and an error response returned. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zipCode
         * @param zipCode Cardholder&#39;s zipcode. The zip code is used by the supplier when submitting the transaction to perform an AVS check.  The Zipcode must be between 1 and 10 characters long, only numbers and letters are allowed. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }
        
        /**
         * Set country
         * @param country Cardholder&#39;s country.  Only alpha-2 digit country code allowed and numbers are not allowed.  See ISO-3166 country list of Alpha-2 country codes (https://www.iso.org/obp/ui/) . (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set usageLimit
         * @param usageLimit Security Control: Maximum number of times the card may be authorized. This is used in conjunction with the Limit Window: for example, if you specify a Usage Limit of 4 and a Limit Window of Monthly, the card can be authorized up to 4 times per month. The maximum allowed field value is 99, and if you do not provide a value the card will be considered unlimited. Authorization attempts exceeding the provided value will be declined. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder usageLimit(Long usageLimit) {
            this.usageLimit = usageLimit;
            return this;
        }
        
        /**
         * Set expirationDate
         * @param expirationDate The ExpirationDate (YYYY-MM-DD) is the date to be provided to the supplier as the actual expiration date for the virtual card. The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed to avoid acceptance issues.  The expiration date cannot be more than 36 months in the future. If an expiration date is not provided, the expiration will default to issue date plus three years. For cards issued outside of the US/Canada, the expiration date will default to issue date plus three years and can not be overwritten - even if this parameter is included in the request. Note, Returns can still be processed on expired or terminated VCCs. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder expirationDate(LocalDate expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        
        /**
         * Set terminateDate
         * @param terminateDate The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed. If a terminate date is not indicated, the card will be inactivated as of the expiration date. Note, Returns can still be processed on terminated VCCs. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder terminateDate(LocalDate terminateDate) {
            this.terminateDate = terminateDate;
            return this;
        }
        
        /**
         * Set purchaseType
         * @param purchaseType Security Control: The industry where the virtual card will be utilized. For example, if value set to airline and the card is used at hotel, it will be declined. Available purchase type values are: &#39;01&#39; (Airline), &#39;02&#39; (Hotels and Resorts), &#39;03&#39; (Car Rental), &#39;04&#39; (Cable, Satellite, Television, and Radio Services),  &#39;05&#39; (Cruise Lines), &#39;11&#39; (Medical Services and Health Practitioners), &#39;21&#39; (Advertising Services), &#39;22&#39; (Misc Advertising and Business Services), &#39;23&#39; (Ticketing), &#39;31&#39; (Insurance Sales, Underwriting, and Premiums), &#39;91&#39; (Restaurants and Food Services), and &#39;93&#39; (Tax Payments). Leave this blank if you plan to utilize MID level controls. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder purchaseType(String purchaseType) {
            this.purchaseType = purchaseType;
            return this;
        }
        
        /**
         * Set sequenceNumber
         * @param sequenceNumber Transaction sequence number within client environment. Provide a unique SequenceNumber for each new request. If the same value is sent within 30 minutes it will be considered a duplicate request. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder sequenceNumber(String sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }
        
        /**
         * Set orderNumber
         * @param orderNumber This is the most common number you&#39;ll see throughout the ConnexPay Portal.  Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field.  The maximum length is 50 alpha-numeric characters and allows dashes and spaces (\\\&quot;-\\\&quot;, \\\&quot; \\\&quot;). (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder orderNumber(String orderNumber) {
            this.orderNumber = orderNumber;
            return this;
        }
        
        /**
         * Set supplierId
         * @param supplierId The SupplierId is used to assist with Intelligent Routing functionality. In many cases, a Lodged Card is used at several different suppliers. In this case, there may be no reason to include SupplierId. However, if the Lodged Card will be used at a single supplier, we recommend sending in the SupplierId to assist with acceptance and rebate. The field accepts up to 100 alpha-numeric characters. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder supplierId(String supplierId) {
            this.supplierId = supplierId;
            return this;
        }
        
        /**
         * Set nonDomesticSupplier
         * @param nonDomesticSupplier We can issue the “Global VCC” if the Supplier accepting that VCC has an overseas merchant account. This is an optional field. Indicating true will result in issuing this Global VCC. Indicating false (or not including this property in your request) will result in receiving a VCC created for domestic use. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder nonDomesticSupplier(Boolean nonDomesticSupplier) {
            this.nonDomesticSupplier = nonDomesticSupplier;
            return this;
        }
        
        /**
         * Set transmission
         * @param transmission  (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder transmission(CardCreateLodgedCardRequestTransmission transmission) {
            this.transmission = transmission;
            return this;
        }
        
        /**
         * Set returnCardData
         * @param returnCardData Optional field that may be set to true or false. When set to a value of true or if the field is not provided at all, card data is returned in the response. When set to a value of false, the Card Account Number and Security Code (CVV) will be excluded from the response. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder returnCardData(Boolean returnCardData) {
            this.returnCardData = returnCardData;
            return this;
        }
        
        /**
         * Set customerID
         * @param customerID Transaction ID within client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes.  The maximum length is 50 characters and is alpha-numeric. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder customerID(String customerID) {
            this.customerID = customerID;
            return this;
        }
        
        /**
         * Set associationId
         * @param associationId Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder associationId(String associationId) {
            this.associationId = associationId;
            return this;
        }
        
        /**
         * Set labelIDs
         * @param labelIDs Utilize Label IDs to associate a lodged card to a specific label(s) within ConnexPay Bridge UI for your organization. If a lodged card is tied to an incorrect Label, it will not filter or display correctly in Bridge&#39;s Search Grid. Please contact your Customer Care Consultant for a list of valid Label IDs before use. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder labelIDs(List<String> labelIDs) {
            this.labelIDs = labelIDs;
            return this;
        }
        
        /**
         * Set customParameters
         * @param customParameters You can add custom parameters to your issue card request in the event that you need to associate additional information with the virtual card. For example, if you want to add an invoice number you would include the custom parameters object with the name parameter &#x3D; \\\&quot;invoice\\\&quot; and the value parameter as the invoice number. This requires customized reporting so you&#39;ll need to work with your implementations specialist to determine what&#39;s required. (optional)
         * @return CreateLodgedCardRequestBuilder
         */
        public CreateLodgedCardRequestBuilder customParameters(List<CardIssuanceCreateVirtualCardRequestCustomParametersInner> customParameters) {
            this.customParameters = customParameters;
            return this;
        }
        
        /**
         * Build call for createLodgedCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardCreateLodgedCardRequest cardCreateLodgedCardRequest = buildBodyParams();
            return createLodgedCardCall(cardCreateLodgedCardRequest, _callback);
        }

        private CardCreateLodgedCardRequest buildBodyParams() {
            CardCreateLodgedCardRequest cardCreateLodgedCardRequest = new CardCreateLodgedCardRequest();
            cardCreateLodgedCardRequest.merchantGuid(this.merchantGuid);
            cardCreateLodgedCardRequest.firstName(this.firstName);
            cardCreateLodgedCardRequest.lastName(this.lastName);
            cardCreateLodgedCardRequest.phone(this.phone);
            cardCreateLodgedCardRequest.address1(this.address1);
            cardCreateLodgedCardRequest.address2(this.address2);
            cardCreateLodgedCardRequest.city(this.city);
            cardCreateLodgedCardRequest.state(this.state);
            cardCreateLodgedCardRequest.zipCode(this.zipCode);
            cardCreateLodgedCardRequest.country(this.country);
            cardCreateLodgedCardRequest.usageLimit(this.usageLimit);
            cardCreateLodgedCardRequest.amountLimit(this.amountLimit);
            cardCreateLodgedCardRequest.limitWindow(this.limitWindow);
            cardCreateLodgedCardRequest.expirationDate(this.expirationDate);
            cardCreateLodgedCardRequest.terminateDate(this.terminateDate);
            cardCreateLodgedCardRequest.purchaseType(this.purchaseType);
            cardCreateLodgedCardRequest.sequenceNumber(this.sequenceNumber);
            cardCreateLodgedCardRequest.orderNumber(this.orderNumber);
            cardCreateLodgedCardRequest.supplierId(this.supplierId);
            cardCreateLodgedCardRequest.nonDomesticSupplier(this.nonDomesticSupplier);
            cardCreateLodgedCardRequest.transmission(this.transmission);
            cardCreateLodgedCardRequest.returnCardData(this.returnCardData);
            cardCreateLodgedCardRequest.customerID(this.customerID);
            cardCreateLodgedCardRequest.associationId(this.associationId);
            cardCreateLodgedCardRequest.labelIDs(this.labelIDs);
            cardCreateLodgedCardRequest.customParameters(this.customParameters);
            return cardCreateLodgedCardRequest;
        }

        /**
         * Execute createLodgedCard request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CardCreateLodgedCardRequest cardCreateLodgedCardRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = createLodgedCardWithHttpInfo(cardCreateLodgedCardRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLodgedCard request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CardCreateLodgedCardRequest cardCreateLodgedCardRequest = buildBodyParams();
            return createLodgedCardWithHttpInfo(cardCreateLodgedCardRequest);
        }

        /**
         * Execute createLodgedCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CardCreateLodgedCardRequest cardCreateLodgedCardRequest = buildBodyParams();
            return createLodgedCardAsync(cardCreateLodgedCardRequest, _callback);
        }
    }

    /**
     * Issue Lodged Card
     * Use this endpoint to create a Lodged Card
     * @return CreateLodgedCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateLodgedCardRequestBuilder createLodgedCard(String merchantGuid, String firstName, String lastName, Float amountLimit, String limitWindow) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (amountLimit == null) throw new IllegalArgumentException("\"amountLimit\" is required but got null");
        if (limitWindow == null) throw new IllegalArgumentException("\"limitWindow\" is required but got null");
            

        return new CreateLodgedCardRequestBuilder(merchantGuid, firstName, lastName, amountLimit, limitWindow);
    }
    private okhttp3.Call getDetailCall(String cardGuid, Boolean showFullPan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Cards/{CardGuid}/{ShowFullPan}"
            .replace("{" + "CardGuid" + "}", localVarApiClient.escapeString(cardGuid.toString()))
            .replace("{" + "ShowFullPan" + "}", localVarApiClient.escapeString(showFullPan.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailValidateBeforeCall(String cardGuid, Boolean showFullPan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardGuid' is set
        if (cardGuid == null) {
            throw new ApiException("Missing the required parameter 'cardGuid' when calling getDetail(Async)");
        }

        // verify the required parameter 'showFullPan' is set
        if (showFullPan == null) {
            throw new ApiException("Missing the required parameter 'showFullPan' when calling getDetail(Async)");
        }

        return getDetailCall(cardGuid, showFullPan, _callback);

    }


    private ApiResponse<CardGetDetailResponse> getDetailWithHttpInfo(String cardGuid, Boolean showFullPan) throws ApiException {
        okhttp3.Call localVarCall = getDetailValidateBeforeCall(cardGuid, showFullPan, null);
        Type localVarReturnType = new TypeToken<CardGetDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailAsync(String cardGuid, Boolean showFullPan, final ApiCallback<CardGetDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailValidateBeforeCall(cardGuid, showFullPan, _callback);
        Type localVarReturnType = new TypeToken<CardGetDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailRequestBuilder {
        private final String cardGuid;
        private final Boolean showFullPan;

        private GetDetailRequestBuilder(String cardGuid, Boolean showFullPan) {
            this.cardGuid = cardGuid;
            this.showFullPan = showFullPan;
        }

        /**
         * Build call for getDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailCall(cardGuid, showFullPan, _callback);
        }


        /**
         * Execute getDetail request
         * @return CardGetDetailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CardGetDetailResponse execute() throws ApiException {
            ApiResponse<CardGetDetailResponse> localVarResp = getDetailWithHttpInfo(cardGuid, showFullPan);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetail request with HTTP info returned
         * @return ApiResponse&lt;CardGetDetailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CardGetDetailResponse> executeWithHttpInfo() throws ApiException {
            return getDetailWithHttpInfo(cardGuid, showFullPan);
        }

        /**
         * Execute getDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CardGetDetailResponse> _callback) throws ApiException {
            return getDetailAsync(cardGuid, showFullPan, _callback);
        }
    }

    /**
     * Get Issue Card Detail
     * This Endpoint returns Virtual Credit Card details for a specific card guid.
     * @param cardGuid Global Unique Identifier for the VCC. (required)
     * @param showFullPan Set to True to indicate whether the response should include the full account number. (required)
     * @return GetDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailRequestBuilder getDetail(String cardGuid, Boolean showFullPan) throws IllegalArgumentException {
        if (cardGuid == null) throw new IllegalArgumentException("\"cardGuid\" is required but got null");
            

        if (showFullPan == null) throw new IllegalArgumentException("\"showFullPan\" is required but got null");
        return new GetDetailRequestBuilder(cardGuid, showFullPan);
    }
    private okhttp3.Call resendTransmissionInfoCall(String cardGuid, CardResendTransmissionInfoRequest cardResendTransmissionInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardResendTransmissionInfoRequest;

        // create path and map variables
        String localVarPath = "/api/v1/IssueCard/SendPaymentInfo/{cardGuid}"
            .replace("{" + "CardGuid" + "}", localVarApiClient.escapeString(cardGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendTransmissionInfoValidateBeforeCall(String cardGuid, CardResendTransmissionInfoRequest cardResendTransmissionInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardGuid' is set
        if (cardGuid == null) {
            throw new ApiException("Missing the required parameter 'cardGuid' when calling resendTransmissionInfo(Async)");
        }

        return resendTransmissionInfoCall(cardGuid, cardResendTransmissionInfoRequest, _callback);

    }


    private ApiResponse<CardResendTransmissionInfoResponse> resendTransmissionInfoWithHttpInfo(String cardGuid, CardResendTransmissionInfoRequest cardResendTransmissionInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = resendTransmissionInfoValidateBeforeCall(cardGuid, cardResendTransmissionInfoRequest, null);
        Type localVarReturnType = new TypeToken<CardResendTransmissionInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resendTransmissionInfoAsync(String cardGuid, CardResendTransmissionInfoRequest cardResendTransmissionInfoRequest, final ApiCallback<CardResendTransmissionInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendTransmissionInfoValidateBeforeCall(cardGuid, cardResendTransmissionInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<CardResendTransmissionInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResendTransmissionInfoRequestBuilder {
        private final List<String> transmissionMethods;
        private final String cardGuid;
        private String emailRecipient;
        private String merchantPhoneNumber;
        private String emailFrom;
        private String recipientName;
        private String subject;
        private String message;
        private Integer daysToExpire;
        private String faxFrom;
        private String faxRecipient;

        private ResendTransmissionInfoRequestBuilder(List<String> transmissionMethods, String cardGuid) {
            this.transmissionMethods = transmissionMethods;
            this.cardGuid = cardGuid;
        }

        /**
         * Set emailRecipient
         * @param emailRecipient Mandatory when transmission is Email. Otherwise don&#39;t include. This is the email address of the intended recipient. 255 char max. (optional)
         * @return ResendTransmissionInfoRequestBuilder
         */
        public ResendTransmissionInfoRequestBuilder emailRecipient(String emailRecipient) {
            this.emailRecipient = emailRecipient;
            return this;
        }
        
        /**
         * Set merchantPhoneNumber
         * @param merchantPhoneNumber This is the phone number that should display on the virtual card and is the number that should be used if the link has expired. Up to 15 characters. Numbers and plus sign (+) allowed only. (optional)
         * @return ResendTransmissionInfoRequestBuilder
         */
        public ResendTransmissionInfoRequestBuilder merchantPhoneNumber(String merchantPhoneNumber) {
            this.merchantPhoneNumber = merchantPhoneNumber;
            return this;
        }
        
        /**
         * Set emailFrom
         * @param emailFrom For email transmissions, this will be the email address that populates the ‘reply to’ section of the email message. Do not include this parameter on other transmission method types. 255 char max. (optional)
         * @return ResendTransmissionInfoRequestBuilder
         */
        public ResendTransmissionInfoRequestBuilder emailFrom(String emailFrom) {
            this.emailFrom = emailFrom;
            return this;
        }
        
        /**
         * Set recipientName
         * @param recipientName A descriptive name of the email or fax recipient. Does not apply to the Link transmission method type. 255 char max (optional)
         * @return ResendTransmissionInfoRequestBuilder
         */
        public ResendTransmissionInfoRequestBuilder recipientName(String recipientName) {
            this.recipientName = recipientName;
            return this;
        }
        
        /**
         * Set subject
         * @param subject High-level subject line description of the transmission contents. Does not apply to the Link transmission method type. 255 char max. (optional)
         * @return ResendTransmissionInfoRequestBuilder
         */
        public ResendTransmissionInfoRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set message
         * @param message The message body of the email or fax. Does not apply to the Link transmission method type. 1024 char max. (optional)
         * @return ResendTransmissionInfoRequestBuilder
         */
        public ResendTransmissionInfoRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set daysToExpire
         * @param daysToExpire The number of days after card issuance until the link to the VC expires. Range: 1-999 days. (optional)
         * @return ResendTransmissionInfoRequestBuilder
         */
        public ResendTransmissionInfoRequestBuilder daysToExpire(Integer daysToExpire) {
            this.daysToExpire = daysToExpire;
            return this;
        }
        
        /**
         * Set faxFrom
         * @param faxFrom Mandatory for fax transmission. This can be the client name or fax number the fax is coming from that populates the ‘FaxFrom’ section of the fax. 255 char max. (optional)
         * @return ResendTransmissionInfoRequestBuilder
         */
        public ResendTransmissionInfoRequestBuilder faxFrom(String faxFrom) {
            this.faxFrom = faxFrom;
            return this;
        }
        
        /**
         * Set faxRecipient
         * @param faxRecipient Mandatory for fax transmissions.  The fax number of the intended recipient. (optional)
         * @return ResendTransmissionInfoRequestBuilder
         */
        public ResendTransmissionInfoRequestBuilder faxRecipient(String faxRecipient) {
            this.faxRecipient = faxRecipient;
            return this;
        }
        
        /**
         * Build call for resendTransmissionInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardResendTransmissionInfoRequest cardResendTransmissionInfoRequest = buildBodyParams();
            return resendTransmissionInfoCall(cardGuid, cardResendTransmissionInfoRequest, _callback);
        }

        private CardResendTransmissionInfoRequest buildBodyParams() {
            CardResendTransmissionInfoRequest cardResendTransmissionInfoRequest = new CardResendTransmissionInfoRequest();
            cardResendTransmissionInfoRequest.transmissionMethods(this.transmissionMethods);
            cardResendTransmissionInfoRequest.emailRecipient(this.emailRecipient);
            cardResendTransmissionInfoRequest.merchantPhoneNumber(this.merchantPhoneNumber);
            cardResendTransmissionInfoRequest.emailFrom(this.emailFrom);
            cardResendTransmissionInfoRequest.recipientName(this.recipientName);
            cardResendTransmissionInfoRequest.subject(this.subject);
            cardResendTransmissionInfoRequest.message(this.message);
            cardResendTransmissionInfoRequest.daysToExpire(this.daysToExpire);
            cardResendTransmissionInfoRequest.faxFrom(this.faxFrom);
            cardResendTransmissionInfoRequest.faxRecipient(this.faxRecipient);
            return cardResendTransmissionInfoRequest;
        }

        /**
         * Execute resendTransmissionInfo request
         * @return CardResendTransmissionInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CardResendTransmissionInfoResponse execute() throws ApiException {
            CardResendTransmissionInfoRequest cardResendTransmissionInfoRequest = buildBodyParams();
            ApiResponse<CardResendTransmissionInfoResponse> localVarResp = resendTransmissionInfoWithHttpInfo(cardGuid, cardResendTransmissionInfoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resendTransmissionInfo request with HTTP info returned
         * @return ApiResponse&lt;CardResendTransmissionInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CardResendTransmissionInfoResponse> executeWithHttpInfo() throws ApiException {
            CardResendTransmissionInfoRequest cardResendTransmissionInfoRequest = buildBodyParams();
            return resendTransmissionInfoWithHttpInfo(cardGuid, cardResendTransmissionInfoRequest);
        }

        /**
         * Execute resendTransmissionInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CardResendTransmissionInfoResponse> _callback) throws ApiException {
            CardResendTransmissionInfoRequest cardResendTransmissionInfoRequest = buildBodyParams();
            return resendTransmissionInfoAsync(cardGuid, cardResendTransmissionInfoRequest, _callback);
        }
    }

    /**
     * Resend Transmission
     * This endpoint resends payment information to recipient. Or returns a URL you can use within your application to direct a user to a visual representation of the virtual card.
     * @param cardGuid Global Unique Identififer for the Card. (required)
     * @return ResendTransmissionInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ResendTransmissionInfoRequestBuilder resendTransmissionInfo(List<String> transmissionMethods, String cardGuid) throws IllegalArgumentException {
        if (transmissionMethods == null) throw new IllegalArgumentException("\"transmissionMethods\" is required but got null");
        if (cardGuid == null) throw new IllegalArgumentException("\"cardGuid\" is required but got null");
            

        return new ResendTransmissionInfoRequestBuilder(transmissionMethods, cardGuid);
    }
    private okhttp3.Call searchIssuedVirtualCardsCall(Integer pageNumber, Integer pageSize, CardSearchIssuedVirtualCardsRequest cardSearchIssuedVirtualCardsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardSearchIssuedVirtualCardsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/Search/IssuedCards"
            .replace("{" + "PageNumber" + "}", localVarApiClient.escapeString(pageNumber.toString()))
            .replace("{" + "PageSize" + "}", localVarApiClient.escapeString(pageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchIssuedVirtualCardsValidateBeforeCall(Integer pageNumber, Integer pageSize, CardSearchIssuedVirtualCardsRequest cardSearchIssuedVirtualCardsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling searchIssuedVirtualCards(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling searchIssuedVirtualCards(Async)");
        }

        return searchIssuedVirtualCardsCall(pageNumber, pageSize, cardSearchIssuedVirtualCardsRequest, _callback);

    }


    private ApiResponse<String> searchIssuedVirtualCardsWithHttpInfo(Integer pageNumber, Integer pageSize, CardSearchIssuedVirtualCardsRequest cardSearchIssuedVirtualCardsRequest) throws ApiException {
        okhttp3.Call localVarCall = searchIssuedVirtualCardsValidateBeforeCall(pageNumber, pageSize, cardSearchIssuedVirtualCardsRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchIssuedVirtualCardsAsync(Integer pageNumber, Integer pageSize, CardSearchIssuedVirtualCardsRequest cardSearchIssuedVirtualCardsRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchIssuedVirtualCardsValidateBeforeCall(pageNumber, pageSize, cardSearchIssuedVirtualCardsRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchIssuedVirtualCardsRequestBuilder {
        private final String merchantGuid;
        private final Integer pageNumber;
        private final Integer pageSize;
        private String saleGuid;
        private String incomingTransactionCode;
        private String orderNumber;
        private String customerID;
        private LocalDate timeStampFrom;
        private LocalDate timeStampTo;
        private Float issuedAmountFrom;
        private Float issuedAmountTo;
        private String outgoingTransactionCode;
        private Long settledAmountFrom;
        private Long settledAmountTo;
        private Long returnedAmountFrom;
        private Long returnedAmountTo;

        private SearchIssuedVirtualCardsRequestBuilder(String merchantGuid, Integer pageNumber, Integer pageSize) {
            this.merchantGuid = merchantGuid;
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Set saleGuid
         * @param saleGuid Sale GUID linked to the card you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder saleGuid(String saleGuid) {
            this.saleGuid = saleGuid;
            return this;
        }
        
        /**
         * Set incomingTransactionCode
         * @param incomingTransactionCode Incoming Transaction Code linked to the card you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder incomingTransactionCode(String incomingTransactionCode) {
            this.incomingTransactionCode = incomingTransactionCode;
            return this;
        }
        
        /**
         * Set orderNumber
         * @param orderNumber Order Number linked to the card you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder orderNumber(String orderNumber) {
            this.orderNumber = orderNumber;
            return this;
        }
        
        /**
         * Set customerID
         * @param customerID Order Number linked to the card you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder customerID(String customerID) {
            this.customerID = customerID;
            return this;
        }
        
        /**
         * Set timeStampFrom
         * @param timeStampFrom Starting Issued Date linked to the card(s) you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder timeStampFrom(LocalDate timeStampFrom) {
            this.timeStampFrom = timeStampFrom;
            return this;
        }
        
        /**
         * Set timeStampTo
         * @param timeStampTo Ending Issued Date linked to the card(s) you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder timeStampTo(LocalDate timeStampTo) {
            this.timeStampTo = timeStampTo;
            return this;
        }
        
        /**
         * Set issuedAmountFrom
         * @param issuedAmountFrom Start of Issued Amount range linked to the card(s) you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder issuedAmountFrom(Float issuedAmountFrom) {
            this.issuedAmountFrom = issuedAmountFrom;
            return this;
        }
        
        /**
         * Set issuedAmountTo
         * @param issuedAmountTo End of Issued Amount range linked to the card(s) you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder issuedAmountTo(Float issuedAmountTo) {
            this.issuedAmountTo = issuedAmountTo;
            return this;
        }
        
        /**
         * Set outgoingTransactionCode
         * @param outgoingTransactionCode Outgoing Transaction Code linked to the card(s) you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder outgoingTransactionCode(String outgoingTransactionCode) {
            this.outgoingTransactionCode = outgoingTransactionCode;
            return this;
        }
        
        /**
         * Set settledAmountFrom
         * @param settledAmountFrom Start of Settled Amount range linked to the card(s) you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder settledAmountFrom(Long settledAmountFrom) {
            this.settledAmountFrom = settledAmountFrom;
            return this;
        }
        
        /**
         * Set settledAmountTo
         * @param settledAmountTo End of Settled Amount range linked to the card(s) you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder settledAmountTo(Long settledAmountTo) {
            this.settledAmountTo = settledAmountTo;
            return this;
        }
        
        /**
         * Set returnedAmountFrom
         * @param returnedAmountFrom Start of Settled Returned Amount range linked to the card(s) you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder returnedAmountFrom(Long returnedAmountFrom) {
            this.returnedAmountFrom = returnedAmountFrom;
            return this;
        }
        
        /**
         * Set returnedAmountTo
         * @param returnedAmountTo End of Settled Returned Amount range linked to the card(s) you are searching. (optional)
         * @return SearchIssuedVirtualCardsRequestBuilder
         */
        public SearchIssuedVirtualCardsRequestBuilder returnedAmountTo(Long returnedAmountTo) {
            this.returnedAmountTo = returnedAmountTo;
            return this;
        }
        
        /**
         * Build call for searchIssuedVirtualCards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardSearchIssuedVirtualCardsRequest cardSearchIssuedVirtualCardsRequest = buildBodyParams();
            return searchIssuedVirtualCardsCall(pageNumber, pageSize, cardSearchIssuedVirtualCardsRequest, _callback);
        }

        private CardSearchIssuedVirtualCardsRequest buildBodyParams() {
            CardSearchIssuedVirtualCardsRequest cardSearchIssuedVirtualCardsRequest = new CardSearchIssuedVirtualCardsRequest();
            cardSearchIssuedVirtualCardsRequest.merchantGuid(this.merchantGuid);
            cardSearchIssuedVirtualCardsRequest.saleGuid(this.saleGuid);
            cardSearchIssuedVirtualCardsRequest.incomingTransactionCode(this.incomingTransactionCode);
            cardSearchIssuedVirtualCardsRequest.orderNumber(this.orderNumber);
            cardSearchIssuedVirtualCardsRequest.customerID(this.customerID);
            cardSearchIssuedVirtualCardsRequest.timeStampFrom(this.timeStampFrom);
            cardSearchIssuedVirtualCardsRequest.timeStampTo(this.timeStampTo);
            cardSearchIssuedVirtualCardsRequest.issuedAmountFrom(this.issuedAmountFrom);
            cardSearchIssuedVirtualCardsRequest.issuedAmountTo(this.issuedAmountTo);
            cardSearchIssuedVirtualCardsRequest.outgoingTransactionCode(this.outgoingTransactionCode);
            cardSearchIssuedVirtualCardsRequest.settledAmountFrom(this.settledAmountFrom);
            cardSearchIssuedVirtualCardsRequest.settledAmountTo(this.settledAmountTo);
            cardSearchIssuedVirtualCardsRequest.returnedAmountFrom(this.returnedAmountFrom);
            cardSearchIssuedVirtualCardsRequest.returnedAmountTo(this.returnedAmountTo);
            return cardSearchIssuedVirtualCardsRequest;
        }

        /**
         * Execute searchIssuedVirtualCards request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            CardSearchIssuedVirtualCardsRequest cardSearchIssuedVirtualCardsRequest = buildBodyParams();
            ApiResponse<String> localVarResp = searchIssuedVirtualCardsWithHttpInfo(pageNumber, pageSize, cardSearchIssuedVirtualCardsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchIssuedVirtualCards request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            CardSearchIssuedVirtualCardsRequest cardSearchIssuedVirtualCardsRequest = buildBodyParams();
            return searchIssuedVirtualCardsWithHttpInfo(pageNumber, pageSize, cardSearchIssuedVirtualCardsRequest);
        }

        /**
         * Execute searchIssuedVirtualCards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            CardSearchIssuedVirtualCardsRequest cardSearchIssuedVirtualCardsRequest = buildBodyParams();
            return searchIssuedVirtualCardsAsync(pageNumber, pageSize, cardSearchIssuedVirtualCardsRequest, _callback);
        }
    }

    /**
     * Search Issued Cards
     * This endpoint searches for Issued Virtual Cards.
     * @param pageNumber Number of page of the results. Default is 1. (required)
     * @param pageSize Size of each page of the results. Default is 1000. (required)
     * @return SearchIssuedVirtualCardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SearchIssuedVirtualCardsRequestBuilder searchIssuedVirtualCards(String merchantGuid, Integer pageNumber, Integer pageSize) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
        return new SearchIssuedVirtualCardsRequestBuilder(merchantGuid, pageNumber, pageSize);
    }
    private okhttp3.Call terminateByDateCall(String guid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/TerminateCard/<guid>"
            .replace("{" + "guid" + "}", localVarApiClient.escapeString(guid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call terminateByDateValidateBeforeCall(String guid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guid' is set
        if (guid == null) {
            throw new ApiException("Missing the required parameter 'guid' when calling terminateByDate(Async)");
        }

        return terminateByDateCall(guid, _callback);

    }


    private ApiResponse<CardTerminateByDateResponse> terminateByDateWithHttpInfo(String guid) throws ApiException {
        okhttp3.Call localVarCall = terminateByDateValidateBeforeCall(guid, null);
        Type localVarReturnType = new TypeToken<CardTerminateByDateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call terminateByDateAsync(String guid, final ApiCallback<CardTerminateByDateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = terminateByDateValidateBeforeCall(guid, _callback);
        Type localVarReturnType = new TypeToken<CardTerminateByDateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TerminateByDateRequestBuilder {
        private final String guid;

        private TerminateByDateRequestBuilder(String guid) {
            this.guid = guid;
        }

        /**
         * Build call for terminateByDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return terminateByDateCall(guid, _callback);
        }


        /**
         * Execute terminateByDate request
         * @return CardTerminateByDateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CardTerminateByDateResponse execute() throws ApiException {
            ApiResponse<CardTerminateByDateResponse> localVarResp = terminateByDateWithHttpInfo(guid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute terminateByDate request with HTTP info returned
         * @return ApiResponse&lt;CardTerminateByDateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CardTerminateByDateResponse> executeWithHttpInfo() throws ApiException {
            return terminateByDateWithHttpInfo(guid);
        }

        /**
         * Execute terminateByDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CardTerminateByDateResponse> _callback) throws ApiException {
            return terminateByDateAsync(guid, _callback);
        }
    }

    /**
     * Terminate Card
     * The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  ExpirationDate is the month and year that will be applied to the actual VCC. Note, Returns can still be processed on terminated VCCs.
     * @param guid Card’s guid to terminate (required)
     * @return TerminateByDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public TerminateByDateRequestBuilder terminateByDate(String guid) throws IllegalArgumentException {
        if (guid == null) throw new IllegalArgumentException("\"guid\" is required but got null");
            

        return new TerminateByDateRequestBuilder(guid);
    }
    private okhttp3.Call updateCardDetailsCall(String cardGuid, CardUpdateCardDetailsRequest cardUpdateCardDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardUpdateCardDetailsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/IssueCard/{cardGuid}"
            .replace("{" + "CardGuid" + "}", localVarApiClient.escapeString(cardGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardDetailsValidateBeforeCall(String cardGuid, CardUpdateCardDetailsRequest cardUpdateCardDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardGuid' is set
        if (cardGuid == null) {
            throw new ApiException("Missing the required parameter 'cardGuid' when calling updateCardDetails(Async)");
        }

        return updateCardDetailsCall(cardGuid, cardUpdateCardDetailsRequest, _callback);

    }


    private ApiResponse<CardUpdateCardDetailsResponse> updateCardDetailsWithHttpInfo(String cardGuid, CardUpdateCardDetailsRequest cardUpdateCardDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCardDetailsValidateBeforeCall(cardGuid, cardUpdateCardDetailsRequest, null);
        Type localVarReturnType = new TypeToken<CardUpdateCardDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCardDetailsAsync(String cardGuid, CardUpdateCardDetailsRequest cardUpdateCardDetailsRequest, final ApiCallback<CardUpdateCardDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardDetailsValidateBeforeCall(cardGuid, cardUpdateCardDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<CardUpdateCardDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCardDetailsRequestBuilder {
        private final String cardGuid;
        private String purchaseType;
        private List<String> miDWhitelist;
        private List<String> miDBlacklist;
        private Integer usageLimit;
        private String associationId;
        private LocalDate terminateDate;
        private Float amountLimit;

        private UpdateCardDetailsRequestBuilder(String cardGuid) {
            this.cardGuid = cardGuid;
        }

        /**
         * Set purchaseType
         * @param purchaseType Security Control: The industry where the virtual card will be utilized. For example, if value set to airline and the card is used at hotel, it will be declined. Available purchase type values are: &#39;01&#39; (Airline), &#39;02&#39; (Hotels and Resorts), &#39;03&#39; (Car Rental), &#39;04&#39; (Cable, Satellite, Television, and Radio Services),  &#39;05&#39; (Cruise Lines), &#39;11&#39; (Medical Services and Health Practitioners), &#39;21&#39; (Advertising Services), &#39;22&#39; (Misc Advertising and Business Services), &#39;23&#39; (Ticketing), &#39;31&#39; (Insurance Sales, Underwriting, and Premiums), &#39;91&#39; (Restaurants and Food Services), and &#39;93&#39; (Tax Payments). Leave this blank if you plan to utilize MID level controls. (optional)
         * @return UpdateCardDetailsRequestBuilder
         */
        public UpdateCardDetailsRequestBuilder purchaseType(String purchaseType) {
            this.purchaseType = purchaseType;
            return this;
        }
        
        /**
         * Set miDWhitelist
         * @param miDWhitelist MID &#x3D; Merchant ID. Whitelisted MIDs are a supplement to Purchase Type. Utilize if you have a supplier MID(s) where the card can be used if that MID is categorized in an MCC other than the Purchase Type selected. Or use instead of Purchase Type. (e.g., [&#39;273154000108778&#39;, &#39;900074LKM&#39;]) (optional)
         * @return UpdateCardDetailsRequestBuilder
         */
        public UpdateCardDetailsRequestBuilder miDWhitelist(List<String> miDWhitelist) {
            this.miDWhitelist = miDWhitelist;
            return this;
        }
        
        /**
         * Set miDBlacklist
         * @param miDBlacklist MID &#x3D; Merchant ID. The list of MIDs where the virtual card will always be DECLINED regardless of PurchaseType or MIDWhitelist. MIDBlacklist overrides all other specifications. (eg. [&#39;273594000108778&#39;].) (optional)
         * @return UpdateCardDetailsRequestBuilder
         */
        public UpdateCardDetailsRequestBuilder miDBlacklist(List<String> miDBlacklist) {
            this.miDBlacklist = miDBlacklist;
            return this;
        }
        
        /**
         * Set usageLimit
         * @param usageLimit Security Control: Maximum number of times the card may be authorized. The maximum allowed field value is 99, and if you do not provide a value the card will be considered unlimited. Authorization attempts exceeding the provided value will be declined. Even though a virtual card is often considered a “one-time-use” card, some suppliers may need to authorize a card multiple times (pre-authorizations, a purchase comprised of multiple tickets, etc.) and you may consider a value that is not overly restrictive to avoid unwanted declines. (optional)
         * @return UpdateCardDetailsRequestBuilder
         */
        public UpdateCardDetailsRequestBuilder usageLimit(Integer usageLimit) {
            this.usageLimit = usageLimit;
            return this;
        }
        
        /**
         * Set associationId
         * @param associationId Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting. (optional)
         * @return UpdateCardDetailsRequestBuilder
         */
        public UpdateCardDetailsRequestBuilder associationId(String associationId) {
            this.associationId = associationId;
            return this;
        }
        
        /**
         * Set terminateDate
         * @param terminateDate The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed. If a terminate date is not indicated, the card will be inactivated as of the expiration date. Note, Returns can still be processed on terminated VCCs. (optional)
         * @return UpdateCardDetailsRequestBuilder
         */
        public UpdateCardDetailsRequestBuilder terminateDate(LocalDate terminateDate) {
            this.terminateDate = terminateDate;
            return this;
        }
        
        /**
         * Set amountLimit
         * @param amountLimit Security Control: Maximum dollar amount the card can be authorized and settled, which must be less than or equal to $1,000,000.00. The value must incorporate any anticipated overages such as currency conversion or taxes that a supplier may associate with the transaction. If a supplier attempts to authorize a card for more than the amount limit it will be declined. (optional)
         * @return UpdateCardDetailsRequestBuilder
         */
        public UpdateCardDetailsRequestBuilder amountLimit(Float amountLimit) {
            this.amountLimit = amountLimit;
            return this;
        }
        
        /**
         * Build call for updateCardDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardUpdateCardDetailsRequest cardUpdateCardDetailsRequest = buildBodyParams();
            return updateCardDetailsCall(cardGuid, cardUpdateCardDetailsRequest, _callback);
        }

        private CardUpdateCardDetailsRequest buildBodyParams() {
            CardUpdateCardDetailsRequest cardUpdateCardDetailsRequest = new CardUpdateCardDetailsRequest();
            cardUpdateCardDetailsRequest.purchaseType(this.purchaseType);
            cardUpdateCardDetailsRequest.miDWhitelist(this.miDWhitelist);
            cardUpdateCardDetailsRequest.miDBlacklist(this.miDBlacklist);
            cardUpdateCardDetailsRequest.usageLimit(this.usageLimit);
            cardUpdateCardDetailsRequest.associationId(this.associationId);
            cardUpdateCardDetailsRequest.terminateDate(this.terminateDate);
            cardUpdateCardDetailsRequest.amountLimit(this.amountLimit);
            return cardUpdateCardDetailsRequest;
        }

        /**
         * Execute updateCardDetails request
         * @return CardUpdateCardDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CardUpdateCardDetailsResponse execute() throws ApiException {
            CardUpdateCardDetailsRequest cardUpdateCardDetailsRequest = buildBodyParams();
            ApiResponse<CardUpdateCardDetailsResponse> localVarResp = updateCardDetailsWithHttpInfo(cardGuid, cardUpdateCardDetailsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCardDetails request with HTTP info returned
         * @return ApiResponse&lt;CardUpdateCardDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CardUpdateCardDetailsResponse> executeWithHttpInfo() throws ApiException {
            CardUpdateCardDetailsRequest cardUpdateCardDetailsRequest = buildBodyParams();
            return updateCardDetailsWithHttpInfo(cardGuid, cardUpdateCardDetailsRequest);
        }

        /**
         * Execute updateCardDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CardUpdateCardDetailsResponse> _callback) throws ApiException {
            CardUpdateCardDetailsRequest cardUpdateCardDetailsRequest = buildBodyParams();
            return updateCardDetailsAsync(cardGuid, cardUpdateCardDetailsRequest, _callback);
        }
    }

    /**
     * Update Card
     * 
     * @param cardGuid Global Unique Identififer for the Card. (required)
     * @return UpdateCardDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCardDetailsRequestBuilder updateCardDetails(String cardGuid) throws IllegalArgumentException {
        if (cardGuid == null) throw new IllegalArgumentException("\"cardGuid\" is required but got null");
            

        return new UpdateCardDetailsRequestBuilder(cardGuid);
    }
    private okhttp3.Call updateDelayedActivationCall(String cardGuid, CardUpdateDelayedActivationRequest cardUpdateDelayedActivationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardUpdateDelayedActivationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/IssueCard/UpdateDelayedCard/{{CardGuid}}"
            .replace("{" + "CardGuid" + "}", localVarApiClient.escapeString(cardGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDelayedActivationValidateBeforeCall(String cardGuid, CardUpdateDelayedActivationRequest cardUpdateDelayedActivationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardGuid' is set
        if (cardGuid == null) {
            throw new ApiException("Missing the required parameter 'cardGuid' when calling updateDelayedActivation(Async)");
        }

        return updateDelayedActivationCall(cardGuid, cardUpdateDelayedActivationRequest, _callback);

    }


    private ApiResponse<CardUpdateDelayedActivationResponse> updateDelayedActivationWithHttpInfo(String cardGuid, CardUpdateDelayedActivationRequest cardUpdateDelayedActivationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDelayedActivationValidateBeforeCall(cardGuid, cardUpdateDelayedActivationRequest, null);
        Type localVarReturnType = new TypeToken<CardUpdateDelayedActivationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDelayedActivationAsync(String cardGuid, CardUpdateDelayedActivationRequest cardUpdateDelayedActivationRequest, final ApiCallback<CardUpdateDelayedActivationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDelayedActivationValidateBeforeCall(cardGuid, cardUpdateDelayedActivationRequest, _callback);
        Type localVarReturnType = new TypeToken<CardUpdateDelayedActivationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDelayedActivationRequestBuilder {
        private final String merchantGuid;
        private final String cardGuid;
        private LocalDate activationDate;
        private Float amountLimit;
        private LocalDate terminateDate;

        private UpdateDelayedActivationRequestBuilder(String merchantGuid, String cardGuid) {
            this.merchantGuid = merchantGuid;
            this.cardGuid = cardGuid;
        }

        /**
         * Set activationDate
         * @param activationDate Provide a future date, up to 600 days, if you wish to update the virtual card&#39;s activation date. Otherwise leave blank. (optional)
         * @return UpdateDelayedActivationRequestBuilder
         */
        public UpdateDelayedActivationRequestBuilder activationDate(LocalDate activationDate) {
            this.activationDate = activationDate;
            return this;
        }
        
        /**
         * Set amountLimit
         * @param amountLimit Provide a card amount if you wish to update the amount limit for the virtual card, otherwise leave blank. (optional)
         * @return UpdateDelayedActivationRequestBuilder
         */
        public UpdateDelayedActivationRequestBuilder amountLimit(Float amountLimit) {
            this.amountLimit = amountLimit;
            return this;
        }
        
        /**
         * Set terminateDate
         * @param terminateDate The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  ExpirationDate is the month and year that will be applied to the actual VCC. The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed. Note, Returns can still be processed on terminated VCCs. (optional)
         * @return UpdateDelayedActivationRequestBuilder
         */
        public UpdateDelayedActivationRequestBuilder terminateDate(LocalDate terminateDate) {
            this.terminateDate = terminateDate;
            return this;
        }
        
        /**
         * Build call for updateDelayedActivation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardUpdateDelayedActivationRequest cardUpdateDelayedActivationRequest = buildBodyParams();
            return updateDelayedActivationCall(cardGuid, cardUpdateDelayedActivationRequest, _callback);
        }

        private CardUpdateDelayedActivationRequest buildBodyParams() {
            CardUpdateDelayedActivationRequest cardUpdateDelayedActivationRequest = new CardUpdateDelayedActivationRequest();
            cardUpdateDelayedActivationRequest.merchantGuid(this.merchantGuid);
            cardUpdateDelayedActivationRequest.activationDate(this.activationDate);
            cardUpdateDelayedActivationRequest.amountLimit(this.amountLimit);
            cardUpdateDelayedActivationRequest.terminateDate(this.terminateDate);
            return cardUpdateDelayedActivationRequest;
        }

        /**
         * Execute updateDelayedActivation request
         * @return CardUpdateDelayedActivationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CardUpdateDelayedActivationResponse execute() throws ApiException {
            CardUpdateDelayedActivationRequest cardUpdateDelayedActivationRequest = buildBodyParams();
            ApiResponse<CardUpdateDelayedActivationResponse> localVarResp = updateDelayedActivationWithHttpInfo(cardGuid, cardUpdateDelayedActivationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDelayedActivation request with HTTP info returned
         * @return ApiResponse&lt;CardUpdateDelayedActivationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CardUpdateDelayedActivationResponse> executeWithHttpInfo() throws ApiException {
            CardUpdateDelayedActivationRequest cardUpdateDelayedActivationRequest = buildBodyParams();
            return updateDelayedActivationWithHttpInfo(cardGuid, cardUpdateDelayedActivationRequest);
        }

        /**
         * Execute updateDelayedActivation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CardUpdateDelayedActivationResponse> _callback) throws ApiException {
            CardUpdateDelayedActivationRequest cardUpdateDelayedActivationRequest = buildBodyParams();
            return updateDelayedActivationAsync(cardGuid, cardUpdateDelayedActivationRequest, _callback);
        }
    }

    /**
     * Update Virtual Card with Delayed Activation
     * Request this endpoint to update the activation date or card limit of a virtual card with a future activation date.
     * @param cardGuid Global Unique Identifier for the Card. (required)
     * @return UpdateDelayedActivationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDelayedActivationRequestBuilder updateDelayedActivation(String merchantGuid, String cardGuid) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (cardGuid == null) throw new IllegalArgumentException("\"cardGuid\" is required but got null");
            

        return new UpdateDelayedActivationRequestBuilder(merchantGuid, cardGuid);
    }
    private okhttp3.Call updateLodgedCardCall(String cardGuid, CardUpdateLodgedCardRequest cardUpdateLodgedCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardUpdateLodgedCardRequest;

        // create path and map variables
        String localVarPath = "/api/v1/IssueCard/LodgedCard/{CardGuid}"
            .replace("{" + "CardGuid" + "}", localVarApiClient.escapeString(cardGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLodgedCardValidateBeforeCall(String cardGuid, CardUpdateLodgedCardRequest cardUpdateLodgedCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardGuid' is set
        if (cardGuid == null) {
            throw new ApiException("Missing the required parameter 'cardGuid' when calling updateLodgedCard(Async)");
        }

        return updateLodgedCardCall(cardGuid, cardUpdateLodgedCardRequest, _callback);

    }


    private ApiResponse<CardUpdateLodgedCardResponse> updateLodgedCardWithHttpInfo(String cardGuid, CardUpdateLodgedCardRequest cardUpdateLodgedCardRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLodgedCardValidateBeforeCall(cardGuid, cardUpdateLodgedCardRequest, null);
        Type localVarReturnType = new TypeToken<CardUpdateLodgedCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateLodgedCardAsync(String cardGuid, CardUpdateLodgedCardRequest cardUpdateLodgedCardRequest, final ApiCallback<CardUpdateLodgedCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLodgedCardValidateBeforeCall(cardGuid, cardUpdateLodgedCardRequest, _callback);
        Type localVarReturnType = new TypeToken<CardUpdateLodgedCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateLodgedCardRequestBuilder {
        private final String cardGuid;
        private Long usageLimit;
        private Float amountLimit;
        private String limitWindow;
        private String purchaseType;
        private Boolean activated;
        private String associationId;
        private LocalDate terminateDate;

        private UpdateLodgedCardRequestBuilder(String cardGuid) {
            this.cardGuid = cardGuid;
        }

        /**
         * Set usageLimit
         * @param usageLimit Security Control: Maximum number of times the card may be authorized. This is used in conjunction with the Limit Window; for example, if you specify a Usage Limit of 4 and a Limit Window of Monthly, the card can be authorized up to 4 times per month. The maximum allowed field value is 99, and if you do not provide a value the card will be considered unlimited. Authorization attempts exceeding the provided value will be declined. (optional)
         * @return UpdateLodgedCardRequestBuilder
         */
        public UpdateLodgedCardRequestBuilder usageLimit(Long usageLimit) {
            this.usageLimit = usageLimit;
            return this;
        }
        
        /**
         * Set amountLimit
         * @param amountLimit Security Control: Maximum dollar amount the card can be authorized and settled, which must be less than or equal to $1,000,000.00. The value must incorporate any anticipated overages such as currency conversion or taxes that a supplier may associate with the transaction. If a supplier attempts to authorize a card for more than the amount limit it will be declined. (optional)
         * @return UpdateLodgedCardRequestBuilder
         */
        public UpdateLodgedCardRequestBuilder amountLimit(Float amountLimit) {
            this.amountLimit = amountLimit;
            return this;
        }
        
        /**
         * Set limitWindow
         * @param limitWindow This is the time period that both the UsageLimit and the AmountLimit applies. Options are: Day, Week, Month, Lifetime. For example AmountLimit is $500 and LimitWindow is \\\&quot;Week\\\&quot; then the card can be approved for $500 per week. (optional)
         * @return UpdateLodgedCardRequestBuilder
         */
        public UpdateLodgedCardRequestBuilder limitWindow(String limitWindow) {
            this.limitWindow = limitWindow;
            return this;
        }
        
        /**
         * Set purchaseType
         * @param purchaseType Security Control: The industry where the virtual card will be utilized. For example, if value set to airline and the card is used at hotel, it will be declined. Available purchase type values are: &#39;01&#39; (Airline), &#39;02&#39; (Hotels and Resorts), &#39;03&#39; (Car Rental), &#39;04&#39; (Cable, Satellite, Television, and Radio Services),  &#39;05&#39; (Cruise Lines), &#39;11&#39; (Medical Services and Health Practitioners), &#39;21&#39; (Advertising Services), &#39;22&#39; (Misc Advertising and Business Services), &#39;23&#39; (Ticketing), &#39;31&#39; (Insurance Sales, Underwriting, and Premiums), &#39;91&#39; (Restaurants and Food Services), and &#39;93&#39; (Tax Payments). Leave this blank if you plan to utilize MID level controls. (optional)
         * @return UpdateLodgedCardRequestBuilder
         */
        public UpdateLodgedCardRequestBuilder purchaseType(String purchaseType) {
            this.purchaseType = purchaseType;
            return this;
        }
        
        /**
         * Set activated
         * @param activated True activates a lodged card. False suspends a lodged card. (optional)
         * @return UpdateLodgedCardRequestBuilder
         */
        public UpdateLodgedCardRequestBuilder activated(Boolean activated) {
            this.activated = activated;
            return this;
        }
        
        /**
         * Set associationId
         * @param associationId Utilize the Association ID field to tie a lodged card to a sale or sales. For example, if you have several sales and one lodged card payment to a supplier, you can add association ID to the sales and the lodged card for downstream reporting. (optional)
         * @return UpdateLodgedCardRequestBuilder
         */
        public UpdateLodgedCardRequestBuilder associationId(String associationId) {
            this.associationId = associationId;
            return this;
        }
        
        /**
         * Set terminateDate
         * @param terminateDate The TerminateDate (YYYY-MM-DD format) is the date the Lodged Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the Lodged Card is expected to be processed. If a terminate date is not indicated, the card will be inactivated as of the expiration date. Note, Returns can still be processed on terminated Lodged Cards. (optional)
         * @return UpdateLodgedCardRequestBuilder
         */
        public UpdateLodgedCardRequestBuilder terminateDate(LocalDate terminateDate) {
            this.terminateDate = terminateDate;
            return this;
        }
        
        /**
         * Build call for updateLodgedCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CardUpdateLodgedCardRequest cardUpdateLodgedCardRequest = buildBodyParams();
            return updateLodgedCardCall(cardGuid, cardUpdateLodgedCardRequest, _callback);
        }

        private CardUpdateLodgedCardRequest buildBodyParams() {
            CardUpdateLodgedCardRequest cardUpdateLodgedCardRequest = new CardUpdateLodgedCardRequest();
            cardUpdateLodgedCardRequest.usageLimit(this.usageLimit);
            cardUpdateLodgedCardRequest.amountLimit(this.amountLimit);
            cardUpdateLodgedCardRequest.limitWindow(this.limitWindow);
            cardUpdateLodgedCardRequest.purchaseType(this.purchaseType);
            cardUpdateLodgedCardRequest.activated(this.activated);
            cardUpdateLodgedCardRequest.associationId(this.associationId);
            cardUpdateLodgedCardRequest.terminateDate(this.terminateDate);
            return cardUpdateLodgedCardRequest;
        }

        /**
         * Execute updateLodgedCard request
         * @return CardUpdateLodgedCardResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public CardUpdateLodgedCardResponse execute() throws ApiException {
            CardUpdateLodgedCardRequest cardUpdateLodgedCardRequest = buildBodyParams();
            ApiResponse<CardUpdateLodgedCardResponse> localVarResp = updateLodgedCardWithHttpInfo(cardGuid, cardUpdateLodgedCardRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateLodgedCard request with HTTP info returned
         * @return ApiResponse&lt;CardUpdateLodgedCardResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CardUpdateLodgedCardResponse> executeWithHttpInfo() throws ApiException {
            CardUpdateLodgedCardRequest cardUpdateLodgedCardRequest = buildBodyParams();
            return updateLodgedCardWithHttpInfo(cardGuid, cardUpdateLodgedCardRequest);
        }

        /**
         * Execute updateLodgedCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CardUpdateLodgedCardResponse> _callback) throws ApiException {
            CardUpdateLodgedCardRequest cardUpdateLodgedCardRequest = buildBodyParams();
            return updateLodgedCardAsync(cardGuid, cardUpdateLodgedCardRequest, _callback);
        }
    }

    /**
     * Update Lodged Card
     * 
     * @param cardGuid Global Unique Identifier for the Card. (required)
     * @return UpdateLodgedCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLodgedCardRequestBuilder updateLodgedCard(String cardGuid) throws IllegalArgumentException {
        if (cardGuid == null) throw new IllegalArgumentException("\"cardGuid\" is required but got null");
            

        return new UpdateLodgedCardRequestBuilder(cardGuid);
    }
}
