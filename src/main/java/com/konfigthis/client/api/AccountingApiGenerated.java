/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DailyAccountingDetailPaginatedItems;
import com.konfigthis.client.model.DailyAccountingSummary;
import java.time.LocalDate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDailyDetailCall(UUID merchantGuid, LocalDate releasedDate, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Accounting/DailyDetail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (merchantGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantGuid", merchantGuid));
        }

        if (releasedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releasedDate", releasedDate));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyDetailValidateBeforeCall(UUID merchantGuid, LocalDate releasedDate, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantGuid' is set
        if (merchantGuid == null) {
            throw new ApiException("Missing the required parameter 'merchantGuid' when calling getDailyDetail(Async)");
        }

        // verify the required parameter 'releasedDate' is set
        if (releasedDate == null) {
            throw new ApiException("Missing the required parameter 'releasedDate' when calling getDailyDetail(Async)");
        }

        return getDailyDetailCall(merchantGuid, releasedDate, pageNumber, pageSize, _callback);

    }


    private ApiResponse<DailyAccountingDetailPaginatedItems> getDailyDetailWithHttpInfo(UUID merchantGuid, LocalDate releasedDate, Integer pageNumber, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getDailyDetailValidateBeforeCall(merchantGuid, releasedDate, pageNumber, pageSize, null);
        Type localVarReturnType = new TypeToken<DailyAccountingDetailPaginatedItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDailyDetailAsync(UUID merchantGuid, LocalDate releasedDate, Integer pageNumber, Integer pageSize, final ApiCallback<DailyAccountingDetailPaginatedItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailyDetailValidateBeforeCall(merchantGuid, releasedDate, pageNumber, pageSize, _callback);
        Type localVarReturnType = new TypeToken<DailyAccountingDetailPaginatedItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDailyDetailRequestBuilder {
        private final UUID merchantGuid;
        private final LocalDate releasedDate;
        private Integer pageNumber;
        private Integer pageSize;

        private GetDailyDetailRequestBuilder(UUID merchantGuid, LocalDate releasedDate) {
            this.merchantGuid = merchantGuid;
            this.releasedDate = releasedDate;
        }

        /**
         * Set pageNumber
         * @param pageNumber  (optional, default to 1)
         * @return GetDailyDetailRequestBuilder
         */
        public GetDailyDetailRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 10)
         * @return GetDailyDetailRequestBuilder
         */
        public GetDailyDetailRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for getDailyDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved daily accounting detail data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDailyDetailCall(merchantGuid, releasedDate, pageNumber, pageSize, _callback);
        }


        /**
         * Execute getDailyDetail request
         * @return DailyAccountingDetailPaginatedItems
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved daily accounting detail data. </td><td>  -  </td></tr>
         </table>
         */
        public DailyAccountingDetailPaginatedItems execute() throws ApiException {
            ApiResponse<DailyAccountingDetailPaginatedItems> localVarResp = getDailyDetailWithHttpInfo(merchantGuid, releasedDate, pageNumber, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDailyDetail request with HTTP info returned
         * @return ApiResponse&lt;DailyAccountingDetailPaginatedItems&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved daily accounting detail data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DailyAccountingDetailPaginatedItems> executeWithHttpInfo() throws ApiException {
            return getDailyDetailWithHttpInfo(merchantGuid, releasedDate, pageNumber, pageSize);
        }

        /**
         * Execute getDailyDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved daily accounting detail data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DailyAccountingDetailPaginatedItems> _callback) throws ApiException {
            return getDailyDetailAsync(merchantGuid, releasedDate, pageNumber, pageSize, _callback);
        }
    }

    /**
     * Get Daily Accounting Detail
     * This endpoint returns the paginated daily accounting detail items of a client for a given release date.
     * @param merchantGuid The client identifier for the requested transactions. (required)
     * @param releasedDate Date on which the requested transactions were released to the client. (required)
     * @return GetDailyDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved daily accounting detail data. </td><td>  -  </td></tr>
     </table>
     */
    public GetDailyDetailRequestBuilder getDailyDetail(UUID merchantGuid, LocalDate releasedDate) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (releasedDate == null) throw new IllegalArgumentException("\"releasedDate\" is required but got null");
        return new GetDailyDetailRequestBuilder(merchantGuid, releasedDate);
    }
    private okhttp3.Call getDailySummaryCall(UUID merchantGuid, LocalDate releasedDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Accounting/DailySummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (merchantGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantGuid", merchantGuid));
        }

        if (releasedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("releasedDate", releasedDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailySummaryValidateBeforeCall(UUID merchantGuid, LocalDate releasedDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantGuid' is set
        if (merchantGuid == null) {
            throw new ApiException("Missing the required parameter 'merchantGuid' when calling getDailySummary(Async)");
        }

        // verify the required parameter 'releasedDate' is set
        if (releasedDate == null) {
            throw new ApiException("Missing the required parameter 'releasedDate' when calling getDailySummary(Async)");
        }

        return getDailySummaryCall(merchantGuid, releasedDate, _callback);

    }


    private ApiResponse<DailyAccountingSummary> getDailySummaryWithHttpInfo(UUID merchantGuid, LocalDate releasedDate) throws ApiException {
        okhttp3.Call localVarCall = getDailySummaryValidateBeforeCall(merchantGuid, releasedDate, null);
        Type localVarReturnType = new TypeToken<DailyAccountingSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDailySummaryAsync(UUID merchantGuid, LocalDate releasedDate, final ApiCallback<DailyAccountingSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailySummaryValidateBeforeCall(merchantGuid, releasedDate, _callback);
        Type localVarReturnType = new TypeToken<DailyAccountingSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDailySummaryRequestBuilder {
        private final UUID merchantGuid;
        private final LocalDate releasedDate;

        private GetDailySummaryRequestBuilder(UUID merchantGuid, LocalDate releasedDate) {
            this.merchantGuid = merchantGuid;
            this.releasedDate = releasedDate;
        }

        /**
         * Build call for getDailySummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved daily accounting summary data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDailySummaryCall(merchantGuid, releasedDate, _callback);
        }


        /**
         * Execute getDailySummary request
         * @return DailyAccountingSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved daily accounting summary data. </td><td>  -  </td></tr>
         </table>
         */
        public DailyAccountingSummary execute() throws ApiException {
            ApiResponse<DailyAccountingSummary> localVarResp = getDailySummaryWithHttpInfo(merchantGuid, releasedDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDailySummary request with HTTP info returned
         * @return ApiResponse&lt;DailyAccountingSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved daily accounting summary data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DailyAccountingSummary> executeWithHttpInfo() throws ApiException {
            return getDailySummaryWithHttpInfo(merchantGuid, releasedDate);
        }

        /**
         * Execute getDailySummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved daily accounting summary data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DailyAccountingSummary> _callback) throws ApiException {
            return getDailySummaryAsync(merchantGuid, releasedDate, _callback);
        }
    }

    /**
     * Get Daily Accounting Summary
     * This endpoint returns the daily accounting summary of a merchant for a given release date.
     * @param merchantGuid The client identifier for the requested transactions. (required)
     * @param releasedDate Date on which the requested transactions were released to the client. (required)
     * @return GetDailySummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved daily accounting summary data. </td><td>  -  </td></tr>
     </table>
     */
    public GetDailySummaryRequestBuilder getDailySummary(UUID merchantGuid, LocalDate releasedDate) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (releasedDate == null) throw new IllegalArgumentException("\"releasedDate\" is required but got null");
        return new GetDailySummaryRequestBuilder(merchantGuid, releasedDate);
    }
}
