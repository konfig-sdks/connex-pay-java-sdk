/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.TokenGenerateReportingTokenRequest;
import com.konfigthis.client.model.TokenGenerateReportingTokenResponse;
import com.konfigthis.client.model.TokenIssueAuthenticationTokenRequest;
import com.konfigthis.client.model.TokenIssueAuthenticationTokenResponse;
import com.konfigthis.client.model.TokenRequestHppTokenRequest;
import com.konfigthis.client.model.TokenRequestHppTokenRequestSale;
import com.konfigthis.client.model.TokenRequestHppTokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TokenApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TokenApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TokenApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateReportingTokenCall(TokenGenerateReportingTokenRequest tokenGenerateReportingTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenGenerateReportingTokenRequest;

        // create path and map variables
        String localVarPath = "/api/v1/authenticate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateReportingTokenValidateBeforeCall(TokenGenerateReportingTokenRequest tokenGenerateReportingTokenRequest, final ApiCallback _callback) throws ApiException {
        return generateReportingTokenCall(tokenGenerateReportingTokenRequest, _callback);

    }


    private ApiResponse<TokenGenerateReportingTokenResponse> generateReportingTokenWithHttpInfo(TokenGenerateReportingTokenRequest tokenGenerateReportingTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = generateReportingTokenValidateBeforeCall(tokenGenerateReportingTokenRequest, null);
        Type localVarReturnType = new TypeToken<TokenGenerateReportingTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateReportingTokenAsync(TokenGenerateReportingTokenRequest tokenGenerateReportingTokenRequest, final ApiCallback<TokenGenerateReportingTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateReportingTokenValidateBeforeCall(tokenGenerateReportingTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<TokenGenerateReportingTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateReportingTokenRequestBuilder {
        private final String userName;
        private final String password;

        private GenerateReportingTokenRequestBuilder(String userName, String password) {
            this.userName = userName;
            this.password = password;
        }

        /**
         * Build call for generateReportingToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TokenGenerateReportingTokenRequest tokenGenerateReportingTokenRequest = buildBodyParams();
            return generateReportingTokenCall(tokenGenerateReportingTokenRequest, _callback);
        }

        private TokenGenerateReportingTokenRequest buildBodyParams() {
            TokenGenerateReportingTokenRequest tokenGenerateReportingTokenRequest = new TokenGenerateReportingTokenRequest();
            tokenGenerateReportingTokenRequest.userName(this.userName);
            tokenGenerateReportingTokenRequest.password(this.password);
            return tokenGenerateReportingTokenRequest;
        }

        /**
         * Execute generateReportingToken request
         * @return TokenGenerateReportingTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public TokenGenerateReportingTokenResponse execute() throws ApiException {
            TokenGenerateReportingTokenRequest tokenGenerateReportingTokenRequest = buildBodyParams();
            ApiResponse<TokenGenerateReportingTokenResponse> localVarResp = generateReportingTokenWithHttpInfo(tokenGenerateReportingTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateReportingToken request with HTTP info returned
         * @return ApiResponse&lt;TokenGenerateReportingTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenGenerateReportingTokenResponse> executeWithHttpInfo() throws ApiException {
            TokenGenerateReportingTokenRequest tokenGenerateReportingTokenRequest = buildBodyParams();
            return generateReportingTokenWithHttpInfo(tokenGenerateReportingTokenRequest);
        }

        /**
         * Execute generateReportingToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenGenerateReportingTokenResponse> _callback) throws ApiException {
            TokenGenerateReportingTokenRequest tokenGenerateReportingTokenRequest = buildBodyParams();
            return generateReportingTokenAsync(tokenGenerateReportingTokenRequest, _callback);
        }
    }

    /**
     * Reporting Token
     * Reporting API requests require a combination of assigned Bridge user name, Bridge password, and a successfully generated authentication token. The Bridge credentials used are assigned separately from the Purchase and Sales API credentials. The received token for Reporting is valid for 60 minutes from issuance and may be used for all requests during its lifespan.
     * @return GenerateReportingTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GenerateReportingTokenRequestBuilder generateReportingToken(String userName, String password) throws IllegalArgumentException {
        if (userName == null) throw new IllegalArgumentException("\"userName\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new GenerateReportingTokenRequestBuilder(userName, password);
    }
    private okhttp3.Call issueAuthenticationTokenCall(TokenIssueAuthenticationTokenRequest tokenIssueAuthenticationTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenIssueAuthenticationTokenRequest;

        // create path and map variables
        String localVarPath = "/api/v1/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueAuthenticationTokenValidateBeforeCall(TokenIssueAuthenticationTokenRequest tokenIssueAuthenticationTokenRequest, final ApiCallback _callback) throws ApiException {
        return issueAuthenticationTokenCall(tokenIssueAuthenticationTokenRequest, _callback);

    }


    private ApiResponse<TokenIssueAuthenticationTokenResponse> issueAuthenticationTokenWithHttpInfo(TokenIssueAuthenticationTokenRequest tokenIssueAuthenticationTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = issueAuthenticationTokenValidateBeforeCall(tokenIssueAuthenticationTokenRequest, null);
        Type localVarReturnType = new TypeToken<TokenIssueAuthenticationTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call issueAuthenticationTokenAsync(TokenIssueAuthenticationTokenRequest tokenIssueAuthenticationTokenRequest, final ApiCallback<TokenIssueAuthenticationTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueAuthenticationTokenValidateBeforeCall(tokenIssueAuthenticationTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<TokenIssueAuthenticationTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class IssueAuthenticationTokenRequestBuilder {
        private final String grantType;
        private final String username;
        private final String password;

        private IssueAuthenticationTokenRequestBuilder(String grantType, String username, String password) {
            this.grantType = grantType;
            this.username = username;
            this.password = password;
        }

        /**
         * Build call for issueAuthenticationToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TokenIssueAuthenticationTokenRequest tokenIssueAuthenticationTokenRequest = buildBodyParams();
            return issueAuthenticationTokenCall(tokenIssueAuthenticationTokenRequest, _callback);
        }

        private TokenIssueAuthenticationTokenRequest buildBodyParams() {
            TokenIssueAuthenticationTokenRequest tokenIssueAuthenticationTokenRequest = new TokenIssueAuthenticationTokenRequest();
            tokenIssueAuthenticationTokenRequest.grantType(this.grantType);
            tokenIssueAuthenticationTokenRequest.username(this.username);
            tokenIssueAuthenticationTokenRequest.password(this.password);
            return tokenIssueAuthenticationTokenRequest;
        }

        /**
         * Execute issueAuthenticationToken request
         * @return TokenIssueAuthenticationTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public TokenIssueAuthenticationTokenResponse execute() throws ApiException {
            TokenIssueAuthenticationTokenRequest tokenIssueAuthenticationTokenRequest = buildBodyParams();
            ApiResponse<TokenIssueAuthenticationTokenResponse> localVarResp = issueAuthenticationTokenWithHttpInfo(tokenIssueAuthenticationTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute issueAuthenticationToken request with HTTP info returned
         * @return ApiResponse&lt;TokenIssueAuthenticationTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenIssueAuthenticationTokenResponse> executeWithHttpInfo() throws ApiException {
            TokenIssueAuthenticationTokenRequest tokenIssueAuthenticationTokenRequest = buildBodyParams();
            return issueAuthenticationTokenWithHttpInfo(tokenIssueAuthenticationTokenRequest);
        }

        /**
         * Execute issueAuthenticationToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenIssueAuthenticationTokenResponse> _callback) throws ApiException {
            TokenIssueAuthenticationTokenRequest tokenIssueAuthenticationTokenRequest = buildBodyParams();
            return issueAuthenticationTokenAsync(tokenIssueAuthenticationTokenRequest, _callback);
        }
    }

    /**
     * Issuing Token
     * API requests require a combination of assigned user name, password, and successfully generated authentication token. The received token is valid for 24 hours from issuance and may be used for all requests during its lifespan.
     * @return IssueAuthenticationTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public IssueAuthenticationTokenRequestBuilder issueAuthenticationToken(String grantType, String username, String password) throws IllegalArgumentException {
        if (grantType == null) throw new IllegalArgumentException("\"grantType\" is required but got null");
            

        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new IssueAuthenticationTokenRequestBuilder(grantType, username, password);
    }
    private okhttp3.Call requestHppTokenCall(TokenRequestHppTokenRequest tokenRequestHppTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenRequestHppTokenRequest;

        // create path and map variables
        String localVarPath = "/api/v1/HostedPaymentPageRequests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestHppTokenValidateBeforeCall(TokenRequestHppTokenRequest tokenRequestHppTokenRequest, final ApiCallback _callback) throws ApiException {
        return requestHppTokenCall(tokenRequestHppTokenRequest, _callback);

    }


    private ApiResponse<TokenRequestHppTokenResponse> requestHppTokenWithHttpInfo(TokenRequestHppTokenRequest tokenRequestHppTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = requestHppTokenValidateBeforeCall(tokenRequestHppTokenRequest, null);
        Type localVarReturnType = new TypeToken<TokenRequestHppTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestHppTokenAsync(TokenRequestHppTokenRequest tokenRequestHppTokenRequest, final ApiCallback<TokenRequestHppTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestHppTokenValidateBeforeCall(tokenRequestHppTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<TokenRequestHppTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestHppTokenRequestBuilder {
        private final String merchantName;
        private final TokenRequestHppTokenRequestSale sale;
        private String description;
        private String resultRedirectUrl;
        private String logoUrl;
        private List<String> tenderTypeOptions;
        private OffsetDateTime expiration;

        private RequestHppTokenRequestBuilder(String merchantName, TokenRequestHppTokenRequestSale sale) {
            this.merchantName = merchantName;
            this.sale = sale;
        }

        /**
         * Set description
         * @param description Additional information ConnexPay can display in the Hosted Payment Page. The max length is 2048 characters. (optional)
         * @return RequestHppTokenRequestBuilder
         */
        public RequestHppTokenRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set resultRedirectUrl
         * @param resultRedirectUrl This is a ConnexPay CLIENT server route ConnexPay uses to (re)direct the consumer payment result back to our client upon payment success, failure or cancel. If this data is not set, then it will use the default one from ConnexPay. (optional)
         * @return RequestHppTokenRequestBuilder
         */
        public RequestHppTokenRequestBuilder resultRedirectUrl(String resultRedirectUrl) {
            this.resultRedirectUrl = resultRedirectUrl;
            return this;
        }
        
        /**
         * Set logoUrl
         * @param logoUrl ConnexPay can display this instead of “MerchantName” in the payment dialog. (optional)
         * @return RequestHppTokenRequestBuilder
         */
        public RequestHppTokenRequestBuilder logoUrl(String logoUrl) {
            this.logoUrl = logoUrl;
            return this;
        }
        
        /**
         * Set tenderTypeOptions
         * @param tenderTypeOptions Payment types you wish to make available to your consumer when they enter payment information into the Hosted Payment Page. Options are \\\&quot;ACH\\\&quot;, \\\&quot;Credit\\\&quot;, \\\&quot;GooglePay\\\&quot;/ (optional)
         * @return RequestHppTokenRequestBuilder
         */
        public RequestHppTokenRequestBuilder tenderTypeOptions(List<String> tenderTypeOptions) {
            this.tenderTypeOptions = tenderTypeOptions;
            return this;
        }
        
        /**
         * Set expiration
         * @param expiration Client can request a specific expiration date to identify when the HPP Link will expire. Timestamps will be converted to UTC for consistency within the ConnexPay environment. (optional)
         * @return RequestHppTokenRequestBuilder
         */
        public RequestHppTokenRequestBuilder expiration(OffsetDateTime expiration) {
            this.expiration = expiration;
            return this;
        }
        
        /**
         * Build call for requestHppToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TokenRequestHppTokenRequest tokenRequestHppTokenRequest = buildBodyParams();
            return requestHppTokenCall(tokenRequestHppTokenRequest, _callback);
        }

        private TokenRequestHppTokenRequest buildBodyParams() {
            TokenRequestHppTokenRequest tokenRequestHppTokenRequest = new TokenRequestHppTokenRequest();
            tokenRequestHppTokenRequest.merchantName(this.merchantName);
            tokenRequestHppTokenRequest.description(this.description);
            tokenRequestHppTokenRequest.resultRedirectUrl(this.resultRedirectUrl);
            tokenRequestHppTokenRequest.logoUrl(this.logoUrl);
            tokenRequestHppTokenRequest.tenderTypeOptions(this.tenderTypeOptions);
            tokenRequestHppTokenRequest.expiration(this.expiration);
            tokenRequestHppTokenRequest.sale(this.sale);
            return tokenRequestHppTokenRequest;
        }

        /**
         * Execute requestHppToken request
         * @return TokenRequestHppTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public TokenRequestHppTokenResponse execute() throws ApiException {
            TokenRequestHppTokenRequest tokenRequestHppTokenRequest = buildBodyParams();
            ApiResponse<TokenRequestHppTokenResponse> localVarResp = requestHppTokenWithHttpInfo(tokenRequestHppTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestHppToken request with HTTP info returned
         * @return ApiResponse&lt;TokenRequestHppTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenRequestHppTokenResponse> executeWithHttpInfo() throws ApiException {
            TokenRequestHppTokenRequest tokenRequestHppTokenRequest = buildBodyParams();
            return requestHppTokenWithHttpInfo(tokenRequestHppTokenRequest);
        }

        /**
         * Execute requestHppToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenRequestHppTokenResponse> _callback) throws ApiException {
            TokenRequestHppTokenRequest tokenRequestHppTokenRequest = buildBodyParams();
            return requestHppTokenAsync(tokenRequestHppTokenRequest, _callback);
        }
    }

    /**
     * HPP Token Request
     * 
     * @return RequestHppTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public RequestHppTokenRequestBuilder requestHppToken(String merchantName, TokenRequestHppTokenRequestSale sale) throws IllegalArgumentException {
        if (merchantName == null) throw new IllegalArgumentException("\"merchantName\" is required but got null");
            

        if (sale == null) throw new IllegalArgumentException("\"sale\" is required but got null");
        return new RequestHppTokenRequestBuilder(merchantName, sale);
    }
}
