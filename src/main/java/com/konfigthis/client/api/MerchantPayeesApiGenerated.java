/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.MerchantPayeeDto;
import com.konfigthis.client.model.MerchantPayeePaginatedResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.SearchMerchantPayeeDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MerchantPayeesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MerchantPayeesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantPayeesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPayeeCall(UUID merchantGuid, MerchantPayeeDto merchantPayeeDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantPayeeDto;

        // create path and map variables
        String localVarPath = "/api/v1/Merchants/{merchantGuid}/Payees"
            .replace("{" + "merchantGuid" + "}", localVarApiClient.escapeString(merchantGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayeeValidateBeforeCall(UUID merchantGuid, MerchantPayeeDto merchantPayeeDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantGuid' is set
        if (merchantGuid == null) {
            throw new ApiException("Missing the required parameter 'merchantGuid' when calling createPayee(Async)");
        }

        // verify the required parameter 'merchantPayeeDto' is set
        if (merchantPayeeDto == null) {
            throw new ApiException("Missing the required parameter 'merchantPayeeDto' when calling createPayee(Async)");
        }

        return createPayeeCall(merchantGuid, merchantPayeeDto, _callback);

    }


    private ApiResponse<MerchantPayeeDto> createPayeeWithHttpInfo(UUID merchantGuid, MerchantPayeeDto merchantPayeeDto) throws ApiException {
        okhttp3.Call localVarCall = createPayeeValidateBeforeCall(merchantGuid, merchantPayeeDto, null);
        Type localVarReturnType = new TypeToken<MerchantPayeeDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPayeeAsync(UUID merchantGuid, MerchantPayeeDto merchantPayeeDto, final ApiCallback<MerchantPayeeDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayeeValidateBeforeCall(merchantGuid, merchantPayeeDto, _callback);
        Type localVarReturnType = new TypeToken<MerchantPayeeDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePayeeRequestBuilder {
        private final Boolean isBusiness;
        private final String payeeId;
        private final String preferredPayoutMethod;
        private final UUID merchantGuid;
        private Integer idMerchant;
        private String firstName;
        private String lastName;
        private String dbaName;
        private String taxId;
        private String customerId;
        private String email;
        private String address1;
        private String address2;
        private String city;
        private String state;
        private String zip;
        private String country;
        private String preferredCardBrand;
        private String preferredCardClass;
        private String purchaseType;
        private UUID guid;
        private OffsetDateTime timestamp;

        private CreatePayeeRequestBuilder(Boolean isBusiness, String payeeId, String preferredPayoutMethod, UUID merchantGuid) {
            this.isBusiness = isBusiness;
            this.payeeId = payeeId;
            this.preferredPayoutMethod = preferredPayoutMethod;
            this.merchantGuid = merchantGuid;
        }

        /**
         * Set idMerchant
         * @param idMerchant  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder idMerchant(Integer idMerchant) {
            this.idMerchant = idMerchant;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set dbaName
         * @param dbaName  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder dbaName(String dbaName) {
            this.dbaName = dbaName;
            return this;
        }
        
        /**
         * Set taxId
         * @param taxId  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder taxId(String taxId) {
            this.taxId = taxId;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set address1
         * @param address1  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder address1(String address1) {
            this.address1 = address1;
            return this;
        }
        
        /**
         * Set address2
         * @param address2  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder address2(String address2) {
            this.address2 = address2;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set preferredCardBrand
         * @param preferredCardBrand  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder preferredCardBrand(String preferredCardBrand) {
            this.preferredCardBrand = preferredCardBrand;
            return this;
        }
        
        /**
         * Set preferredCardClass
         * @param preferredCardClass  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder preferredCardClass(String preferredCardClass) {
            this.preferredCardClass = preferredCardClass;
            return this;
        }
        
        /**
         * Set purchaseType
         * @param purchaseType  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder purchaseType(String purchaseType) {
            this.purchaseType = purchaseType;
            return this;
        }
        
        /**
         * Set guid
         * @param guid  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder guid(UUID guid) {
            this.guid = guid;
            return this;
        }
        
        /**
         * Set timestamp
         * @param timestamp  (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder timestamp(OffsetDateTime timestamp) {
            this.timestamp = timestamp;
            return this;
        }
        
        /**
         * Build call for createPayee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid ModelState </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A payee with this payeeID already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MerchantPayeeDto merchantPayeeDto = buildBodyParams();
            return createPayeeCall(merchantGuid, merchantPayeeDto, _callback);
        }

        private MerchantPayeeDto buildBodyParams() {
            MerchantPayeeDto merchantPayeeDto = new MerchantPayeeDto();
            merchantPayeeDto.idMerchant(this.idMerchant);
            merchantPayeeDto.isBusiness(this.isBusiness);
            merchantPayeeDto.firstName(this.firstName);
            merchantPayeeDto.lastName(this.lastName);
            merchantPayeeDto.dbaName(this.dbaName);
            merchantPayeeDto.payeeId(this.payeeId);
            merchantPayeeDto.taxId(this.taxId);
            merchantPayeeDto.customerId(this.customerId);
            merchantPayeeDto.email(this.email);
            merchantPayeeDto.address1(this.address1);
            merchantPayeeDto.address2(this.address2);
            merchantPayeeDto.city(this.city);
            merchantPayeeDto.state(this.state);
            merchantPayeeDto.zip(this.zip);
            merchantPayeeDto.country(this.country);
            merchantPayeeDto.preferredPayoutMethod(this.preferredPayoutMethod);
            merchantPayeeDto.preferredCardBrand(this.preferredCardBrand);
            merchantPayeeDto.preferredCardClass(this.preferredCardClass);
            merchantPayeeDto.purchaseType(this.purchaseType);
            merchantPayeeDto.guid(this.guid);
            merchantPayeeDto.timestamp(this.timestamp);
            return merchantPayeeDto;
        }

        /**
         * Execute createPayee request
         * @return MerchantPayeeDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid ModelState </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A payee with this payeeID already exists </td><td>  -  </td></tr>
         </table>
         */
        public MerchantPayeeDto execute() throws ApiException {
            MerchantPayeeDto merchantPayeeDto = buildBodyParams();
            ApiResponse<MerchantPayeeDto> localVarResp = createPayeeWithHttpInfo(merchantGuid, merchantPayeeDto);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPayee request with HTTP info returned
         * @return ApiResponse&lt;MerchantPayeeDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid ModelState </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A payee with this payeeID already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MerchantPayeeDto> executeWithHttpInfo() throws ApiException {
            MerchantPayeeDto merchantPayeeDto = buildBodyParams();
            return createPayeeWithHttpInfo(merchantGuid, merchantPayeeDto);
        }

        /**
         * Execute createPayee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid ModelState </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A payee with this payeeID already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MerchantPayeeDto> _callback) throws ApiException {
            MerchantPayeeDto merchantPayeeDto = buildBodyParams();
            return createPayeeAsync(merchantGuid, merchantPayeeDto, _callback);
        }
    }

    /**
     * Create merchant payee
     * Create a payee for a merchant
     * @param merchantGuid The merchant guid (required)
     * @param merchantPayeeDto The merchant payee dto (required)
     * @return CreatePayeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ModelState </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A payee with this payeeID already exists </td><td>  -  </td></tr>
     </table>
     */
    public CreatePayeeRequestBuilder createPayee(Boolean isBusiness, String payeeId, String preferredPayoutMethod, UUID merchantGuid) throws IllegalArgumentException {
        if (isBusiness == null) throw new IllegalArgumentException("\"isBusiness\" is required but got null");
        if (payeeId == null) throw new IllegalArgumentException("\"payeeId\" is required but got null");
            if (payeeId != null && payeeId.length() < 0) {
              throw new IllegalArgumentException("Invalid value for payeeId. Length must be greater than or equal to 0.");
            }

        if (preferredPayoutMethod == null) throw new IllegalArgumentException("\"preferredPayoutMethod\" is required but got null");
            

        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        return new CreatePayeeRequestBuilder(isBusiness, payeeId, preferredPayoutMethod, merchantGuid);
    }
    private okhttp3.Call deletePayeeCall(UUID merchantGuid, UUID payeeGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Merchants/{merchantGuid}/Payees/{payeeGuid}"
            .replace("{" + "merchantGuid" + "}", localVarApiClient.escapeString(merchantGuid.toString()))
            .replace("{" + "payeeGuid" + "}", localVarApiClient.escapeString(payeeGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayeeValidateBeforeCall(UUID merchantGuid, UUID payeeGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantGuid' is set
        if (merchantGuid == null) {
            throw new ApiException("Missing the required parameter 'merchantGuid' when calling deletePayee(Async)");
        }

        // verify the required parameter 'payeeGuid' is set
        if (payeeGuid == null) {
            throw new ApiException("Missing the required parameter 'payeeGuid' when calling deletePayee(Async)");
        }

        return deletePayeeCall(merchantGuid, payeeGuid, _callback);

    }


    private ApiResponse<Void> deletePayeeWithHttpInfo(UUID merchantGuid, UUID payeeGuid) throws ApiException {
        okhttp3.Call localVarCall = deletePayeeValidateBeforeCall(merchantGuid, payeeGuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePayeeAsync(UUID merchantGuid, UUID payeeGuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayeeValidateBeforeCall(merchantGuid, payeeGuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePayeeRequestBuilder {
        private final UUID merchantGuid;
        private final UUID payeeGuid;

        private DeletePayeeRequestBuilder(UUID merchantGuid, UUID payeeGuid) {
            this.merchantGuid = merchantGuid;
            this.payeeGuid = payeeGuid;
        }

        /**
         * Build call for deletePayee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Merchant Found </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePayeeCall(merchantGuid, payeeGuid, _callback);
        }


        /**
         * Execute deletePayee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Merchant Found </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePayeeWithHttpInfo(merchantGuid, payeeGuid);
        }

        /**
         * Execute deletePayee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Merchant Found </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePayeeWithHttpInfo(merchantGuid, payeeGuid);
        }

        /**
         * Execute deletePayee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Merchant Found </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePayeeAsync(merchantGuid, payeeGuid, _callback);
        }
    }

    /**
     * Delete merchant payee
     * Delete a payee for a merchant by guid
     * @param merchantGuid The merchant guid (required)
     * @param payeeGuid The payee guid (required)
     * @return DeletePayeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Merchant Found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
     </table>
     */
    public DeletePayeeRequestBuilder deletePayee(UUID merchantGuid, UUID payeeGuid) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (payeeGuid == null) throw new IllegalArgumentException("\"payeeGuid\" is required but got null");
            

        return new DeletePayeeRequestBuilder(merchantGuid, payeeGuid);
    }
    private okhttp3.Call getPayeeCall(UUID merchantGuid, UUID payeeGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Merchants/{merchantGuid}/Payees/{payeeGuid}"
            .replace("{" + "merchantGuid" + "}", localVarApiClient.escapeString(merchantGuid.toString()))
            .replace("{" + "payeeGuid" + "}", localVarApiClient.escapeString(payeeGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayeeValidateBeforeCall(UUID merchantGuid, UUID payeeGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantGuid' is set
        if (merchantGuid == null) {
            throw new ApiException("Missing the required parameter 'merchantGuid' when calling getPayee(Async)");
        }

        // verify the required parameter 'payeeGuid' is set
        if (payeeGuid == null) {
            throw new ApiException("Missing the required parameter 'payeeGuid' when calling getPayee(Async)");
        }

        return getPayeeCall(merchantGuid, payeeGuid, _callback);

    }


    private ApiResponse<MerchantPayeeDto> getPayeeWithHttpInfo(UUID merchantGuid, UUID payeeGuid) throws ApiException {
        okhttp3.Call localVarCall = getPayeeValidateBeforeCall(merchantGuid, payeeGuid, null);
        Type localVarReturnType = new TypeToken<MerchantPayeeDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayeeAsync(UUID merchantGuid, UUID payeeGuid, final ApiCallback<MerchantPayeeDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayeeValidateBeforeCall(merchantGuid, payeeGuid, _callback);
        Type localVarReturnType = new TypeToken<MerchantPayeeDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayeeRequestBuilder {
        private final UUID merchantGuid;
        private final UUID payeeGuid;

        private GetPayeeRequestBuilder(UUID merchantGuid, UUID payeeGuid) {
            this.merchantGuid = merchantGuid;
            this.payeeGuid = payeeGuid;
        }

        /**
         * Build call for getPayee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> No MerchantPayee found </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayeeCall(merchantGuid, payeeGuid, _callback);
        }


        /**
         * Execute getPayee request
         * @return MerchantPayeeDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> No MerchantPayee found </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public MerchantPayeeDto execute() throws ApiException {
            ApiResponse<MerchantPayeeDto> localVarResp = getPayeeWithHttpInfo(merchantGuid, payeeGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayee request with HTTP info returned
         * @return ApiResponse&lt;MerchantPayeeDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> No MerchantPayee found </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MerchantPayeeDto> executeWithHttpInfo() throws ApiException {
            return getPayeeWithHttpInfo(merchantGuid, payeeGuid);
        }

        /**
         * Execute getPayee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> No MerchantPayee found </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MerchantPayeeDto> _callback) throws ApiException {
            return getPayeeAsync(merchantGuid, payeeGuid, _callback);
        }
    }

    /**
     * Get a merchant payee by guid
     * Get a payee for a merchant by guid
     * @param merchantGuid The merchant guid (required)
     * @param payeeGuid The payee guid (required)
     * @return GetPayeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No MerchantPayee found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
     </table>
     */
    public GetPayeeRequestBuilder getPayee(UUID merchantGuid, UUID payeeGuid) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (payeeGuid == null) throw new IllegalArgumentException("\"payeeGuid\" is required but got null");
            

        return new GetPayeeRequestBuilder(merchantGuid, payeeGuid);
    }
    private okhttp3.Call getPayeesCall(UUID merchantGuid, Integer page, Integer pagesize, SearchMerchantPayeeDto searchMerchantPayeeDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchMerchantPayeeDto;

        // create path and map variables
        String localVarPath = "/api/v1/Merchants/{merchantGuid}/Payees/Search/{page}/{pagesize}"
            .replace("{" + "merchantGuid" + "}", localVarApiClient.escapeString(merchantGuid.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "pagesize" + "}", localVarApiClient.escapeString(pagesize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayeesValidateBeforeCall(UUID merchantGuid, Integer page, Integer pagesize, SearchMerchantPayeeDto searchMerchantPayeeDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantGuid' is set
        if (merchantGuid == null) {
            throw new ApiException("Missing the required parameter 'merchantGuid' when calling getPayees(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getPayees(Async)");
        }

        // verify the required parameter 'pagesize' is set
        if (pagesize == null) {
            throw new ApiException("Missing the required parameter 'pagesize' when calling getPayees(Async)");
        }

        // verify the required parameter 'searchMerchantPayeeDto' is set
        if (searchMerchantPayeeDto == null) {
            throw new ApiException("Missing the required parameter 'searchMerchantPayeeDto' when calling getPayees(Async)");
        }

        return getPayeesCall(merchantGuid, page, pagesize, searchMerchantPayeeDto, _callback);

    }


    private ApiResponse<MerchantPayeePaginatedResponse> getPayeesWithHttpInfo(UUID merchantGuid, Integer page, Integer pagesize, SearchMerchantPayeeDto searchMerchantPayeeDto) throws ApiException {
        okhttp3.Call localVarCall = getPayeesValidateBeforeCall(merchantGuid, page, pagesize, searchMerchantPayeeDto, null);
        Type localVarReturnType = new TypeToken<MerchantPayeePaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayeesAsync(UUID merchantGuid, Integer page, Integer pagesize, SearchMerchantPayeeDto searchMerchantPayeeDto, final ApiCallback<MerchantPayeePaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayeesValidateBeforeCall(merchantGuid, page, pagesize, searchMerchantPayeeDto, _callback);
        Type localVarReturnType = new TypeToken<MerchantPayeePaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayeesRequestBuilder {
        private final UUID merchantGuid;
        private final Integer page;
        private final Integer pagesize;
        private String searchTerm;

        private GetPayeesRequestBuilder(UUID merchantGuid, Integer page, Integer pagesize) {
            this.merchantGuid = merchantGuid;
            this.page = page;
            this.pagesize = pagesize;
        }

        /**
         * Set searchTerm
         * @param searchTerm  (optional)
         * @return GetPayeesRequestBuilder
         */
        public GetPayeesRequestBuilder searchTerm(String searchTerm) {
            this.searchTerm = searchTerm;
            return this;
        }
        
        /**
         * Build call for getPayees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SearchMerchantPayeeDto searchMerchantPayeeDto = buildBodyParams();
            return getPayeesCall(merchantGuid, page, pagesize, searchMerchantPayeeDto, _callback);
        }

        private SearchMerchantPayeeDto buildBodyParams() {
            SearchMerchantPayeeDto searchMerchantPayeeDto = new SearchMerchantPayeeDto();
            searchMerchantPayeeDto.searchTerm(this.searchTerm);
            return searchMerchantPayeeDto;
        }

        /**
         * Execute getPayees request
         * @return MerchantPayeePaginatedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public MerchantPayeePaginatedResponse execute() throws ApiException {
            SearchMerchantPayeeDto searchMerchantPayeeDto = buildBodyParams();
            ApiResponse<MerchantPayeePaginatedResponse> localVarResp = getPayeesWithHttpInfo(merchantGuid, page, pagesize, searchMerchantPayeeDto);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayees request with HTTP info returned
         * @return ApiResponse&lt;MerchantPayeePaginatedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MerchantPayeePaginatedResponse> executeWithHttpInfo() throws ApiException {
            SearchMerchantPayeeDto searchMerchantPayeeDto = buildBodyParams();
            return getPayeesWithHttpInfo(merchantGuid, page, pagesize, searchMerchantPayeeDto);
        }

        /**
         * Execute getPayees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MerchantPayeePaginatedResponse> _callback) throws ApiException {
            SearchMerchantPayeeDto searchMerchantPayeeDto = buildBodyParams();
            return getPayeesAsync(merchantGuid, page, pagesize, searchMerchantPayeeDto, _callback);
        }
    }

    /**
     * Get merchant payees
     * Get a list of payees for a merchant
     * @param merchantGuid The merchant guid (required)
     * @param page The page number (required)
     * @param pagesize The number of records to return per page (required)
     * @param searchMerchantPayeeDto A payload of search/filter parameters (required)
     * @return GetPayeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
     </table>
     */
    public GetPayeesRequestBuilder getPayees(UUID merchantGuid, Integer page, Integer pagesize) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        if (pagesize == null) throw new IllegalArgumentException("\"pagesize\" is required but got null");
        return new GetPayeesRequestBuilder(merchantGuid, page, pagesize);
    }
    private okhttp3.Call updatePayeeCall(UUID merchantGuid, UUID payeeGuid, MerchantPayeeDto merchantPayeeDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantPayeeDto;

        // create path and map variables
        String localVarPath = "/api/v1/Merchants/{merchantGuid}/Payees/{payeeGuid}"
            .replace("{" + "merchantGuid" + "}", localVarApiClient.escapeString(merchantGuid.toString()))
            .replace("{" + "payeeGuid" + "}", localVarApiClient.escapeString(payeeGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayeeValidateBeforeCall(UUID merchantGuid, UUID payeeGuid, MerchantPayeeDto merchantPayeeDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantGuid' is set
        if (merchantGuid == null) {
            throw new ApiException("Missing the required parameter 'merchantGuid' when calling updatePayee(Async)");
        }

        // verify the required parameter 'payeeGuid' is set
        if (payeeGuid == null) {
            throw new ApiException("Missing the required parameter 'payeeGuid' when calling updatePayee(Async)");
        }

        // verify the required parameter 'merchantPayeeDto' is set
        if (merchantPayeeDto == null) {
            throw new ApiException("Missing the required parameter 'merchantPayeeDto' when calling updatePayee(Async)");
        }

        return updatePayeeCall(merchantGuid, payeeGuid, merchantPayeeDto, _callback);

    }


    private ApiResponse<Void> updatePayeeWithHttpInfo(UUID merchantGuid, UUID payeeGuid, MerchantPayeeDto merchantPayeeDto) throws ApiException {
        okhttp3.Call localVarCall = updatePayeeValidateBeforeCall(merchantGuid, payeeGuid, merchantPayeeDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePayeeAsync(UUID merchantGuid, UUID payeeGuid, MerchantPayeeDto merchantPayeeDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayeeValidateBeforeCall(merchantGuid, payeeGuid, merchantPayeeDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePayeeRequestBuilder {
        private final Boolean isBusiness;
        private final String payeeId;
        private final String preferredPayoutMethod;
        private final UUID merchantGuid;
        private final UUID payeeGuid;
        private Integer idMerchant;
        private String firstName;
        private String lastName;
        private String dbaName;
        private String taxId;
        private String customerId;
        private String email;
        private String address1;
        private String address2;
        private String city;
        private String state;
        private String zip;
        private String country;
        private String preferredCardBrand;
        private String preferredCardClass;
        private String purchaseType;
        private UUID guid;
        private OffsetDateTime timestamp;

        private UpdatePayeeRequestBuilder(Boolean isBusiness, String payeeId, String preferredPayoutMethod, UUID merchantGuid, UUID payeeGuid) {
            this.isBusiness = isBusiness;
            this.payeeId = payeeId;
            this.preferredPayoutMethod = preferredPayoutMethod;
            this.merchantGuid = merchantGuid;
            this.payeeGuid = payeeGuid;
        }

        /**
         * Set idMerchant
         * @param idMerchant  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder idMerchant(Integer idMerchant) {
            this.idMerchant = idMerchant;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set dbaName
         * @param dbaName  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder dbaName(String dbaName) {
            this.dbaName = dbaName;
            return this;
        }
        
        /**
         * Set taxId
         * @param taxId  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder taxId(String taxId) {
            this.taxId = taxId;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set address1
         * @param address1  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder address1(String address1) {
            this.address1 = address1;
            return this;
        }
        
        /**
         * Set address2
         * @param address2  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder address2(String address2) {
            this.address2 = address2;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zip
         * @param zip  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set preferredCardBrand
         * @param preferredCardBrand  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder preferredCardBrand(String preferredCardBrand) {
            this.preferredCardBrand = preferredCardBrand;
            return this;
        }
        
        /**
         * Set preferredCardClass
         * @param preferredCardClass  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder preferredCardClass(String preferredCardClass) {
            this.preferredCardClass = preferredCardClass;
            return this;
        }
        
        /**
         * Set purchaseType
         * @param purchaseType  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder purchaseType(String purchaseType) {
            this.purchaseType = purchaseType;
            return this;
        }
        
        /**
         * Set guid
         * @param guid  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder guid(UUID guid) {
            this.guid = guid;
            return this;
        }
        
        /**
         * Set timestamp
         * @param timestamp  (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder timestamp(OffsetDateTime timestamp) {
            this.timestamp = timestamp;
            return this;
        }
        
        /**
         * Build call for updatePayee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A payee with this payeeID already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MerchantPayeeDto merchantPayeeDto = buildBodyParams();
            return updatePayeeCall(merchantGuid, payeeGuid, merchantPayeeDto, _callback);
        }

        private MerchantPayeeDto buildBodyParams() {
            MerchantPayeeDto merchantPayeeDto = new MerchantPayeeDto();
            merchantPayeeDto.idMerchant(this.idMerchant);
            merchantPayeeDto.isBusiness(this.isBusiness);
            merchantPayeeDto.firstName(this.firstName);
            merchantPayeeDto.lastName(this.lastName);
            merchantPayeeDto.dbaName(this.dbaName);
            merchantPayeeDto.payeeId(this.payeeId);
            merchantPayeeDto.taxId(this.taxId);
            merchantPayeeDto.customerId(this.customerId);
            merchantPayeeDto.email(this.email);
            merchantPayeeDto.address1(this.address1);
            merchantPayeeDto.address2(this.address2);
            merchantPayeeDto.city(this.city);
            merchantPayeeDto.state(this.state);
            merchantPayeeDto.zip(this.zip);
            merchantPayeeDto.country(this.country);
            merchantPayeeDto.preferredPayoutMethod(this.preferredPayoutMethod);
            merchantPayeeDto.preferredCardBrand(this.preferredCardBrand);
            merchantPayeeDto.preferredCardClass(this.preferredCardClass);
            merchantPayeeDto.purchaseType(this.purchaseType);
            merchantPayeeDto.guid(this.guid);
            merchantPayeeDto.timestamp(this.timestamp);
            return merchantPayeeDto;
        }

        /**
         * Execute updatePayee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A payee with this payeeID already exists </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            MerchantPayeeDto merchantPayeeDto = buildBodyParams();
            updatePayeeWithHttpInfo(merchantGuid, payeeGuid, merchantPayeeDto);
        }

        /**
         * Execute updatePayee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A payee with this payeeID already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            MerchantPayeeDto merchantPayeeDto = buildBodyParams();
            return updatePayeeWithHttpInfo(merchantGuid, payeeGuid, merchantPayeeDto);
        }

        /**
         * Execute updatePayee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A payee with this payeeID already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            MerchantPayeeDto merchantPayeeDto = buildBodyParams();
            return updatePayeeAsync(merchantGuid, payeeGuid, merchantPayeeDto, _callback);
        }
    }

    /**
     * Update merchant payee
     * Update a payee for a merchant by guid
     * @param merchantGuid The merchant guid (required)
     * @param payeeGuid The payee guid (required)
     * @param merchantPayeeDto The merchant payee dto (required)
     * @return UpdatePayeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User does not have access to merchant. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A payee with this payeeID already exists </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePayeeRequestBuilder updatePayee(Boolean isBusiness, String payeeId, String preferredPayoutMethod, UUID merchantGuid, UUID payeeGuid) throws IllegalArgumentException {
        if (isBusiness == null) throw new IllegalArgumentException("\"isBusiness\" is required but got null");
        if (payeeId == null) throw new IllegalArgumentException("\"payeeId\" is required but got null");
            if (payeeId != null && payeeId.length() < 0) {
              throw new IllegalArgumentException("Invalid value for payeeId. Length must be greater than or equal to 0.");
            }

        if (preferredPayoutMethod == null) throw new IllegalArgumentException("\"preferredPayoutMethod\" is required but got null");
            

        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (payeeGuid == null) throw new IllegalArgumentException("\"payeeGuid\" is required but got null");
            

        return new UpdatePayeeRequestBuilder(isBusiness, payeeId, preferredPayoutMethod, merchantGuid, payeeGuid);
    }
}
