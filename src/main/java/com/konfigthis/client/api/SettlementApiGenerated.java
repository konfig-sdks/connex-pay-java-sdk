/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.SettlementSearchVirtualCardSettlementsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SettlementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SettlementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SettlementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call searchVirtualCardSettlementsCall(Integer pageNumber, Integer pageSize, SettlementSearchVirtualCardSettlementsRequest settlementSearchVirtualCardSettlementsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = settlementSearchVirtualCardSettlementsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/Search/Settlements"
            .replace("{" + "PageNumber" + "}", localVarApiClient.escapeString(pageNumber.toString()))
            .replace("{" + "PageSize" + "}", localVarApiClient.escapeString(pageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVirtualCardSettlementsValidateBeforeCall(Integer pageNumber, Integer pageSize, SettlementSearchVirtualCardSettlementsRequest settlementSearchVirtualCardSettlementsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling searchVirtualCardSettlements(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling searchVirtualCardSettlements(Async)");
        }

        return searchVirtualCardSettlementsCall(pageNumber, pageSize, settlementSearchVirtualCardSettlementsRequest, _callback);

    }


    private ApiResponse<Object> searchVirtualCardSettlementsWithHttpInfo(Integer pageNumber, Integer pageSize, SettlementSearchVirtualCardSettlementsRequest settlementSearchVirtualCardSettlementsRequest) throws ApiException {
        okhttp3.Call localVarCall = searchVirtualCardSettlementsValidateBeforeCall(pageNumber, pageSize, settlementSearchVirtualCardSettlementsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchVirtualCardSettlementsAsync(Integer pageNumber, Integer pageSize, SettlementSearchVirtualCardSettlementsRequest settlementSearchVirtualCardSettlementsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVirtualCardSettlementsValidateBeforeCall(pageNumber, pageSize, settlementSearchVirtualCardSettlementsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchVirtualCardSettlementsRequestBuilder {
        private final String merchantGuid;
        private final Integer pageNumber;
        private final Integer pageSize;
        private LocalDate dateFrom;
        private LocalDate dateTo;
        private LocalDate postedDateFrom;
        private LocalDate postedDateTo;
        private String orderNumber;
        private Long issuedAmountFrom;
        private Long issuedAmountTo;
        private String issuedCardLastFour;
        private Float postedAmountFrom;
        private Float postedAmountTo;
        private LocalDate expirationDateFrom;
        private LocalDate expirationDateTo;

        private SearchVirtualCardSettlementsRequestBuilder(String merchantGuid, Integer pageNumber, Integer pageSize) {
            this.merchantGuid = merchantGuid;
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Set dateFrom
         * @param dateFrom Card&#39;s Issued Date. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder dateFrom(LocalDate dateFrom) {
            this.dateFrom = dateFrom;
            return this;
        }
        
        /**
         * Set dateTo
         * @param dateTo Card&#39;s Issued Date. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder dateTo(LocalDate dateTo) {
            this.dateTo = dateTo;
            return this;
        }
        
        /**
         * Set postedDateFrom
         * @param postedDateFrom Card settlement post date. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder postedDateFrom(LocalDate postedDateFrom) {
            this.postedDateFrom = postedDateFrom;
            return this;
        }
        
        /**
         * Set postedDateTo
         * @param postedDateTo Card settlement post date. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder postedDateTo(LocalDate postedDateTo) {
            this.postedDateTo = postedDateTo;
            return this;
        }
        
        /**
         * Set orderNumber
         * @param orderNumber Order Number. Max. Length &#x3D; 50. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder orderNumber(String orderNumber) {
            this.orderNumber = orderNumber;
            return this;
        }
        
        /**
         * Set issuedAmountFrom
         * @param issuedAmountFrom Issued Amount of the Card. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder issuedAmountFrom(Long issuedAmountFrom) {
            this.issuedAmountFrom = issuedAmountFrom;
            return this;
        }
        
        /**
         * Set issuedAmountTo
         * @param issuedAmountTo Issued Amount of the Card. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder issuedAmountTo(Long issuedAmountTo) {
            this.issuedAmountTo = issuedAmountTo;
            return this;
        }
        
        /**
         * Set issuedCardLastFour
         * @param issuedCardLastFour Card last four number. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder issuedCardLastFour(String issuedCardLastFour) {
            this.issuedCardLastFour = issuedCardLastFour;
            return this;
        }
        
        /**
         * Set postedAmountFrom
         * @param postedAmountFrom Posted Amount of the Card. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder postedAmountFrom(Float postedAmountFrom) {
            this.postedAmountFrom = postedAmountFrom;
            return this;
        }
        
        /**
         * Set postedAmountTo
         * @param postedAmountTo Posted Amount of the Card. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder postedAmountTo(Float postedAmountTo) {
            this.postedAmountTo = postedAmountTo;
            return this;
        }
        
        /**
         * Set expirationDateFrom
         * @param expirationDateFrom Card&#39;s expiration date. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder expirationDateFrom(LocalDate expirationDateFrom) {
            this.expirationDateFrom = expirationDateFrom;
            return this;
        }
        
        /**
         * Set expirationDateTo
         * @param expirationDateTo Card&#39;s expiration date. (optional)
         * @return SearchVirtualCardSettlementsRequestBuilder
         */
        public SearchVirtualCardSettlementsRequestBuilder expirationDateTo(LocalDate expirationDateTo) {
            this.expirationDateTo = expirationDateTo;
            return this;
        }
        
        /**
         * Build call for searchVirtualCardSettlements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SettlementSearchVirtualCardSettlementsRequest settlementSearchVirtualCardSettlementsRequest = buildBodyParams();
            return searchVirtualCardSettlementsCall(pageNumber, pageSize, settlementSearchVirtualCardSettlementsRequest, _callback);
        }

        private SettlementSearchVirtualCardSettlementsRequest buildBodyParams() {
            SettlementSearchVirtualCardSettlementsRequest settlementSearchVirtualCardSettlementsRequest = new SettlementSearchVirtualCardSettlementsRequest();
            settlementSearchVirtualCardSettlementsRequest.merchantGuid(this.merchantGuid);
            settlementSearchVirtualCardSettlementsRequest.dateFrom(this.dateFrom);
            settlementSearchVirtualCardSettlementsRequest.dateTo(this.dateTo);
            settlementSearchVirtualCardSettlementsRequest.postedDateFrom(this.postedDateFrom);
            settlementSearchVirtualCardSettlementsRequest.postedDateTo(this.postedDateTo);
            settlementSearchVirtualCardSettlementsRequest.orderNumber(this.orderNumber);
            settlementSearchVirtualCardSettlementsRequest.issuedAmountFrom(this.issuedAmountFrom);
            settlementSearchVirtualCardSettlementsRequest.issuedAmountTo(this.issuedAmountTo);
            settlementSearchVirtualCardSettlementsRequest.issuedCardLastFour(this.issuedCardLastFour);
            settlementSearchVirtualCardSettlementsRequest.postedAmountFrom(this.postedAmountFrom);
            settlementSearchVirtualCardSettlementsRequest.postedAmountTo(this.postedAmountTo);
            settlementSearchVirtualCardSettlementsRequest.expirationDateFrom(this.expirationDateFrom);
            settlementSearchVirtualCardSettlementsRequest.expirationDateTo(this.expirationDateTo);
            return settlementSearchVirtualCardSettlementsRequest;
        }

        /**
         * Execute searchVirtualCardSettlements request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SettlementSearchVirtualCardSettlementsRequest settlementSearchVirtualCardSettlementsRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = searchVirtualCardSettlementsWithHttpInfo(pageNumber, pageSize, settlementSearchVirtualCardSettlementsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchVirtualCardSettlements request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SettlementSearchVirtualCardSettlementsRequest settlementSearchVirtualCardSettlementsRequest = buildBodyParams();
            return searchVirtualCardSettlementsWithHttpInfo(pageNumber, pageSize, settlementSearchVirtualCardSettlementsRequest);
        }

        /**
         * Execute searchVirtualCardSettlements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SettlementSearchVirtualCardSettlementsRequest settlementSearchVirtualCardSettlementsRequest = buildBodyParams();
            return searchVirtualCardSettlementsAsync(pageNumber, pageSize, settlementSearchVirtualCardSettlementsRequest, _callback);
        }
    }

    /**
     * Search Settlements
     * This endpoint searches for Virtual Card Settlements.
     * @param pageNumber Number of pages of results to return. Default is 1. (required)
     * @param pageSize Size of each page of results. Default is 1000. (required)
     * @return SearchVirtualCardSettlementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SearchVirtualCardSettlementsRequestBuilder searchVirtualCardSettlements(String merchantGuid, Integer pageNumber, Integer pageSize) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
        return new SearchVirtualCardSettlementsRequestBuilder(merchantGuid, pageNumber, pageSize);
    }
}
