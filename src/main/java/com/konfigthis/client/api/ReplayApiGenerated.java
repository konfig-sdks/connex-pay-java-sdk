/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.ReplayPurchaseEventHistoryResendRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReplayApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplayApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReplayApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call purchaseEventHistoryResendCall(ReplayPurchaseEventHistoryResendRequest replayPurchaseEventHistoryResendRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replayPurchaseEventHistoryResendRequest;

        // create path and map variables
        String localVarPath = "/api/v1/PurchaseEventHistory/Resend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseEventHistoryResendValidateBeforeCall(ReplayPurchaseEventHistoryResendRequest replayPurchaseEventHistoryResendRequest, final ApiCallback _callback) throws ApiException {
        return purchaseEventHistoryResendCall(replayPurchaseEventHistoryResendRequest, _callback);

    }


    private ApiResponse<String> purchaseEventHistoryResendWithHttpInfo(ReplayPurchaseEventHistoryResendRequest replayPurchaseEventHistoryResendRequest) throws ApiException {
        okhttp3.Call localVarCall = purchaseEventHistoryResendValidateBeforeCall(replayPurchaseEventHistoryResendRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call purchaseEventHistoryResendAsync(ReplayPurchaseEventHistoryResendRequest replayPurchaseEventHistoryResendRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseEventHistoryResendValidateBeforeCall(replayPurchaseEventHistoryResendRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PurchaseEventHistoryResendRequestBuilder {
        private String sourceGuid;
        private String merchantGuid;
        private String eventGuid;
        private LocalDate fromDateTime;
        private LocalDate toDateTime;

        private PurchaseEventHistoryResendRequestBuilder() {
        }

        /**
         * Set sourceGuid
         * @param sourceGuid The unique GUID for a particular purchase.  This would be the Guid returned on your virtual card, lodged card, physical card or ACH issue call. (optional)
         * @return PurchaseEventHistoryResendRequestBuilder
         */
        public PurchaseEventHistoryResendRequestBuilder sourceGuid(String sourceGuid) {
            this.sourceGuid = sourceGuid;
            return this;
        }
        
        /**
         * Set merchantGuid
         * @param merchantGuid Include your Merchant Guid instead of the Source Guid if you want to see all events for a given date range (you must also include the date range parameters) (optional)
         * @return PurchaseEventHistoryResendRequestBuilder
         */
        public PurchaseEventHistoryResendRequestBuilder merchantGuid(String merchantGuid) {
            this.merchantGuid = merchantGuid;
            return this;
        }
        
        /**
         * Set eventGuid
         * @param eventGuid Transaction ID as displayed in Bridge (optional)
         * @return PurchaseEventHistoryResendRequestBuilder
         */
        public PurchaseEventHistoryResendRequestBuilder eventGuid(String eventGuid) {
            this.eventGuid = eventGuid;
            return this;
        }
        
        /**
         * Set fromDateTime
         * @param fromDateTime From date (optional)
         * @return PurchaseEventHistoryResendRequestBuilder
         */
        public PurchaseEventHistoryResendRequestBuilder fromDateTime(LocalDate fromDateTime) {
            this.fromDateTime = fromDateTime;
            return this;
        }
        
        /**
         * Set toDateTime
         * @param toDateTime To date (optional)
         * @return PurchaseEventHistoryResendRequestBuilder
         */
        public PurchaseEventHistoryResendRequestBuilder toDateTime(LocalDate toDateTime) {
            this.toDateTime = toDateTime;
            return this;
        }
        
        /**
         * Build call for purchaseEventHistoryResend
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReplayPurchaseEventHistoryResendRequest replayPurchaseEventHistoryResendRequest = buildBodyParams();
            return purchaseEventHistoryResendCall(replayPurchaseEventHistoryResendRequest, _callback);
        }

        private ReplayPurchaseEventHistoryResendRequest buildBodyParams() {
            ReplayPurchaseEventHistoryResendRequest replayPurchaseEventHistoryResendRequest = new ReplayPurchaseEventHistoryResendRequest();
            replayPurchaseEventHistoryResendRequest.sourceGuid(this.sourceGuid);
            replayPurchaseEventHistoryResendRequest.merchantGuid(this.merchantGuid);
            replayPurchaseEventHistoryResendRequest.eventGuid(this.eventGuid);
            replayPurchaseEventHistoryResendRequest.fromDateTime(this.fromDateTime);
            replayPurchaseEventHistoryResendRequest.toDateTime(this.toDateTime);
            return replayPurchaseEventHistoryResendRequest;
        }

        /**
         * Execute purchaseEventHistoryResend request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ReplayPurchaseEventHistoryResendRequest replayPurchaseEventHistoryResendRequest = buildBodyParams();
            ApiResponse<String> localVarResp = purchaseEventHistoryResendWithHttpInfo(replayPurchaseEventHistoryResendRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute purchaseEventHistoryResend request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            ReplayPurchaseEventHistoryResendRequest replayPurchaseEventHistoryResendRequest = buildBodyParams();
            return purchaseEventHistoryResendWithHttpInfo(replayPurchaseEventHistoryResendRequest);
        }

        /**
         * Execute purchaseEventHistoryResend request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            ReplayPurchaseEventHistoryResendRequest replayPurchaseEventHistoryResendRequest = buildBodyParams();
            return purchaseEventHistoryResendAsync(replayPurchaseEventHistoryResendRequest, _callback);
        }
    }

    /**
     * Purchase Event History (Replay Webhooks)
     * Call this endpoint to receive VCC, Lodged Card, Physical Card or ACH purchase events either by unique Guid or for a specified date range. If you subscribe to webhooks and are concerned you may be missing events, this endpoint can retrieve past events.
     * @return PurchaseEventHistoryResendRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseEventHistoryResendRequestBuilder purchaseEventHistoryResend() throws IllegalArgumentException {
        return new PurchaseEventHistoryResendRequestBuilder();
    }
}
