/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CancelPaymentsDto;
import com.konfigthis.client.model.DtoPayout;
import com.konfigthis.client.model.PayeeDto;
import com.konfigthis.client.model.PaymentsDto;
import com.konfigthis.client.model.PayoutAuthResponse;
import com.konfigthis.client.model.PayoutDto;
import java.util.UUID;
import com.konfigthis.client.model.UpdatePayeeDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PushToCardApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PushToCardApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PushToCardApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelPaymentsCall(UUID payoutGuid, CancelPaymentsDto cancelPaymentsDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelPaymentsDto;

        // create path and map variables
        String localVarPath = "/api/v1/PushToCard/Payouts/{payoutGuid}/Cancel"
            .replace("{" + "payoutGuid" + "}", localVarApiClient.escapeString(payoutGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPaymentsValidateBeforeCall(UUID payoutGuid, CancelPaymentsDto cancelPaymentsDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutGuid' is set
        if (payoutGuid == null) {
            throw new ApiException("Missing the required parameter 'payoutGuid' when calling cancelPayments(Async)");
        }

        // verify the required parameter 'cancelPaymentsDto' is set
        if (cancelPaymentsDto == null) {
            throw new ApiException("Missing the required parameter 'cancelPaymentsDto' when calling cancelPayments(Async)");
        }

        return cancelPaymentsCall(payoutGuid, cancelPaymentsDto, _callback);

    }


    private ApiResponse<String> cancelPaymentsWithHttpInfo(UUID payoutGuid, CancelPaymentsDto cancelPaymentsDto) throws ApiException {
        okhttp3.Call localVarCall = cancelPaymentsValidateBeforeCall(payoutGuid, cancelPaymentsDto, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelPaymentsAsync(UUID payoutGuid, CancelPaymentsDto cancelPaymentsDto, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPaymentsValidateBeforeCall(payoutGuid, cancelPaymentsDto, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelPaymentsRequestBuilder {
        private final UUID merchantGuid;
        private final List<UUID> payments;
        private final UUID payoutGuid;

        private CancelPaymentsRequestBuilder(UUID merchantGuid, List<UUID> payments, UUID payoutGuid) {
            this.merchantGuid = merchantGuid;
            this.payments = payments;
            this.payoutGuid = payoutGuid;
        }

        /**
         * Build call for cancelPayments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment has been canceled </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Payment list must not be empty </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payout doesn&#39;t exist or doesn&#39;t belong to the user --OR-- Payment doesn&#39;t exist or doesn&#39;t belong to payout </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Payout is in &#39;Rejected&#39; State --OR-- All Payments must be in &#39;Approved&#39; state </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancelPaymentsDto cancelPaymentsDto = buildBodyParams();
            return cancelPaymentsCall(payoutGuid, cancelPaymentsDto, _callback);
        }

        private CancelPaymentsDto buildBodyParams() {
            CancelPaymentsDto cancelPaymentsDto = new CancelPaymentsDto();
            cancelPaymentsDto.merchantGuid(this.merchantGuid);
            cancelPaymentsDto.payments(this.payments);
            return cancelPaymentsDto;
        }

        /**
         * Execute cancelPayments request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment has been canceled </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Payment list must not be empty </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payout doesn&#39;t exist or doesn&#39;t belong to the user --OR-- Payment doesn&#39;t exist or doesn&#39;t belong to payout </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Payout is in &#39;Rejected&#39; State --OR-- All Payments must be in &#39;Approved&#39; state </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            CancelPaymentsDto cancelPaymentsDto = buildBodyParams();
            ApiResponse<String> localVarResp = cancelPaymentsWithHttpInfo(payoutGuid, cancelPaymentsDto);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelPayments request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment has been canceled </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Payment list must not be empty </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payout doesn&#39;t exist or doesn&#39;t belong to the user --OR-- Payment doesn&#39;t exist or doesn&#39;t belong to payout </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Payout is in &#39;Rejected&#39; State --OR-- All Payments must be in &#39;Approved&#39; state </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            CancelPaymentsDto cancelPaymentsDto = buildBodyParams();
            return cancelPaymentsWithHttpInfo(payoutGuid, cancelPaymentsDto);
        }

        /**
         * Execute cancelPayments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payment has been canceled </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Payment list must not be empty </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payout doesn&#39;t exist or doesn&#39;t belong to the user --OR-- Payment doesn&#39;t exist or doesn&#39;t belong to payout </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> Payout is in &#39;Rejected&#39; State --OR-- All Payments must be in &#39;Approved&#39; state </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            CancelPaymentsDto cancelPaymentsDto = buildBodyParams();
            return cancelPaymentsAsync(payoutGuid, cancelPaymentsDto, _callback);
        }
    }

    /**
     * Cancel Payments
     * Use this endpoint to cancel payments within a Payout.
     * @param payoutGuid Globally Unique Identifier for a the Payout that will be changed (required)
     * @param cancelPaymentsDto Indicator of which payments to cancel (required)
     * @return CancelPaymentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment has been canceled </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Payment list must not be empty </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payout doesn&#39;t exist or doesn&#39;t belong to the user --OR-- Payment doesn&#39;t exist or doesn&#39;t belong to payout </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Payout is in &#39;Rejected&#39; State --OR-- All Payments must be in &#39;Approved&#39; state </td><td>  -  </td></tr>
     </table>
     */
    public CancelPaymentsRequestBuilder cancelPayments(UUID merchantGuid, List<UUID> payments, UUID payoutGuid) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (payments == null) throw new IllegalArgumentException("\"payments\" is required but got null");
        if (payoutGuid == null) throw new IllegalArgumentException("\"payoutGuid\" is required but got null");
            

        return new CancelPaymentsRequestBuilder(merchantGuid, payments, payoutGuid);
    }
    private okhttp3.Call createPayeeCall(PayeeDto payeeDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payeeDto;

        // create path and map variables
        String localVarPath = "/api/v1/PushToCard/Payees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayeeValidateBeforeCall(PayeeDto payeeDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeDto' is set
        if (payeeDto == null) {
            throw new ApiException("Missing the required parameter 'payeeDto' when calling createPayee(Async)");
        }

        return createPayeeCall(payeeDto, _callback);

    }


    private ApiResponse<PayeeDto> createPayeeWithHttpInfo(PayeeDto payeeDto) throws ApiException {
        okhttp3.Call localVarCall = createPayeeValidateBeforeCall(payeeDto, null);
        Type localVarReturnType = new TypeToken<PayeeDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPayeeAsync(PayeeDto payeeDto, final ApiCallback<PayeeDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayeeValidateBeforeCall(payeeDto, _callback);
        Type localVarReturnType = new TypeToken<PayeeDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePayeeRequestBuilder {
        private final UUID merchantGuid;
        private final String firstName;
        private final String lastName;
        private final String email;
        private final String phone;
        private UUID payeeGuid;
        private String address1;
        private String address2;
        private String city;
        private String state;
        private String zipCode;
        private String status;
        private String cardId;

        private CreatePayeeRequestBuilder(UUID merchantGuid, String firstName, String lastName, String email, String phone) {
            this.merchantGuid = merchantGuid;
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.phone = phone;
        }

        /**
         * Set payeeGuid
         * @param payeeGuid Guid for the created Payee that is returned by ConnexPay upon creation of a Payee. Ignored if provided in a Payee creation request. (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder payeeGuid(UUID payeeGuid) {
            this.payeeGuid = payeeGuid;
            return this;
        }
        
        /**
         * Set address1
         * @param address1 Postal address line 1 for the Payee. Alphanumerics and [,.-&#39;] are allowed. (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder address1(String address1) {
            this.address1 = address1;
            return this;
        }
        
        /**
         * Set address2
         * @param address2 Postal address line 2 for the Payee. Alphanumerics and [,.-&#39;] are allowed. (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder address2(String address2) {
            this.address2 = address2;
            return this;
        }
        
        /**
         * Set city
         * @param city Postal address city for the Payee. (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state Postal address state for the Payee. (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zipCode
         * @param zipCode Postal code for the Payee. (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }
        
        /**
         * Set status
         * @param status Status for the Payee. (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set cardId
         * @param cardId Unique identifier that refers to the card saved for a Payee when using the Payment Widget. It will be null when a Payee is created but will have a value once stored for the Payee using the Payment Widget. (optional)
         * @return CreatePayeeRequestBuilder
         */
        public CreatePayeeRequestBuilder cardId(String cardId) {
            this.cardId = cardId;
            return this;
        }
        
        /**
         * Build call for createPayee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A Payee with the provided email address already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayeeDto payeeDto = buildBodyParams();
            return createPayeeCall(payeeDto, _callback);
        }

        private PayeeDto buildBodyParams() {
            PayeeDto payeeDto = new PayeeDto();
            payeeDto.payeeGuid(this.payeeGuid);
            payeeDto.merchantGuid(this.merchantGuid);
            payeeDto.firstName(this.firstName);
            payeeDto.lastName(this.lastName);
            payeeDto.email(this.email);
            payeeDto.address1(this.address1);
            payeeDto.address2(this.address2);
            payeeDto.city(this.city);
            payeeDto.state(this.state);
            payeeDto.zipCode(this.zipCode);
            payeeDto.phone(this.phone);
            payeeDto.status(this.status);
            payeeDto.cardId(this.cardId);
            return payeeDto;
        }

        /**
         * Execute createPayee request
         * @return PayeeDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A Payee with the provided email address already exists </td><td>  -  </td></tr>
         </table>
         */
        public PayeeDto execute() throws ApiException {
            PayeeDto payeeDto = buildBodyParams();
            ApiResponse<PayeeDto> localVarResp = createPayeeWithHttpInfo(payeeDto);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPayee request with HTTP info returned
         * @return ApiResponse&lt;PayeeDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A Payee with the provided email address already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayeeDto> executeWithHttpInfo() throws ApiException {
            PayeeDto payeeDto = buildBodyParams();
            return createPayeeWithHttpInfo(payeeDto);
        }

        /**
         * Execute createPayee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> A Payee with the provided email address already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayeeDto> _callback) throws ApiException {
            PayeeDto payeeDto = buildBodyParams();
            return createPayeeAsync(payeeDto, _callback);
        }
    }

    /**
     * Create Payee
     * Use this endpoint to create a new Payee.
     * @param payeeDto The data for the Payee that will be created (required)
     * @return CreatePayeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Payee with the provided email address already exists </td><td>  -  </td></tr>
     </table>
     */
    public CreatePayeeRequestBuilder createPayee(UUID merchantGuid, String firstName, String lastName, String email, String phone) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            if (firstName != null && firstName.length() < 0) {
              throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 0.");
            }

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            if (lastName != null && lastName.length() < 0) {
              throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 0.");
            }

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (phone == null) throw new IllegalArgumentException("\"phone\" is required but got null");
            

        return new CreatePayeeRequestBuilder(merchantGuid, firstName, lastName, email, phone);
    }
    private okhttp3.Call createPayoutCall(PayoutDto payoutDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payoutDto;

        // create path and map variables
        String localVarPath = "/api/v1/PushToCard/Payouts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPayoutValidateBeforeCall(PayoutDto payoutDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutDto' is set
        if (payoutDto == null) {
            throw new ApiException("Missing the required parameter 'payoutDto' when calling createPayout(Async)");
        }

        return createPayoutCall(payoutDto, _callback);

    }


    private ApiResponse<PayoutDto> createPayoutWithHttpInfo(PayoutDto payoutDto) throws ApiException {
        okhttp3.Call localVarCall = createPayoutValidateBeforeCall(payoutDto, null);
        Type localVarReturnType = new TypeToken<PayoutDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPayoutAsync(PayoutDto payoutDto, final ApiCallback<PayoutDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPayoutValidateBeforeCall(payoutDto, _callback);
        Type localVarReturnType = new TypeToken<PayoutDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePayoutRequestBuilder {
        private final UUID merchantGuid;
        private final String memo;
        private final List<PaymentsDto> payments;
        private UUID payoutGuid;
        private String payoutReferenceToken;
        private String status;
        private String orderNumber;
        private String customerId;
        private String associationId;
        private List<Integer> labelIds;

        private CreatePayoutRequestBuilder(UUID merchantGuid, String memo, List<PaymentsDto> payments) {
            this.merchantGuid = merchantGuid;
            this.memo = memo;
            this.payments = payments;
        }

        /**
         * Set payoutGuid
         * @param payoutGuid Guid assigned to the Payout by ConnexPay upon creation of a Payout. (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder payoutGuid(UUID payoutGuid) {
            this.payoutGuid = payoutGuid;
            return this;
        }
        
        /**
         * Set payoutReferenceToken
         * @param payoutReferenceToken The Payout identifier that will be needed by ConnexPay support teams to research issues. (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder payoutReferenceToken(String payoutReferenceToken) {
            this.payoutReferenceToken = payoutReferenceToken;
            return this;
        }
        
        /**
         * Set status
         * @param status Status of the Payout. (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set orderNumber
         * @param orderNumber The most common number used throughout the ConnexPay Portal. Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. The maximum length is 50 alpha-numeric characters and allows dashes ( - ). (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder orderNumber(String orderNumber) {
            this.orderNumber = orderNumber;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId Transaction ID within the client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes. The maximum length is 100 characters and is alpha-numeric. (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set associationId
         * @param associationId Association ID is used to tie a Payout to a sale or sales. For example, if you have several sales and one Payout to a Payee, association ID can be added to the sales and the Payout for downstream reporting. (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder associationId(String associationId) {
            this.associationId = associationId;
            return this;
        }
        
        /**
         * Set labelIds
         * @param labelIds Label IDs are used to associate a Payout to specific labels within ConnexPay Bridge UI for an organization. If a Payout is tied to an incorrect Label, it will not filter or display correctly in Bridge&#39;s Search Grid. Please contact your Customer Care Consultant for a list of valid Label IDs before use. (optional)
         * @return CreatePayoutRequestBuilder
         */
        public CreatePayoutRequestBuilder labelIds(List<Integer> labelIds) {
            this.labelIds = labelIds;
            return this;
        }
        
        /**
         * Build call for createPayout
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PayoutDto payoutDto = buildBodyParams();
            return createPayoutCall(payoutDto, _callback);
        }

        private PayoutDto buildBodyParams() {
            PayoutDto payoutDto = new PayoutDto();
            payoutDto.payoutGuid(this.payoutGuid);
            payoutDto.merchantGuid(this.merchantGuid);
            payoutDto.payoutReferenceToken(this.payoutReferenceToken);
            payoutDto.memo(this.memo);
            payoutDto.status(this.status);
            payoutDto.payments(this.payments);
            payoutDto.orderNumber(this.orderNumber);
            payoutDto.customerId(this.customerId);
            payoutDto.associationId(this.associationId);
            payoutDto.labelIds(this.labelIds);
            return payoutDto;
        }

        /**
         * Execute createPayout request
         * @return PayoutDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public PayoutDto execute() throws ApiException {
            PayoutDto payoutDto = buildBodyParams();
            ApiResponse<PayoutDto> localVarResp = createPayoutWithHttpInfo(payoutDto);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPayout request with HTTP info returned
         * @return ApiResponse&lt;PayoutDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayoutDto> executeWithHttpInfo() throws ApiException {
            PayoutDto payoutDto = buildBodyParams();
            return createPayoutWithHttpInfo(payoutDto);
        }

        /**
         * Execute createPayout request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayoutDto> _callback) throws ApiException {
            PayoutDto payoutDto = buildBodyParams();
            return createPayoutAsync(payoutDto, _callback);
        }
    }

    /**
     * Create Payout
     * Use this endpoint to create a new Payout.
     * @param payoutDto The data for the Payout being created (required)
     * @return CreatePayoutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public CreatePayoutRequestBuilder createPayout(UUID merchantGuid, String memo, List<PaymentsDto> payments) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (memo == null) throw new IllegalArgumentException("\"memo\" is required but got null");
            if (memo != null && memo.length() < 0) {
              throw new IllegalArgumentException("Invalid value for memo. Length must be greater than or equal to 0.");
            }

        if (payments == null) throw new IllegalArgumentException("\"payments\" is required but got null");
        return new CreatePayoutRequestBuilder(merchantGuid, memo, payments);
    }
    private okhttp3.Call getAuthenticationTokenAsyncCall(String payeeGuid, String payeeEmailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/PushToCard/AuthenticatePaymentWidget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payeeGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payeeGuid", payeeGuid));
        }

        if (payeeEmailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payeeEmailAddress", payeeEmailAddress));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthenticationTokenAsyncValidateBeforeCall(String payeeGuid, String payeeEmailAddress, final ApiCallback _callback) throws ApiException {
        return getAuthenticationTokenAsyncCall(payeeGuid, payeeEmailAddress, _callback);

    }


    private ApiResponse<PayoutAuthResponse> getAuthenticationTokenAsyncWithHttpInfo(String payeeGuid, String payeeEmailAddress) throws ApiException {
        okhttp3.Call localVarCall = getAuthenticationTokenAsyncValidateBeforeCall(payeeGuid, payeeEmailAddress, null);
        Type localVarReturnType = new TypeToken<PayoutAuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAuthenticationTokenAsyncAsync(String payeeGuid, String payeeEmailAddress, final ApiCallback<PayoutAuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthenticationTokenAsyncValidateBeforeCall(payeeGuid, payeeEmailAddress, _callback);
        Type localVarReturnType = new TypeToken<PayoutAuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAuthenticationTokenAsyncRequestBuilder {
        private String payeeGuid;
        private String payeeEmailAddress;

        private GetAuthenticationTokenAsyncRequestBuilder() {
        }

        /**
         * Set payeeGuid
         * @param payeeGuid Globally Unique Identifier for the Payee being authenticated. (optional)
         * @return GetAuthenticationTokenAsyncRequestBuilder
         */
        public GetAuthenticationTokenAsyncRequestBuilder payeeGuid(String payeeGuid) {
            this.payeeGuid = payeeGuid;
            return this;
        }
        
        /**
         * Set payeeEmailAddress
         * @param payeeEmailAddress Email address of the Payee being retrieved (optional)
         * @return GetAuthenticationTokenAsyncRequestBuilder
         */
        public GetAuthenticationTokenAsyncRequestBuilder payeeEmailAddress(String payeeEmailAddress) {
            this.payeeEmailAddress = payeeEmailAddress;
            return this;
        }
        
        /**
         * Build call for getAuthenticationTokenAsync
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> A valid Payee guid or email address must be provided </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAuthenticationTokenAsyncCall(payeeGuid, payeeEmailAddress, _callback);
        }


        /**
         * Execute getAuthenticationTokenAsync request
         * @return PayoutAuthResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> A valid Payee guid or email address must be provided </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public PayoutAuthResponse execute() throws ApiException {
            ApiResponse<PayoutAuthResponse> localVarResp = getAuthenticationTokenAsyncWithHttpInfo(payeeGuid, payeeEmailAddress);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAuthenticationTokenAsync request with HTTP info returned
         * @return ApiResponse&lt;PayoutAuthResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> A valid Payee guid or email address must be provided </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayoutAuthResponse> executeWithHttpInfo() throws ApiException {
            return getAuthenticationTokenAsyncWithHttpInfo(payeeGuid, payeeEmailAddress);
        }

        /**
         * Execute getAuthenticationTokenAsync request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> A valid Payee guid or email address must be provided </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayoutAuthResponse> _callback) throws ApiException {
            return getAuthenticationTokenAsyncAsync(payeeGuid, payeeEmailAddress, _callback);
        }
    }

    /**
     * Get Authentication Token for DropInUI
     * 
     * @return GetAuthenticationTokenAsyncRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A valid Payee guid or email address must be provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
     </table>
     */
    public GetAuthenticationTokenAsyncRequestBuilder getAuthenticationTokenAsync() throws IllegalArgumentException {
        return new GetAuthenticationTokenAsyncRequestBuilder();
    }
    private okhttp3.Call getPayeeCall(String payeeGuid, String payeeEmailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/PushToCard/Payees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payeeGuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payeeGuid", payeeGuid));
        }

        if (payeeEmailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payeeEmailAddress", payeeEmailAddress));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayeeValidateBeforeCall(String payeeGuid, String payeeEmailAddress, final ApiCallback _callback) throws ApiException {
        return getPayeeCall(payeeGuid, payeeEmailAddress, _callback);

    }


    private ApiResponse<PayeeDto> getPayeeWithHttpInfo(String payeeGuid, String payeeEmailAddress) throws ApiException {
        okhttp3.Call localVarCall = getPayeeValidateBeforeCall(payeeGuid, payeeEmailAddress, null);
        Type localVarReturnType = new TypeToken<PayeeDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayeeAsync(String payeeGuid, String payeeEmailAddress, final ApiCallback<PayeeDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayeeValidateBeforeCall(payeeGuid, payeeEmailAddress, _callback);
        Type localVarReturnType = new TypeToken<PayeeDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayeeRequestBuilder {
        private String payeeGuid;
        private String payeeEmailAddress;

        private GetPayeeRequestBuilder() {
        }

        /**
         * Set payeeGuid
         * @param payeeGuid Globally Unique Identifier for the Payee being retrieved (optional)
         * @return GetPayeeRequestBuilder
         */
        public GetPayeeRequestBuilder payeeGuid(String payeeGuid) {
            this.payeeGuid = payeeGuid;
            return this;
        }
        
        /**
         * Set payeeEmailAddress
         * @param payeeEmailAddress Email address of the Payee being retrieved (optional)
         * @return GetPayeeRequestBuilder
         */
        public GetPayeeRequestBuilder payeeEmailAddress(String payeeEmailAddress) {
            this.payeeEmailAddress = payeeEmailAddress;
            return this;
        }
        
        /**
         * Build call for getPayee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The Payee&#39;s guid or email address must be provided </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayeeCall(payeeGuid, payeeEmailAddress, _callback);
        }


        /**
         * Execute getPayee request
         * @return PayeeDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The Payee&#39;s guid or email address must be provided </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public PayeeDto execute() throws ApiException {
            ApiResponse<PayeeDto> localVarResp = getPayeeWithHttpInfo(payeeGuid, payeeEmailAddress);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayee request with HTTP info returned
         * @return ApiResponse&lt;PayeeDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The Payee&#39;s guid or email address must be provided </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayeeDto> executeWithHttpInfo() throws ApiException {
            return getPayeeWithHttpInfo(payeeGuid, payeeEmailAddress);
        }

        /**
         * Execute getPayee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The Payee&#39;s guid or email address must be provided </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayeeDto> _callback) throws ApiException {
            return getPayeeAsync(payeeGuid, payeeEmailAddress, _callback);
        }
    }

    /**
     * Get Payee
     * Use this endpoint to retrieve a Payee for a specific Payee guid. One or both &#39;payeeGuid&#39; or &#39;payeeEmailAddress&#39; must be provided.
     * @return GetPayeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Payee&#39;s guid or email address must be provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
     </table>
     */
    public GetPayeeRequestBuilder getPayee() throws IllegalArgumentException {
        return new GetPayeeRequestBuilder();
    }
    private okhttp3.Call getPayoutDetailsCall(UUID payoutGuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/PushToCard/Payouts/{payoutGuid}"
            .replace("{" + "payoutGuid" + "}", localVarApiClient.escapeString(payoutGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayoutDetailsValidateBeforeCall(UUID payoutGuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payoutGuid' is set
        if (payoutGuid == null) {
            throw new ApiException("Missing the required parameter 'payoutGuid' when calling getPayoutDetails(Async)");
        }

        return getPayoutDetailsCall(payoutGuid, _callback);

    }


    private ApiResponse<DtoPayout> getPayoutDetailsWithHttpInfo(UUID payoutGuid) throws ApiException {
        okhttp3.Call localVarCall = getPayoutDetailsValidateBeforeCall(payoutGuid, null);
        Type localVarReturnType = new TypeToken<DtoPayout>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayoutDetailsAsync(UUID payoutGuid, final ApiCallback<DtoPayout> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayoutDetailsValidateBeforeCall(payoutGuid, _callback);
        Type localVarReturnType = new TypeToken<DtoPayout>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayoutDetailsRequestBuilder {
        private final UUID payoutGuid;

        private GetPayoutDetailsRequestBuilder(UUID payoutGuid) {
            this.payoutGuid = payoutGuid;
        }

        /**
         * Build call for getPayoutDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payout doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayoutDetailsCall(payoutGuid, _callback);
        }


        /**
         * Execute getPayoutDetails request
         * @return DtoPayout
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payout doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public DtoPayout execute() throws ApiException {
            ApiResponse<DtoPayout> localVarResp = getPayoutDetailsWithHttpInfo(payoutGuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayoutDetails request with HTTP info returned
         * @return ApiResponse&lt;DtoPayout&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payout doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DtoPayout> executeWithHttpInfo() throws ApiException {
            return getPayoutDetailsWithHttpInfo(payoutGuid);
        }

        /**
         * Execute getPayoutDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payout doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DtoPayout> _callback) throws ApiException {
            return getPayoutDetailsAsync(payoutGuid, _callback);
        }
    }

    /**
     * Get Payout Details
     * Use this endpoint to retrieve the details for a Payout for a specific Payout guid.
     * @param payoutGuid Globally Unique Identifier for a the Payout that will be retrieved (required)
     * @return GetPayoutDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payout doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
     </table>
     */
    public GetPayoutDetailsRequestBuilder getPayoutDetails(UUID payoutGuid) throws IllegalArgumentException {
        if (payoutGuid == null) throw new IllegalArgumentException("\"payoutGuid\" is required but got null");
            

        return new GetPayoutDetailsRequestBuilder(payoutGuid);
    }
    private okhttp3.Call managePayeeCall(UUID payeeGuid, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/PushToCard/Payees/{payeeGuid}/{status}"
            .replace("{" + "payeeGuid" + "}", localVarApiClient.escapeString(payeeGuid.toString()))
            .replace("{" + "status" + "}", localVarApiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managePayeeValidateBeforeCall(UUID payeeGuid, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeGuid' is set
        if (payeeGuid == null) {
            throw new ApiException("Missing the required parameter 'payeeGuid' when calling managePayee(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling managePayee(Async)");
        }

        return managePayeeCall(payeeGuid, status, _callback);

    }


    private ApiResponse<String> managePayeeWithHttpInfo(UUID payeeGuid, String status) throws ApiException {
        okhttp3.Call localVarCall = managePayeeValidateBeforeCall(payeeGuid, status, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call managePayeeAsync(UUID payeeGuid, String status, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = managePayeeValidateBeforeCall(payeeGuid, status, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ManagePayeeRequestBuilder {
        private final UUID payeeGuid;
        private final String status;

        private ManagePayeeRequestBuilder(UUID payeeGuid, String status) {
            this.payeeGuid = payeeGuid;
            this.status = status;
        }

        /**
         * Build call for managePayee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payee status changed to the requested state --OR-- Payee is already in the requested state </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Status must be &#39;enable&#39; or &#39;disable&#39; </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return managePayeeCall(payeeGuid, status, _callback);
        }


        /**
         * Execute managePayee request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payee status changed to the requested state --OR-- Payee is already in the requested state </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Status must be &#39;enable&#39; or &#39;disable&#39; </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = managePayeeWithHttpInfo(payeeGuid, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute managePayee request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payee status changed to the requested state --OR-- Payee is already in the requested state </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Status must be &#39;enable&#39; or &#39;disable&#39; </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return managePayeeWithHttpInfo(payeeGuid, status);
        }

        /**
         * Execute managePayee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payee status changed to the requested state --OR-- Payee is already in the requested state </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Status must be &#39;enable&#39; or &#39;disable&#39; </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return managePayeeAsync(payeeGuid, status, _callback);
        }
    }

    /**
     * Manage Payee
     * Use this endpoint to enable or disable a Payee.
     * @param payeeGuid Globally Unique Identifier for the Payee that will be changed (required)
     * @param status Must be &#39;enable&#39; or &#39;disable&#39; (required)
     * @return ManagePayeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payee status changed to the requested state --OR-- Payee is already in the requested state </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Status must be &#39;enable&#39; or &#39;disable&#39; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
     </table>
     */
    public ManagePayeeRequestBuilder managePayee(UUID payeeGuid, String status) throws IllegalArgumentException {
        if (payeeGuid == null) throw new IllegalArgumentException("\"payeeGuid\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new ManagePayeeRequestBuilder(payeeGuid, status);
    }
    private okhttp3.Call pushFundsToCardAsyncCall(String ridGuid, String cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/PushToCard/Payments/{ridGuid}/{cardId}"
            .replace("{" + "ridGuid" + "}", localVarApiClient.escapeString(ridGuid.toString()))
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushFundsToCardAsyncValidateBeforeCall(String ridGuid, String cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ridGuid' is set
        if (ridGuid == null) {
            throw new ApiException("Missing the required parameter 'ridGuid' when calling pushFundsToCardAsync(Async)");
        }

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling pushFundsToCardAsync(Async)");
        }

        return pushFundsToCardAsyncCall(ridGuid, cardId, _callback);

    }


    private ApiResponse<String> pushFundsToCardAsyncWithHttpInfo(String ridGuid, String cardId) throws ApiException {
        okhttp3.Call localVarCall = pushFundsToCardAsyncValidateBeforeCall(ridGuid, cardId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pushFundsToCardAsyncAsync(String ridGuid, String cardId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushFundsToCardAsyncValidateBeforeCall(ridGuid, cardId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PushFundsToCardAsyncRequestBuilder {
        private final String ridGuid;
        private final String cardId;

        private PushFundsToCardAsyncRequestBuilder(String ridGuid, String cardId) {
            this.ridGuid = ridGuid;
            this.cardId = cardId;
        }

        /**
         * Build call for pushFundsToCardAsync
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully pushed funds to card </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Valid values for ridGuid and cardId must be provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pushFundsToCardAsyncCall(ridGuid, cardId, _callback);
        }


        /**
         * Execute pushFundsToCardAsync request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully pushed funds to card </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Valid values for ridGuid and cardId must be provided </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = pushFundsToCardAsyncWithHttpInfo(ridGuid, cardId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pushFundsToCardAsync request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully pushed funds to card </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Valid values for ridGuid and cardId must be provided </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return pushFundsToCardAsyncWithHttpInfo(ridGuid, cardId);
        }

        /**
         * Execute pushFundsToCardAsync request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully pushed funds to card </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Valid values for ridGuid and cardId must be provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return pushFundsToCardAsyncAsync(ridGuid, cardId, _callback);
        }
    }

    /**
     * Push Funds to a Card
     * 
     * @param ridGuid For Payment Widget clients. A ridGuid will will be returned upon creation of a Payout. That must be saved and passed here to complete the process. (required)
     * @param cardId For Payment Widget clients. The cardId is retrieved by calling the Get Payee endpoint. (required)
     * @return PushFundsToCardAsyncRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully pushed funds to card </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Valid values for ridGuid and cardId must be provided </td><td>  -  </td></tr>
     </table>
     */
    public PushFundsToCardAsyncRequestBuilder pushFundsToCardAsync(String ridGuid, String cardId) throws IllegalArgumentException {
        if (ridGuid == null) throw new IllegalArgumentException("\"ridGuid\" is required but got null");
            

        if (cardId == null) throw new IllegalArgumentException("\"cardId\" is required but got null");
            

        return new PushFundsToCardAsyncRequestBuilder(ridGuid, cardId);
    }
    private okhttp3.Call updatePayeeCall(UUID payeeGuid, UpdatePayeeDto updatePayeeDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePayeeDto;

        // create path and map variables
        String localVarPath = "/api/v1/PushToCard/Payees/{payeeGuid}"
            .replace("{" + "payeeGuid" + "}", localVarApiClient.escapeString(payeeGuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePayeeValidateBeforeCall(UUID payeeGuid, UpdatePayeeDto updatePayeeDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payeeGuid' is set
        if (payeeGuid == null) {
            throw new ApiException("Missing the required parameter 'payeeGuid' when calling updatePayee(Async)");
        }

        // verify the required parameter 'updatePayeeDto' is set
        if (updatePayeeDto == null) {
            throw new ApiException("Missing the required parameter 'updatePayeeDto' when calling updatePayee(Async)");
        }

        return updatePayeeCall(payeeGuid, updatePayeeDto, _callback);

    }


    private ApiResponse<String> updatePayeeWithHttpInfo(UUID payeeGuid, UpdatePayeeDto updatePayeeDto) throws ApiException {
        okhttp3.Call localVarCall = updatePayeeValidateBeforeCall(payeeGuid, updatePayeeDto, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePayeeAsync(UUID payeeGuid, UpdatePayeeDto updatePayeeDto, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePayeeValidateBeforeCall(payeeGuid, updatePayeeDto, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePayeeRequestBuilder {
        private final UUID payeeGuid;
        private String firstName;
        private String lastName;
        private String email;
        private String address1;
        private String address2;
        private String city;
        private String state;
        private String zipCode;
        private String phone;
        private String status;

        private UpdatePayeeRequestBuilder(UUID payeeGuid) {
            this.payeeGuid = payeeGuid;
        }

        /**
         * Set firstName
         * @param firstName First name for the Payee to be updated. (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName Last name for the Payee to be updated. (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set email
         * @param email Email address for the Payee to be updated. (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set address1
         * @param address1 Postal address line 1 for the Payee to be updated. Alphanumerics and [,.-&#39;] are allowed. (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder address1(String address1) {
            this.address1 = address1;
            return this;
        }
        
        /**
         * Set address2
         * @param address2 Postal address line 2 for the Payee to be updated. Alphanumerics and [,.-&#39;] are allowed. (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder address2(String address2) {
            this.address2 = address2;
            return this;
        }
        
        /**
         * Set city
         * @param city Postal address city for the Payee to be updated. (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set state
         * @param state Postal address state for the Payee to be updated. (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set zipCode
         * @param zipCode Postal code for the Payee to be updated. (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }
        
        /**
         * Set phone
         * @param phone Phone number for the Payee to be updated, up to 10-character string. (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set status
         * @param status Status for the Payee to be updated. (optional)
         * @return UpdatePayeeRequestBuilder
         */
        public UpdatePayeeRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updatePayee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> payeeGuid must be a valid guid value </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdatePayeeDto updatePayeeDto = buildBodyParams();
            return updatePayeeCall(payeeGuid, updatePayeeDto, _callback);
        }

        private UpdatePayeeDto buildBodyParams() {
            UpdatePayeeDto updatePayeeDto = new UpdatePayeeDto();
            updatePayeeDto.firstName(this.firstName);
            updatePayeeDto.lastName(this.lastName);
            updatePayeeDto.email(this.email);
            updatePayeeDto.address1(this.address1);
            updatePayeeDto.address2(this.address2);
            updatePayeeDto.city(this.city);
            updatePayeeDto.state(this.state);
            updatePayeeDto.zipCode(this.zipCode);
            updatePayeeDto.phone(this.phone);
            updatePayeeDto.status(this.status);
            return updatePayeeDto;
        }

        /**
         * Execute updatePayee request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> payeeGuid must be a valid guid value </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            UpdatePayeeDto updatePayeeDto = buildBodyParams();
            ApiResponse<String> localVarResp = updatePayeeWithHttpInfo(payeeGuid, updatePayeeDto);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePayee request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> payeeGuid must be a valid guid value </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            UpdatePayeeDto updatePayeeDto = buildBodyParams();
            return updatePayeeWithHttpInfo(payeeGuid, updatePayeeDto);
        }

        /**
         * Execute updatePayee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> payeeGuid must be a valid guid value </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            UpdatePayeeDto updatePayeeDto = buildBodyParams();
            return updatePayeeAsync(payeeGuid, updatePayeeDto, _callback);
        }
    }

    /**
     * Update Payee
     * Use this endpoint to update data for a Payee.
     * @param payeeGuid Globally Unique Identifier for a the Payee that will be updated (required)
     * @param updatePayeeDto The data for the Payee that will be updated (required)
     * @return UpdatePayeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> payeeGuid must be a valid guid value </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User doesn&#39;t have access to this merchant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Payee doesn&#39;t exist or doesn&#39;t belong to the user </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePayeeRequestBuilder updatePayee(UUID payeeGuid) throws IllegalArgumentException {
        if (payeeGuid == null) throw new IllegalArgumentException("\"payeeGuid\" is required but got null");
            

        return new UpdatePayeeRequestBuilder(payeeGuid);
    }
}
