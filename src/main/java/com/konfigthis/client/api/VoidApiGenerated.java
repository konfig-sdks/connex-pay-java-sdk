/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.VoidCreateVoidRequest;
import com.konfigthis.client.model.VoidCreateVoidResponse;
import com.konfigthis.client.model.VoidSearchVoidsRequest;
import com.konfigthis.client.model.VoidSearchVoidsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VoidApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VoidApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VoidApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createVoidCall(VoidCreateVoidRequest voidCreateVoidRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voidCreateVoidRequest;

        // create path and map variables
        String localVarPath = "/api/v1/void";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVoidValidateBeforeCall(VoidCreateVoidRequest voidCreateVoidRequest, final ApiCallback _callback) throws ApiException {
        return createVoidCall(voidCreateVoidRequest, _callback);

    }


    private ApiResponse<VoidCreateVoidResponse> createVoidWithHttpInfo(VoidCreateVoidRequest voidCreateVoidRequest) throws ApiException {
        okhttp3.Call localVarCall = createVoidValidateBeforeCall(voidCreateVoidRequest, null);
        Type localVarReturnType = new TypeToken<VoidCreateVoidResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createVoidAsync(VoidCreateVoidRequest voidCreateVoidRequest, final ApiCallback<VoidCreateVoidResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVoidValidateBeforeCall(voidCreateVoidRequest, _callback);
        Type localVarReturnType = new TypeToken<VoidCreateVoidResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateVoidRequestBuilder {
        private final String deviceGuid;
        private String saleGuid;
        private String returnGuid;
        private Integer saleReferenceNumber;
        private String authOnlyGuid;
        private String voidReason;
        private Float amount;
        private String sequenceNumber;

        private CreateVoidRequestBuilder(String deviceGuid) {
            this.deviceGuid = deviceGuid;
        }

        /**
         * Set saleGuid
         * @param saleGuid Sale Transaction Guid (optional, default to Conditional Mandatory when SaleReferenceNumber, AuthOnlyGuid and ReturnGuid parameters are not present)
         * @return CreateVoidRequestBuilder
         */
        public CreateVoidRequestBuilder saleGuid(String saleGuid) {
            this.saleGuid = saleGuid;
            return this;
        }
        
        /**
         * Set returnGuid
         * @param returnGuid Return&#39;s Guid (optional, default to Conditional Mandatory when SaleGuid, AuthOnlyGuid and SaleReferenceNumber parameters are not present)
         * @return CreateVoidRequestBuilder
         */
        public CreateVoidRequestBuilder returnGuid(String returnGuid) {
            this.returnGuid = returnGuid;
            return this;
        }
        
        /**
         * Set saleReferenceNumber
         * @param saleReferenceNumber Sale Reference Number (optional)
         * @return CreateVoidRequestBuilder
         */
        public CreateVoidRequestBuilder saleReferenceNumber(Integer saleReferenceNumber) {
            this.saleReferenceNumber = saleReferenceNumber;
            return this;
        }
        
        /**
         * Set authOnlyGuid
         * @param authOnlyGuid Guid to include in request when voiding an Auth Only request. (optional, default to Conditional Mandatory when SaleGuid, SaleReferenceNumber and ReturnGuid parameters are not present)
         * @return CreateVoidRequestBuilder
         */
        public CreateVoidRequestBuilder authOnlyGuid(String authOnlyGuid) {
            this.authOnlyGuid = authOnlyGuid;
            return this;
        }
        
        /**
         * Set voidReason
         * @param voidReason Indicates the reason the transaction was voided.  Allowed values:  1. POST_AUTH_USER_DECLINE 2. DEVICE_TIMEOUT 3. DEVICE_UNAVAILABLE 4. PARTIAL_REVERSAL 5. TORN_TRANSACTIONS 6. POST_AUTH_CHIP_DECLINE (optional, default to Optional)
         * @return CreateVoidRequestBuilder
         */
        public CreateVoidRequestBuilder voidReason(String voidReason) {
            this.voidReason = voidReason;
            return this;
        }
        
        /**
         * Set amount
         * @param amount Amount to be voided.  Note: Amount is be used once only for credit card Sales and should not exceed corresponding Saleâ€™s Amount. (optional)
         * @return CreateVoidRequestBuilder
         */
        public CreateVoidRequestBuilder amount(Float amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set sequenceNumber
         * @param sequenceNumber Transaction sequence number within client environment. Provide a unique SequenceNumber for each new request. If the same value is sent within 30 minutes it will be considered a duplicate request. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric. (optional, default to Optional)
         * @return CreateVoidRequestBuilder
         */
        public CreateVoidRequestBuilder sequenceNumber(String sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }
        
        /**
         * Build call for createVoid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VoidCreateVoidRequest voidCreateVoidRequest = buildBodyParams();
            return createVoidCall(voidCreateVoidRequest, _callback);
        }

        private VoidCreateVoidRequest buildBodyParams() {
            VoidCreateVoidRequest voidCreateVoidRequest = new VoidCreateVoidRequest();
            voidCreateVoidRequest.deviceGuid(this.deviceGuid);
            voidCreateVoidRequest.saleGuid(this.saleGuid);
            voidCreateVoidRequest.returnGuid(this.returnGuid);
            voidCreateVoidRequest.saleReferenceNumber(this.saleReferenceNumber);
            voidCreateVoidRequest.authOnlyGuid(this.authOnlyGuid);
            voidCreateVoidRequest.voidReason(this.voidReason);
            voidCreateVoidRequest.amount(this.amount);
            voidCreateVoidRequest.sequenceNumber(this.sequenceNumber);
            return voidCreateVoidRequest;
        }

        /**
         * Execute createVoid request
         * @return VoidCreateVoidResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public VoidCreateVoidResponse execute() throws ApiException {
            VoidCreateVoidRequest voidCreateVoidRequest = buildBodyParams();
            ApiResponse<VoidCreateVoidResponse> localVarResp = createVoidWithHttpInfo(voidCreateVoidRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createVoid request with HTTP info returned
         * @return ApiResponse&lt;VoidCreateVoidResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoidCreateVoidResponse> executeWithHttpInfo() throws ApiException {
            VoidCreateVoidRequest voidCreateVoidRequest = buildBodyParams();
            return createVoidWithHttpInfo(voidCreateVoidRequest);
        }

        /**
         * Execute createVoid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoidCreateVoidResponse> _callback) throws ApiException {
            VoidCreateVoidRequest voidCreateVoidRequest = buildBodyParams();
            return createVoidAsync(voidCreateVoidRequest, _callback);
        }
    }

    /**
     * Void
     * This endpoint creates a void.
     * @return CreateVoidRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> 201 </td><td>  -  </td></tr>
     </table>
     */
    public CreateVoidRequestBuilder createVoid(String deviceGuid) throws IllegalArgumentException {
        if (deviceGuid == null) throw new IllegalArgumentException("\"deviceGuid\" is required but got null");
            

        return new CreateVoidRequestBuilder(deviceGuid);
    }
    private okhttp3.Call searchVoidsCall(String exportable, Integer pageNumber, String pageSize, VoidSearchVoidsRequest voidSearchVoidsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voidSearchVoidsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/Search/Voids/{exportable}/{pageNumber}/{pageSize}"
            .replace("{" + "Exportable" + "}", localVarApiClient.escapeString(exportable.toString()))
            .replace("{" + "PageNumber" + "}", localVarApiClient.escapeString(pageNumber.toString()))
            .replace("{" + "PageSize" + "}", localVarApiClient.escapeString(pageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVoidsValidateBeforeCall(String exportable, Integer pageNumber, String pageSize, VoidSearchVoidsRequest voidSearchVoidsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportable' is set
        if (exportable == null) {
            throw new ApiException("Missing the required parameter 'exportable' when calling searchVoids(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling searchVoids(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling searchVoids(Async)");
        }

        return searchVoidsCall(exportable, pageNumber, pageSize, voidSearchVoidsRequest, _callback);

    }


    private ApiResponse<VoidSearchVoidsResponse> searchVoidsWithHttpInfo(String exportable, Integer pageNumber, String pageSize, VoidSearchVoidsRequest voidSearchVoidsRequest) throws ApiException {
        okhttp3.Call localVarCall = searchVoidsValidateBeforeCall(exportable, pageNumber, pageSize, voidSearchVoidsRequest, null);
        Type localVarReturnType = new TypeToken<VoidSearchVoidsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchVoidsAsync(String exportable, Integer pageNumber, String pageSize, VoidSearchVoidsRequest voidSearchVoidsRequest, final ApiCallback<VoidSearchVoidsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVoidsValidateBeforeCall(exportable, pageNumber, pageSize, voidSearchVoidsRequest, _callback);
        Type localVarReturnType = new TypeToken<VoidSearchVoidsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchVoidsRequestBuilder {
        private final String exportable;
        private final Integer pageNumber;
        private final String pageSize;
        private String merchantGuid;
        private String voidReason;
        private String status;
        private LocalDate timeStampFrom;
        private LocalDate timeStampTo;

        private SearchVoidsRequestBuilder(String exportable, Integer pageNumber, String pageSize) {
            this.exportable = exportable;
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Set merchantGuid
         * @param merchantGuid Merchantâ€™s Guid. (optional, default to Mandatory)
         * @return SearchVoidsRequestBuilder
         */
        public SearchVoidsRequestBuilder merchantGuid(String merchantGuid) {
            this.merchantGuid = merchantGuid;
            return this;
        }
        
        /**
         * Set voidReason
         * @param voidReason Indicates the reason the transaction was voided.  Allowed values:  1. POST_AUTH_USER_DECLINE 2. DEVICE_TIMEOUT 3. DEVICE_UNAVAILABLE 4. PARTIAL_REVERSAL 5. TORN_TRANSACTIONS 6. POST_AUTH_CHIP_DECLINE (optional, default to Optional)
         * @return SearchVoidsRequestBuilder
         */
        public SearchVoidsRequestBuilder voidReason(String voidReason) {
            this.voidReason = voidReason;
            return this;
        }
        
        /**
         * Set status
         * @param status Voidâ€™s status.  Allowed values:  1. Transaction - Approved 2. Transaction - Declined 3. Transaction - Created - Local 4. Transaction - Created - Error: Processor not reached 5. Transaction - Processor Error 6. Transaction - Approved - Warning (optional, default to Optional)
         * @return SearchVoidsRequestBuilder
         */
        public SearchVoidsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set timeStampFrom
         * @param timeStampFrom Voidâ€™s TimeStamp. (optional)
         * @return SearchVoidsRequestBuilder
         */
        public SearchVoidsRequestBuilder timeStampFrom(LocalDate timeStampFrom) {
            this.timeStampFrom = timeStampFrom;
            return this;
        }
        
        /**
         * Set timeStampTo
         * @param timeStampTo Voidâ€™s TimeStamp. (optional)
         * @return SearchVoidsRequestBuilder
         */
        public SearchVoidsRequestBuilder timeStampTo(LocalDate timeStampTo) {
            this.timeStampTo = timeStampTo;
            return this;
        }
        
        /**
         * Build call for searchVoids
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VoidSearchVoidsRequest voidSearchVoidsRequest = buildBodyParams();
            return searchVoidsCall(exportable, pageNumber, pageSize, voidSearchVoidsRequest, _callback);
        }

        private VoidSearchVoidsRequest buildBodyParams() {
            VoidSearchVoidsRequest voidSearchVoidsRequest = new VoidSearchVoidsRequest();
            voidSearchVoidsRequest.merchantGuid(this.merchantGuid);
            voidSearchVoidsRequest.voidReason(this.voidReason);
            voidSearchVoidsRequest.status(this.status);
            voidSearchVoidsRequest.timeStampFrom(this.timeStampFrom);
            voidSearchVoidsRequest.timeStampTo(this.timeStampTo);
            return voidSearchVoidsRequest;
        }

        /**
         * Execute searchVoids request
         * @return VoidSearchVoidsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public VoidSearchVoidsResponse execute() throws ApiException {
            VoidSearchVoidsRequest voidSearchVoidsRequest = buildBodyParams();
            ApiResponse<VoidSearchVoidsResponse> localVarResp = searchVoidsWithHttpInfo(exportable, pageNumber, pageSize, voidSearchVoidsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchVoids request with HTTP info returned
         * @return ApiResponse&lt;VoidSearchVoidsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoidSearchVoidsResponse> executeWithHttpInfo() throws ApiException {
            VoidSearchVoidsRequest voidSearchVoidsRequest = buildBodyParams();
            return searchVoidsWithHttpInfo(exportable, pageNumber, pageSize, voidSearchVoidsRequest);
        }

        /**
         * Execute searchVoids request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoidSearchVoidsResponse> _callback) throws ApiException {
            VoidSearchVoidsRequest voidSearchVoidsRequest = buildBodyParams();
            return searchVoidsAsync(exportable, pageNumber, pageSize, voidSearchVoidsRequest, _callback);
        }
    }

    /**
     * Search voids
     * This endpoint searches sales voids.
     * @param exportable True or False. It means if you want results exportable to CSV. (required)
     * @param pageNumber Int. Number of page of the results. Default is 1 (Page size default is 500). (required)
     * @param pageSize Int. Size of each page of the results. Default is 500. (required)
     * @return SearchVoidsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SearchVoidsRequestBuilder searchVoids(String exportable, Integer pageNumber, String pageSize) throws IllegalArgumentException {
        if (exportable == null) throw new IllegalArgumentException("\"exportable\" is required but got null");
            

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
            

        return new SearchVoidsRequestBuilder(exportable, pageNumber, pageSize);
    }
}
