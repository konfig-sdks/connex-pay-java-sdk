/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CancellationEntireTripCancellationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CancellationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CancellationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CancellationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call entireTripCancellationCall(CancellationEntireTripCancellationRequest cancellationEntireTripCancellationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancellationEntireTripCancellationRequest;

        // create path and map variables
        String localVarPath = "/api/v1/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entireTripCancellationValidateBeforeCall(CancellationEntireTripCancellationRequest cancellationEntireTripCancellationRequest, final ApiCallback _callback) throws ApiException {
        return entireTripCancellationCall(cancellationEntireTripCancellationRequest, _callback);

    }


    private ApiResponse<String> entireTripCancellationWithHttpInfo(CancellationEntireTripCancellationRequest cancellationEntireTripCancellationRequest) throws ApiException {
        okhttp3.Call localVarCall = entireTripCancellationValidateBeforeCall(cancellationEntireTripCancellationRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call entireTripCancellationAsync(CancellationEntireTripCancellationRequest cancellationEntireTripCancellationRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = entireTripCancellationValidateBeforeCall(cancellationEntireTripCancellationRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EntireTripCancellationRequestBuilder {
        private final String deviceGuid;
        private final String saleGuid;
        private String sequenceNumber;
        private String voidReason;

        private EntireTripCancellationRequestBuilder(String deviceGuid, String saleGuid) {
            this.deviceGuid = deviceGuid;
            this.saleGuid = saleGuid;
        }

        /**
         * Set sequenceNumber
         * @param sequenceNumber Transaction sequence number within client environment. Provide a unique SequenceNumber for each new request. If the same value is sent within 30 minutes it will be considered a duplicate request. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric. (optional)
         * @return EntireTripCancellationRequestBuilder
         */
        public EntireTripCancellationRequestBuilder sequenceNumber(String sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }
        
        /**
         * Set voidReason
         * @param voidReason Indicates the reason the transaction was voided (optional)
         * @return EntireTripCancellationRequestBuilder
         */
        public EntireTripCancellationRequestBuilder voidReason(String voidReason) {
            this.voidReason = voidReason;
            return this;
        }
        
        /**
         * Build call for entireTripCancellation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancellationEntireTripCancellationRequest cancellationEntireTripCancellationRequest = buildBodyParams();
            return entireTripCancellationCall(cancellationEntireTripCancellationRequest, _callback);
        }

        private CancellationEntireTripCancellationRequest buildBodyParams() {
            CancellationEntireTripCancellationRequest cancellationEntireTripCancellationRequest = new CancellationEntireTripCancellationRequest();
            cancellationEntireTripCancellationRequest.deviceGuid(this.deviceGuid);
            cancellationEntireTripCancellationRequest.saleGuid(this.saleGuid);
            cancellationEntireTripCancellationRequest.sequenceNumber(this.sequenceNumber);
            cancellationEntireTripCancellationRequest.voidReason(this.voidReason);
            return cancellationEntireTripCancellationRequest;
        }

        /**
         * Execute entireTripCancellation request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            CancellationEntireTripCancellationRequest cancellationEntireTripCancellationRequest = buildBodyParams();
            ApiResponse<String> localVarResp = entireTripCancellationWithHttpInfo(cancellationEntireTripCancellationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute entireTripCancellation request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            CancellationEntireTripCancellationRequest cancellationEntireTripCancellationRequest = buildBodyParams();
            return entireTripCancellationWithHttpInfo(cancellationEntireTripCancellationRequest);
        }

        /**
         * Execute entireTripCancellation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            CancellationEntireTripCancellationRequest cancellationEntireTripCancellationRequest = buildBodyParams();
            return entireTripCancellationAsync(cancellationEntireTripCancellationRequest, _callback);
        }
    }

    /**
     * Cancel
     * The Cancel route should be used in the event the entire trip/booking (sale &amp; purchase) require cancellation. In this case, the traveler/cardholder would be due a refund from the sale and the Virtual Card would be terminated to prevent the travel supplier from authorizing the Virtual Card.
     * @return EntireTripCancellationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public EntireTripCancellationRequestBuilder entireTripCancellation(String deviceGuid, String saleGuid) throws IllegalArgumentException {
        if (deviceGuid == null) throw new IllegalArgumentException("\"deviceGuid\" is required but got null");
            

        if (saleGuid == null) throw new IllegalArgumentException("\"saleGuid\" is required but got null");
            

        return new EntireTripCancellationRequestBuilder(deviceGuid, saleGuid);
    }
}
