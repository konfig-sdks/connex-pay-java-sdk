/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.ReturnItemRequestRequest;
import com.konfigthis.client.model.ReturnItemRequestRequestReturnRetryCard;
import com.konfigthis.client.model.ReturnItemRequestResponse;
import com.konfigthis.client.model.ReturnSearchSaleReturnsRequest;
import com.konfigthis.client.model.ReturnSearchSaleReturnsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReturnApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReturnApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReturnApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call itemRequestCall(ReturnItemRequestRequest returnItemRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnItemRequestRequest;

        // create path and map variables
        String localVarPath = "/api/v1/returns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemRequestValidateBeforeCall(ReturnItemRequestRequest returnItemRequestRequest, final ApiCallback _callback) throws ApiException {
        return itemRequestCall(returnItemRequestRequest, _callback);

    }


    private ApiResponse<ReturnItemRequestResponse> itemRequestWithHttpInfo(ReturnItemRequestRequest returnItemRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = itemRequestValidateBeforeCall(returnItemRequestRequest, null);
        Type localVarReturnType = new TypeToken<ReturnItemRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call itemRequestAsync(ReturnItemRequestRequest returnItemRequestRequest, final ApiCallback<ReturnItemRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemRequestValidateBeforeCall(returnItemRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<ReturnItemRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ItemRequestRequestBuilder {
        private final String deviceGuid;
        private final Float amount;
        private String saleGuid;
        private Integer saleReferenceNumber;
        private String sequenceNumber;
        private ReturnItemRequestRequestReturnRetryCard returnRetryCard;

        private ItemRequestRequestBuilder(String deviceGuid, Float amount) {
            this.deviceGuid = deviceGuid;
            this.amount = amount;
        }

        /**
         * Set saleGuid
         * @param saleGuid Mandatory when SaleReferenceNumber field is not sent. Sale&#39;s Guid. (optional)
         * @return ItemRequestRequestBuilder
         */
        public ItemRequestRequestBuilder saleGuid(String saleGuid) {
            this.saleGuid = saleGuid;
            return this;
        }
        
        /**
         * Set saleReferenceNumber
         * @param saleReferenceNumber Mandatory when SaleGuid field is not sent. Sale&#39;s Reference Number (optional)
         * @return ItemRequestRequestBuilder
         */
        public ItemRequestRequestBuilder saleReferenceNumber(Integer saleReferenceNumber) {
            this.saleReferenceNumber = saleReferenceNumber;
            return this;
        }
        
        /**
         * Set sequenceNumber
         * @param sequenceNumber Transaction sequence number within client environment. Provide a unique SequenceNumber for each new request. If the same value is sent within 30 minutes it will be considered a duplicate request. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric. (optional)
         * @return ItemRequestRequestBuilder
         */
        public ItemRequestRequestBuilder sequenceNumber(String sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }
        
        /**
         * Set returnRetryCard
         * @param returnRetryCard  (optional)
         * @return ItemRequestRequestBuilder
         */
        public ItemRequestRequestBuilder returnRetryCard(ReturnItemRequestRequestReturnRetryCard returnRetryCard) {
            this.returnRetryCard = returnRetryCard;
            return this;
        }
        
        /**
         * Build call for itemRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReturnItemRequestRequest returnItemRequestRequest = buildBodyParams();
            return itemRequestCall(returnItemRequestRequest, _callback);
        }

        private ReturnItemRequestRequest buildBodyParams() {
            ReturnItemRequestRequest returnItemRequestRequest = new ReturnItemRequestRequest();
            returnItemRequestRequest.deviceGuid(this.deviceGuid);
            returnItemRequestRequest.saleGuid(this.saleGuid);
            returnItemRequestRequest.saleReferenceNumber(this.saleReferenceNumber);
            returnItemRequestRequest.amount(this.amount);
            returnItemRequestRequest.sequenceNumber(this.sequenceNumber);
            returnItemRequestRequest.returnRetryCard(this.returnRetryCard);
            return returnItemRequestRequest;
        }

        /**
         * Execute itemRequest request
         * @return ReturnItemRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ReturnItemRequestResponse execute() throws ApiException {
            ReturnItemRequestRequest returnItemRequestRequest = buildBodyParams();
            ApiResponse<ReturnItemRequestResponse> localVarResp = itemRequestWithHttpInfo(returnItemRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute itemRequest request with HTTP info returned
         * @return ApiResponse&lt;ReturnItemRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReturnItemRequestResponse> executeWithHttpInfo() throws ApiException {
            ReturnItemRequestRequest returnItemRequestRequest = buildBodyParams();
            return itemRequestWithHttpInfo(returnItemRequestRequest);
        }

        /**
         * Execute itemRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReturnItemRequestResponse> _callback) throws ApiException {
            ReturnItemRequestRequest returnItemRequestRequest = buildBodyParams();
            return itemRequestAsync(returnItemRequestRequest, _callback);
        }
    }

    /**
     * Return
     * 
     * @return ItemRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ItemRequestRequestBuilder itemRequest(String deviceGuid, Float amount) throws IllegalArgumentException {
        if (deviceGuid == null) throw new IllegalArgumentException("\"deviceGuid\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new ItemRequestRequestBuilder(deviceGuid, amount);
    }
    private okhttp3.Call searchSaleReturnsCall(String exportable, Integer pageNumber, String pageSize, ReturnSearchSaleReturnsRequest returnSearchSaleReturnsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = returnSearchSaleReturnsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/Search/Returns/{exportable}/{pageNumber}/{pageSize}"
            .replace("{" + "Exportable" + "}", localVarApiClient.escapeString(exportable.toString()))
            .replace("{" + "PageNumber" + "}", localVarApiClient.escapeString(pageNumber.toString()))
            .replace("{" + "PageSize" + "}", localVarApiClient.escapeString(pageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSaleReturnsValidateBeforeCall(String exportable, Integer pageNumber, String pageSize, ReturnSearchSaleReturnsRequest returnSearchSaleReturnsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportable' is set
        if (exportable == null) {
            throw new ApiException("Missing the required parameter 'exportable' when calling searchSaleReturns(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling searchSaleReturns(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling searchSaleReturns(Async)");
        }

        return searchSaleReturnsCall(exportable, pageNumber, pageSize, returnSearchSaleReturnsRequest, _callback);

    }


    private ApiResponse<ReturnSearchSaleReturnsResponse> searchSaleReturnsWithHttpInfo(String exportable, Integer pageNumber, String pageSize, ReturnSearchSaleReturnsRequest returnSearchSaleReturnsRequest) throws ApiException {
        okhttp3.Call localVarCall = searchSaleReturnsValidateBeforeCall(exportable, pageNumber, pageSize, returnSearchSaleReturnsRequest, null);
        Type localVarReturnType = new TypeToken<ReturnSearchSaleReturnsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchSaleReturnsAsync(String exportable, Integer pageNumber, String pageSize, ReturnSearchSaleReturnsRequest returnSearchSaleReturnsRequest, final ApiCallback<ReturnSearchSaleReturnsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSaleReturnsValidateBeforeCall(exportable, pageNumber, pageSize, returnSearchSaleReturnsRequest, _callback);
        Type localVarReturnType = new TypeToken<ReturnSearchSaleReturnsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchSaleReturnsRequestBuilder {
        private final String exportable;
        private final Integer pageNumber;
        private final String pageSize;
        private String merchantGuid;
        private Float amountFrom;
        private Float amountTo;
        private String cardHolderName;
        private String status;
        private LocalDate timeStampFrom;
        private LocalDate timeStampTo;

        private SearchSaleReturnsRequestBuilder(String exportable, Integer pageNumber, String pageSize) {
            this.exportable = exportable;
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
        }

        /**
         * Set merchantGuid
         * @param merchantGuid Merchant’s Guid. (optional, default to Mandatory)
         * @return SearchSaleReturnsRequestBuilder
         */
        public SearchSaleReturnsRequestBuilder merchantGuid(String merchantGuid) {
            this.merchantGuid = merchantGuid;
            return this;
        }
        
        /**
         * Set amountFrom
         * @param amountFrom Amount of the transaction. Min. amt.: $0.50 (optional)
         * @return SearchSaleReturnsRequestBuilder
         */
        public SearchSaleReturnsRequestBuilder amountFrom(Float amountFrom) {
            this.amountFrom = amountFrom;
            return this;
        }
        
        /**
         * Set amountTo
         * @param amountTo Amount of the transaction. Min. amt.: $0.50 (optional)
         * @return SearchSaleReturnsRequestBuilder
         */
        public SearchSaleReturnsRequestBuilder amountTo(Float amountTo) {
            this.amountTo = amountTo;
            return this;
        }
        
        /**
         * Set cardHolderName
         * @param cardHolderName Cardholder’s name. Providing information in this field allows a user of the ConnexPay portal to search for a transaction using the cardholder name. (optional, default to Optional)
         * @return SearchSaleReturnsRequestBuilder
         */
        public SearchSaleReturnsRequestBuilder cardHolderName(String cardHolderName) {
            this.cardHolderName = cardHolderName;
            return this;
        }
        
        /**
         * Set status
         * @param status Return’s status.  Allowed values:  1. Transaction - Approved 2. Transaction - Declined 3. Transaction - Created - Local 4. Transaction - Created - Error: Processor not reached 5. Transaction - Processor Error 6. Transaction - Approved - Warning (optional, default to Optional)
         * @return SearchSaleReturnsRequestBuilder
         */
        public SearchSaleReturnsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set timeStampFrom
         * @param timeStampFrom Return’s TimeStamp. (optional)
         * @return SearchSaleReturnsRequestBuilder
         */
        public SearchSaleReturnsRequestBuilder timeStampFrom(LocalDate timeStampFrom) {
            this.timeStampFrom = timeStampFrom;
            return this;
        }
        
        /**
         * Set timeStampTo
         * @param timeStampTo Return’s TimeStamp. (optional)
         * @return SearchSaleReturnsRequestBuilder
         */
        public SearchSaleReturnsRequestBuilder timeStampTo(LocalDate timeStampTo) {
            this.timeStampTo = timeStampTo;
            return this;
        }
        
        /**
         * Build call for searchSaleReturns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReturnSearchSaleReturnsRequest returnSearchSaleReturnsRequest = buildBodyParams();
            return searchSaleReturnsCall(exportable, pageNumber, pageSize, returnSearchSaleReturnsRequest, _callback);
        }

        private ReturnSearchSaleReturnsRequest buildBodyParams() {
            ReturnSearchSaleReturnsRequest returnSearchSaleReturnsRequest = new ReturnSearchSaleReturnsRequest();
            returnSearchSaleReturnsRequest.merchantGuid(this.merchantGuid);
            returnSearchSaleReturnsRequest.amountFrom(this.amountFrom);
            returnSearchSaleReturnsRequest.amountTo(this.amountTo);
            returnSearchSaleReturnsRequest.cardHolderName(this.cardHolderName);
            returnSearchSaleReturnsRequest.status(this.status);
            returnSearchSaleReturnsRequest.timeStampFrom(this.timeStampFrom);
            returnSearchSaleReturnsRequest.timeStampTo(this.timeStampTo);
            return returnSearchSaleReturnsRequest;
        }

        /**
         * Execute searchSaleReturns request
         * @return ReturnSearchSaleReturnsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ReturnSearchSaleReturnsResponse execute() throws ApiException {
            ReturnSearchSaleReturnsRequest returnSearchSaleReturnsRequest = buildBodyParams();
            ApiResponse<ReturnSearchSaleReturnsResponse> localVarResp = searchSaleReturnsWithHttpInfo(exportable, pageNumber, pageSize, returnSearchSaleReturnsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchSaleReturns request with HTTP info returned
         * @return ApiResponse&lt;ReturnSearchSaleReturnsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReturnSearchSaleReturnsResponse> executeWithHttpInfo() throws ApiException {
            ReturnSearchSaleReturnsRequest returnSearchSaleReturnsRequest = buildBodyParams();
            return searchSaleReturnsWithHttpInfo(exportable, pageNumber, pageSize, returnSearchSaleReturnsRequest);
        }

        /**
         * Execute searchSaleReturns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReturnSearchSaleReturnsResponse> _callback) throws ApiException {
            ReturnSearchSaleReturnsRequest returnSearchSaleReturnsRequest = buildBodyParams();
            return searchSaleReturnsAsync(exportable, pageNumber, pageSize, returnSearchSaleReturnsRequest, _callback);
        }
    }

    /**
     * Search returns
     * This endpoint searches sale returns.
     * @param exportable True or False. It means if you want results exportable to CSV. (required)
     * @param pageNumber Int. Number of page of the results. Default is 1 (Page size default is 500). (required)
     * @param pageSize Int. Size of each page of the results. Default is 500. (required)
     * @return SearchSaleReturnsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public SearchSaleReturnsRequestBuilder searchSaleReturns(String exportable, Integer pageNumber, String pageSize) throws IllegalArgumentException {
        if (exportable == null) throw new IllegalArgumentException("\"exportable\" is required but got null");
            

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
            

        return new SearchSaleReturnsRequestBuilder(exportable, pageNumber, pageSize);
    }
}
