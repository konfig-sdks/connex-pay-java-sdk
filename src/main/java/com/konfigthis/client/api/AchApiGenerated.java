/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AchCreateCreditPaymentRequest;
import com.konfigthis.client.model.AchCreateCreditPaymentRequestAccountHolder;
import com.konfigthis.client.model.AchCreateCreditPaymentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AchApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AchApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AchApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCreditPaymentCall(AchCreateCreditPaymentRequest achCreateCreditPaymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = achCreateCreditPaymentRequest;

        // create path and map variables
        String localVarPath = "/api/v1/IssueACH/IssueLite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCreditPaymentValidateBeforeCall(AchCreateCreditPaymentRequest achCreateCreditPaymentRequest, final ApiCallback _callback) throws ApiException {
        return createCreditPaymentCall(achCreateCreditPaymentRequest, _callback);

    }


    private ApiResponse<AchCreateCreditPaymentResponse> createCreditPaymentWithHttpInfo(AchCreateCreditPaymentRequest achCreateCreditPaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = createCreditPaymentValidateBeforeCall(achCreateCreditPaymentRequest, null);
        Type localVarReturnType = new TypeToken<AchCreateCreditPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCreditPaymentAsync(AchCreateCreditPaymentRequest achCreateCreditPaymentRequest, final ApiCallback<AchCreateCreditPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCreditPaymentValidateBeforeCall(achCreateCreditPaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<AchCreateCreditPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCreditPaymentRequestBuilder {
        private final String merchantGuid;
        private final Float amount;
        private final String payeeName;
        private final AchCreateCreditPaymentRequestAccountHolder accountHolder;
        private String statementCompanyName;
        private String description;
        private String orderNumber;
        private String sequenceNumber;
        private String associationId;

        private CreateCreditPaymentRequestBuilder(String merchantGuid, Float amount, String payeeName, AchCreateCreditPaymentRequestAccountHolder accountHolder) {
            this.merchantGuid = merchantGuid;
            this.amount = amount;
            this.payeeName = payeeName;
            this.accountHolder = accountHolder;
        }

        /**
         * Set statementCompanyName
         * @param statementCompanyName Company Name to display Bank Statement. The first 16 characters will display on the bank account holders statement. (optional, default to Merchant Alias)
         * @return CreateCreditPaymentRequestBuilder
         */
        public CreateCreditPaymentRequestBuilder statementCompanyName(String statementCompanyName) {
            this.statementCompanyName = statementCompanyName;
            return this;
        }
        
        /**
         * Set description
         * @param description For banks who accept statement descriptors, the first 10 characters will display on the bank account holders statement. (optional)
         * @return CreateCreditPaymentRequestBuilder
         */
        public CreateCreditPaymentRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set orderNumber
         * @param orderNumber This is the most common number you&#39;ll see throughout the ConnexPay Portal.  Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field.  The maximum length is 50 alpha-numeric characters. (optional, default to 7H2345)
         * @return CreateCreditPaymentRequestBuilder
         */
        public CreateCreditPaymentRequestBuilder orderNumber(String orderNumber) {
            this.orderNumber = orderNumber;
            return this;
        }
        
        /**
         * Set sequenceNumber
         * @param sequenceNumber Transaction sequence number within client environment. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric. (optional)
         * @return CreateCreditPaymentRequestBuilder
         */
        public CreateCreditPaymentRequestBuilder sequenceNumber(String sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }
        
        /**
         * Set associationId
         * @param associationId This parameter allows you to input an up to 100 character association ID that can be used to tie this ACH Purchase to a sale (Association ID also needs to be included on the sale request). This is useful if you issue the ACH purchase prior to creating the sale that associates to it. (optional)
         * @return CreateCreditPaymentRequestBuilder
         */
        public CreateCreditPaymentRequestBuilder associationId(String associationId) {
            this.associationId = associationId;
            return this;
        }
        
        /**
         * Build call for createCreditPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AchCreateCreditPaymentRequest achCreateCreditPaymentRequest = buildBodyParams();
            return createCreditPaymentCall(achCreateCreditPaymentRequest, _callback);
        }

        private AchCreateCreditPaymentRequest buildBodyParams() {
            AchCreateCreditPaymentRequest achCreateCreditPaymentRequest = new AchCreateCreditPaymentRequest();
            achCreateCreditPaymentRequest.merchantGuid(this.merchantGuid);
            achCreateCreditPaymentRequest.amount(this.amount);
            achCreateCreditPaymentRequest.payeeName(this.payeeName);
            achCreateCreditPaymentRequest.statementCompanyName(this.statementCompanyName);
            achCreateCreditPaymentRequest.description(this.description);
            achCreateCreditPaymentRequest.accountHolder(this.accountHolder);
            achCreateCreditPaymentRequest.orderNumber(this.orderNumber);
            achCreateCreditPaymentRequest.sequenceNumber(this.sequenceNumber);
            achCreateCreditPaymentRequest.associationId(this.associationId);
            return achCreateCreditPaymentRequest;
        }

        /**
         * Execute createCreditPayment request
         * @return AchCreateCreditPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public AchCreateCreditPaymentResponse execute() throws ApiException {
            AchCreateCreditPaymentRequest achCreateCreditPaymentRequest = buildBodyParams();
            ApiResponse<AchCreateCreditPaymentResponse> localVarResp = createCreditPaymentWithHttpInfo(achCreateCreditPaymentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCreditPayment request with HTTP info returned
         * @return ApiResponse&lt;AchCreateCreditPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AchCreateCreditPaymentResponse> executeWithHttpInfo() throws ApiException {
            AchCreateCreditPaymentRequest achCreateCreditPaymentRequest = buildBodyParams();
            return createCreditPaymentWithHttpInfo(achCreateCreditPaymentRequest);
        }

        /**
         * Execute createCreditPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AchCreateCreditPaymentResponse> _callback) throws ApiException {
            AchCreateCreditPaymentRequest achCreateCreditPaymentRequest = buildBodyParams();
            return createCreditPaymentAsync(achCreateCreditPaymentRequest, _callback);
        }
    }

    /**
     * Issue ACH Lite
     * This endpoint creates an ACH Credit payment that does not have an associated sale. This allows ConnexPay Lite clients to submit the issue payment call only.
     * @return CreateCreditPaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateCreditPaymentRequestBuilder createCreditPayment(String merchantGuid, Float amount, String payeeName, AchCreateCreditPaymentRequestAccountHolder accountHolder) throws IllegalArgumentException {
        if (merchantGuid == null) throw new IllegalArgumentException("\"merchantGuid\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (payeeName == null) throw new IllegalArgumentException("\"payeeName\" is required but got null");
            

        if (accountHolder == null) throw new IllegalArgumentException("\"accountHolder\" is required but got null");
        return new CreateCreditPaymentRequestBuilder(merchantGuid, amount, payeeName, accountHolder);
    }
}
