/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TokenRequestHppTokenResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TokenRequestHppTokenResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount = 0;

  public static final String SERIALIZED_NAME_RESULT_REDIRECT_URL = "resultRedirectUrl";
  @SerializedName(SERIALIZED_NAME_RESULT_REDIRECT_URL)
  private String resultRedirectUrl;

  public static final String SERIALIZED_NAME_TEMP_TOKEN = "tempToken";
  @SerializedName(SERIALIZED_NAME_TEMP_TOKEN)
  private String tempToken;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private String expiration;

  public static final String SERIALIZED_NAME_LOGO_URL = "logoUrl";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public TokenRequestHppTokenResponse() {
  }

  public TokenRequestHppTokenResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hundred Dollar Trip", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TokenRequestHppTokenResponse merchantName(String merchantName) {
    
    
    
    
    this.merchantName = merchantName;
    return this;
  }

   /**
   * Get merchantName
   * @return merchantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACME", value = "")

  public String getMerchantName() {
    return merchantName;
  }


  public void setMerchantName(String merchantName) {
    
    
    
    this.merchantName = merchantName;
  }


  public TokenRequestHppTokenResponse amount(Integer amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    
    
    
    this.amount = amount;
  }


  public TokenRequestHppTokenResponse resultRedirectUrl(String resultRedirectUrl) {
    
    
    
    
    this.resultRedirectUrl = resultRedirectUrl;
    return this;
  }

   /**
   * Get resultRedirectUrl
   * @return resultRedirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://sandboxsales.connexpay.com/#!/HostedPaymentResult", value = "")

  public String getResultRedirectUrl() {
    return resultRedirectUrl;
  }


  public void setResultRedirectUrl(String resultRedirectUrl) {
    
    
    
    this.resultRedirectUrl = resultRedirectUrl;
  }


  public TokenRequestHppTokenResponse tempToken(String tempToken) {
    
    
    
    
    this.tempToken = tempToken;
    return this;
  }

   /**
   * Get tempToken
   * @return tempToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8263d54a-b61b-4601-a4a8-f7231565b87e", value = "")

  public String getTempToken() {
    return tempToken;
  }


  public void setTempToken(String tempToken) {
    
    
    
    this.tempToken = tempToken;
  }


  public TokenRequestHppTokenResponse expiration(String expiration) {
    
    
    
    
    this.expiration = expiration;
    return this;
  }

   /**
   * Get expiration
   * @return expiration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-11-20T14:35:59.14", value = "")

  public String getExpiration() {
    return expiration;
  }


  public void setExpiration(String expiration) {
    
    
    
    this.expiration = expiration;
  }


  public TokenRequestHppTokenResponse logoUrl(String logoUrl) {
    
    
    
    
    this.logoUrl = logoUrl;
    return this;
  }

   /**
   * Get logoUrl
   * @return logoUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://connexpay.com/wp-content/uploads/2018/10/newlogo.png", value = "")

  public String getLogoUrl() {
    return logoUrl;
  }


  public void setLogoUrl(String logoUrl) {
    
    
    
    this.logoUrl = logoUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TokenRequestHppTokenResponse instance itself
   */
  public TokenRequestHppTokenResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenRequestHppTokenResponse tokenRequestHppTokenResponse = (TokenRequestHppTokenResponse) o;
    return Objects.equals(this.description, tokenRequestHppTokenResponse.description) &&
        Objects.equals(this.merchantName, tokenRequestHppTokenResponse.merchantName) &&
        Objects.equals(this.amount, tokenRequestHppTokenResponse.amount) &&
        Objects.equals(this.resultRedirectUrl, tokenRequestHppTokenResponse.resultRedirectUrl) &&
        Objects.equals(this.tempToken, tokenRequestHppTokenResponse.tempToken) &&
        Objects.equals(this.expiration, tokenRequestHppTokenResponse.expiration) &&
        Objects.equals(this.logoUrl, tokenRequestHppTokenResponse.logoUrl)&&
        Objects.equals(this.additionalProperties, tokenRequestHppTokenResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, merchantName, amount, resultRedirectUrl, tempToken, expiration, logoUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenRequestHppTokenResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    resultRedirectUrl: ").append(toIndentedString(resultRedirectUrl)).append("\n");
    sb.append("    tempToken: ").append(toIndentedString(tempToken)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("merchantName");
    openapiFields.add("amount");
    openapiFields.add("resultRedirectUrl");
    openapiFields.add("tempToken");
    openapiFields.add("expiration");
    openapiFields.add("logoUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TokenRequestHppTokenResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TokenRequestHppTokenResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenRequestHppTokenResponse is not found in the empty JSON string", TokenRequestHppTokenResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("merchantName") != null && !jsonObj.get("merchantName").isJsonNull()) && !jsonObj.get("merchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantName").toString()));
      }
      if ((jsonObj.get("resultRedirectUrl") != null && !jsonObj.get("resultRedirectUrl").isJsonNull()) && !jsonObj.get("resultRedirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultRedirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultRedirectUrl").toString()));
      }
      if ((jsonObj.get("tempToken") != null && !jsonObj.get("tempToken").isJsonNull()) && !jsonObj.get("tempToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tempToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tempToken").toString()));
      }
      if ((jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull()) && !jsonObj.get("expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration").toString()));
      }
      if ((jsonObj.get("logoUrl") != null && !jsonObj.get("logoUrl").isJsonNull()) && !jsonObj.get("logoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenRequestHppTokenResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenRequestHppTokenResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenRequestHppTokenResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenRequestHppTokenResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenRequestHppTokenResponse>() {
           @Override
           public void write(JsonWriter out, TokenRequestHppTokenResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenRequestHppTokenResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TokenRequestHppTokenResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenRequestHppTokenResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenRequestHppTokenResponse
  * @throws IOException if the JSON string is invalid with respect to TokenRequestHppTokenResponse
  */
  public static TokenRequestHppTokenResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenRequestHppTokenResponse.class);
  }

 /**
  * Convert an instance of TokenRequestHppTokenResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

