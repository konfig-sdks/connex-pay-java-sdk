/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EU Clients: 3D secure parameters required to be submitted with Create Sale to initiate 3D secure authentication via ConnexPay&#39;s interface.   A signed contract for 3D Secure is required in order to use this feature.
 */
@ApiModel(description = "EU Clients: 3D secure parameters required to be submitted with Create Sale to initiate 3D secure authentication via ConnexPay's interface.   A signed contract for 3D Secure is required in order to use this feature.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SaleCreateTransactionRequestBrowserData {
  public static final String SERIALIZED_NAME_ACCEPTANCE_HEADER = "AcceptanceHeader";
  @SerializedName(SERIALIZED_NAME_ACCEPTANCE_HEADER)
  private String acceptanceHeader;

  public static final String SERIALIZED_NAME_COLOR_DEPTH = "ColorDepth";
  @SerializedName(SERIALIZED_NAME_COLOR_DEPTH)
  private Integer colorDepth;

  public static final String SERIALIZED_NAME_JAVA_ENABLED = "JavaEnabled";
  @SerializedName(SERIALIZED_NAME_JAVA_ENABLED)
  private Boolean javaEnabled;

  public static final String SERIALIZED_NAME_SCREEN_HEIGHT = "ScreenHeight";
  @SerializedName(SERIALIZED_NAME_SCREEN_HEIGHT)
  private Integer screenHeight;

  public static final String SERIALIZED_NAME_SCREEN_WIDTH = "ScreenWidth";
  @SerializedName(SERIALIZED_NAME_SCREEN_WIDTH)
  private Integer screenWidth;

  public static final String SERIALIZED_NAME_TIME_ZONE_OFFSET = "TimeZoneOffset";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_OFFSET)
  private Integer timeZoneOffset;

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_REDIRECT_U_R_L = "RedirectURL";
  @SerializedName(SERIALIZED_NAME_REDIRECT_U_R_L)
  private String redirectURL;

  public static final String SERIALIZED_NAME_USER_AGENT_HEADER = "UserAgentHeader";
  @SerializedName(SERIALIZED_NAME_USER_AGENT_HEADER)
  private String userAgentHeader;

  public SaleCreateTransactionRequestBrowserData() {
  }

  public SaleCreateTransactionRequestBrowserData acceptanceHeader(String acceptanceHeader) {
    
    
    
    
    this.acceptanceHeader = acceptanceHeader;
    return this;
  }

   /**
   * Required.  Exact content of the http accept header.
   * @return acceptanceHeader
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Required.  Exact content of the http accept header.")

  public String getAcceptanceHeader() {
    return acceptanceHeader;
  }


  public void setAcceptanceHeader(String acceptanceHeader) {
    
    
    
    this.acceptanceHeader = acceptanceHeader;
  }


  public SaleCreateTransactionRequestBrowserData colorDepth(Integer colorDepth) {
    
    
    
    
    this.colorDepth = colorDepth;
    return this;
  }

   /**
   * Required. Value representing the bit depth of the color palette for displaying images, in bits per pixel.
   * @return colorDepth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Required. Value representing the bit depth of the color palette for displaying images, in bits per pixel.")

  public Integer getColorDepth() {
    return colorDepth;
  }


  public void setColorDepth(Integer colorDepth) {
    
    
    
    this.colorDepth = colorDepth;
  }


  public SaleCreateTransactionRequestBrowserData javaEnabled(Boolean javaEnabled) {
    
    
    
    
    this.javaEnabled = javaEnabled;
    return this;
  }

   /**
   * True or False response that represents ability of cardholder browser to execute Java
   * @return javaEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "True or False response that represents ability of cardholder browser to execute Java")

  public Boolean getJavaEnabled() {
    return javaEnabled;
  }


  public void setJavaEnabled(Boolean javaEnabled) {
    
    
    
    this.javaEnabled = javaEnabled;
  }


  public SaleCreateTransactionRequestBrowserData screenHeight(Integer screenHeight) {
    
    
    
    
    this.screenHeight = screenHeight;
    return this;
  }

   /**
   * Total height of the Cardholder&#39;s screen in pixels
   * @return screenHeight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Total height of the Cardholder's screen in pixels")

  public Integer getScreenHeight() {
    return screenHeight;
  }


  public void setScreenHeight(Integer screenHeight) {
    
    
    
    this.screenHeight = screenHeight;
  }


  public SaleCreateTransactionRequestBrowserData screenWidth(Integer screenWidth) {
    
    
    
    
    this.screenWidth = screenWidth;
    return this;
  }

   /**
   * Total width of the Cardholder&#39;s screen in pixels
   * @return screenWidth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Total width of the Cardholder's screen in pixels")

  public Integer getScreenWidth() {
    return screenWidth;
  }


  public void setScreenWidth(Integer screenWidth) {
    
    
    
    this.screenWidth = screenWidth;
  }


  public SaleCreateTransactionRequestBrowserData timeZoneOffset(Integer timeZoneOffset) {
    
    
    
    
    this.timeZoneOffset = timeZoneOffset;
    return this;
  }

   /**
   * Time Zone difference between browser time zone and UTC time, in hours.  Can be positive or negative.
   * @return timeZoneOffset
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Time Zone difference between browser time zone and UTC time, in hours.  Can be positive or negative.")

  public Integer getTimeZoneOffset() {
    return timeZoneOffset;
  }


  public void setTimeZoneOffset(Integer timeZoneOffset) {
    
    
    
    this.timeZoneOffset = timeZoneOffset;
  }


  public SaleCreateTransactionRequestBrowserData language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * Value representing the browser language as defined in IETF BCP47
   * @return language
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Value representing the browser language as defined in IETF BCP47")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public SaleCreateTransactionRequestBrowserData redirectURL(String redirectURL) {
    
    
    
    
    this.redirectURL = redirectURL;
    return this;
  }

   /**
   * The merchant URL to which the browser should be redirected after the challenge session.
   * @return redirectURL
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The merchant URL to which the browser should be redirected after the challenge session.")

  public String getRedirectURL() {
    return redirectURL;
  }


  public void setRedirectURL(String redirectURL) {
    
    
    
    this.redirectURL = redirectURL;
  }


  public SaleCreateTransactionRequestBrowserData userAgentHeader(String userAgentHeader) {
    
    
    
    
    this.userAgentHeader = userAgentHeader;
    return this;
  }

   /**
   * Exact content of the HTTP user-agent header.
   * @return userAgentHeader
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Exact content of the HTTP user-agent header.")

  public String getUserAgentHeader() {
    return userAgentHeader;
  }


  public void setUserAgentHeader(String userAgentHeader) {
    
    
    
    this.userAgentHeader = userAgentHeader;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SaleCreateTransactionRequestBrowserData instance itself
   */
  public SaleCreateTransactionRequestBrowserData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleCreateTransactionRequestBrowserData saleCreateTransactionRequestBrowserData = (SaleCreateTransactionRequestBrowserData) o;
    return Objects.equals(this.acceptanceHeader, saleCreateTransactionRequestBrowserData.acceptanceHeader) &&
        Objects.equals(this.colorDepth, saleCreateTransactionRequestBrowserData.colorDepth) &&
        Objects.equals(this.javaEnabled, saleCreateTransactionRequestBrowserData.javaEnabled) &&
        Objects.equals(this.screenHeight, saleCreateTransactionRequestBrowserData.screenHeight) &&
        Objects.equals(this.screenWidth, saleCreateTransactionRequestBrowserData.screenWidth) &&
        Objects.equals(this.timeZoneOffset, saleCreateTransactionRequestBrowserData.timeZoneOffset) &&
        Objects.equals(this.language, saleCreateTransactionRequestBrowserData.language) &&
        Objects.equals(this.redirectURL, saleCreateTransactionRequestBrowserData.redirectURL) &&
        Objects.equals(this.userAgentHeader, saleCreateTransactionRequestBrowserData.userAgentHeader)&&
        Objects.equals(this.additionalProperties, saleCreateTransactionRequestBrowserData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptanceHeader, colorDepth, javaEnabled, screenHeight, screenWidth, timeZoneOffset, language, redirectURL, userAgentHeader, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleCreateTransactionRequestBrowserData {\n");
    sb.append("    acceptanceHeader: ").append(toIndentedString(acceptanceHeader)).append("\n");
    sb.append("    colorDepth: ").append(toIndentedString(colorDepth)).append("\n");
    sb.append("    javaEnabled: ").append(toIndentedString(javaEnabled)).append("\n");
    sb.append("    screenHeight: ").append(toIndentedString(screenHeight)).append("\n");
    sb.append("    screenWidth: ").append(toIndentedString(screenWidth)).append("\n");
    sb.append("    timeZoneOffset: ").append(toIndentedString(timeZoneOffset)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    redirectURL: ").append(toIndentedString(redirectURL)).append("\n");
    sb.append("    userAgentHeader: ").append(toIndentedString(userAgentHeader)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcceptanceHeader");
    openapiFields.add("ColorDepth");
    openapiFields.add("JavaEnabled");
    openapiFields.add("ScreenHeight");
    openapiFields.add("ScreenWidth");
    openapiFields.add("TimeZoneOffset");
    openapiFields.add("Language");
    openapiFields.add("RedirectURL");
    openapiFields.add("UserAgentHeader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AcceptanceHeader");
    openapiRequiredFields.add("ColorDepth");
    openapiRequiredFields.add("JavaEnabled");
    openapiRequiredFields.add("ScreenHeight");
    openapiRequiredFields.add("ScreenWidth");
    openapiRequiredFields.add("TimeZoneOffset");
    openapiRequiredFields.add("Language");
    openapiRequiredFields.add("RedirectURL");
    openapiRequiredFields.add("UserAgentHeader");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SaleCreateTransactionRequestBrowserData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SaleCreateTransactionRequestBrowserData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaleCreateTransactionRequestBrowserData is not found in the empty JSON string", SaleCreateTransactionRequestBrowserData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SaleCreateTransactionRequestBrowserData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("AcceptanceHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AcceptanceHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AcceptanceHeader").toString()));
      }
      if (!jsonObj.get("Language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Language").toString()));
      }
      if (!jsonObj.get("RedirectURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RedirectURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RedirectURL").toString()));
      }
      if (!jsonObj.get("UserAgentHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserAgentHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserAgentHeader").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleCreateTransactionRequestBrowserData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaleCreateTransactionRequestBrowserData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleCreateTransactionRequestBrowserData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleCreateTransactionRequestBrowserData.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleCreateTransactionRequestBrowserData>() {
           @Override
           public void write(JsonWriter out, SaleCreateTransactionRequestBrowserData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleCreateTransactionRequestBrowserData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SaleCreateTransactionRequestBrowserData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SaleCreateTransactionRequestBrowserData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SaleCreateTransactionRequestBrowserData
  * @throws IOException if the JSON string is invalid with respect to SaleCreateTransactionRequestBrowserData
  */
  public static SaleCreateTransactionRequestBrowserData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleCreateTransactionRequestBrowserData.class);
  }

 /**
  * Convert an instance of SaleCreateTransactionRequestBrowserData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

