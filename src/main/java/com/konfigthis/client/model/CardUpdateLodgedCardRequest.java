/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CardUpdateLodgedCardRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CardUpdateLodgedCardRequest {
  public static final String SERIALIZED_NAME_USAGE_LIMIT = "UsageLimit";
  @SerializedName(SERIALIZED_NAME_USAGE_LIMIT)
  private Long usageLimit;

  public static final String SERIALIZED_NAME_AMOUNT_LIMIT = "AmountLimit";
  @SerializedName(SERIALIZED_NAME_AMOUNT_LIMIT)
  private Float amountLimit;

  public static final String SERIALIZED_NAME_LIMIT_WINDOW = "LimitWindow";
  @SerializedName(SERIALIZED_NAME_LIMIT_WINDOW)
  private String limitWindow;

  public static final String SERIALIZED_NAME_PURCHASE_TYPE = "PurchaseType";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TYPE)
  private String purchaseType;

  public static final String SERIALIZED_NAME_ACTIVATED = "Activated";
  @SerializedName(SERIALIZED_NAME_ACTIVATED)
  private Boolean activated;

  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "AssociationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_TERMINATE_DATE = "TerminateDate";
  @SerializedName(SERIALIZED_NAME_TERMINATE_DATE)
  private LocalDate terminateDate;

  public CardUpdateLodgedCardRequest() {
  }

  public CardUpdateLodgedCardRequest usageLimit(Long usageLimit) {
    
    
    
    
    this.usageLimit = usageLimit;
    return this;
  }

   /**
   * Security Control: Maximum number of times the card may be authorized. This is used in conjunction with the Limit Window; for example, if you specify a Usage Limit of 4 and a Limit Window of Monthly, the card can be authorized up to 4 times per month. The maximum allowed field value is 99, and if you do not provide a value the card will be considered unlimited. Authorization attempts exceeding the provided value will be declined.
   * @return usageLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Security Control: Maximum number of times the card may be authorized. This is used in conjunction with the Limit Window; for example, if you specify a Usage Limit of 4 and a Limit Window of Monthly, the card can be authorized up to 4 times per month. The maximum allowed field value is 99, and if you do not provide a value the card will be considered unlimited. Authorization attempts exceeding the provided value will be declined.")

  public Long getUsageLimit() {
    return usageLimit;
  }


  public void setUsageLimit(Long usageLimit) {
    
    
    
    this.usageLimit = usageLimit;
  }


  public CardUpdateLodgedCardRequest amountLimit(Float amountLimit) {
    
    
    
    
    this.amountLimit = amountLimit;
    return this;
  }

   /**
   * Security Control: Maximum dollar amount the card can be authorized and settled, which must be less than or equal to $1,000,000.00. The value must incorporate any anticipated overages such as currency conversion or taxes that a supplier may associate with the transaction. If a supplier attempts to authorize a card for more than the amount limit it will be declined.
   * @return amountLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Security Control: Maximum dollar amount the card can be authorized and settled, which must be less than or equal to $1,000,000.00. The value must incorporate any anticipated overages such as currency conversion or taxes that a supplier may associate with the transaction. If a supplier attempts to authorize a card for more than the amount limit it will be declined.")

  public Float getAmountLimit() {
    return amountLimit;
  }


  public void setAmountLimit(Float amountLimit) {
    
    
    
    this.amountLimit = amountLimit;
  }


  public CardUpdateLodgedCardRequest limitWindow(String limitWindow) {
    
    
    
    
    this.limitWindow = limitWindow;
    return this;
  }

   /**
   * This is the time period that both the UsageLimit and the AmountLimit applies. Options are: Day, Week, Month, Lifetime. For example AmountLimit is $500 and LimitWindow is \&quot;Week\&quot; then the card can be approved for $500 per week.
   * @return limitWindow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is the time period that both the UsageLimit and the AmountLimit applies. Options are: Day, Week, Month, Lifetime. For example AmountLimit is $500 and LimitWindow is \"Week\" then the card can be approved for $500 per week.")

  public String getLimitWindow() {
    return limitWindow;
  }


  public void setLimitWindow(String limitWindow) {
    
    
    
    this.limitWindow = limitWindow;
  }


  public CardUpdateLodgedCardRequest purchaseType(String purchaseType) {
    
    
    
    
    this.purchaseType = purchaseType;
    return this;
  }

   /**
   * Security Control: The industry where the virtual card will be utilized. For example, if value set to airline and the card is used at hotel, it will be declined. Available purchase type values are: &#39;01&#39; (Airline), &#39;02&#39; (Hotels and Resorts), &#39;03&#39; (Car Rental), &#39;04&#39; (Cable, Satellite, Television, and Radio Services),  &#39;05&#39; (Cruise Lines), &#39;11&#39; (Medical Services and Health Practitioners), &#39;21&#39; (Advertising Services), &#39;22&#39; (Misc Advertising and Business Services), &#39;23&#39; (Ticketing), &#39;31&#39; (Insurance Sales, Underwriting, and Premiums), &#39;91&#39; (Restaurants and Food Services), and &#39;93&#39; (Tax Payments). Leave this blank if you plan to utilize MID level controls.
   * @return purchaseType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Security Control: The industry where the virtual card will be utilized. For example, if value set to airline and the card is used at hotel, it will be declined. Available purchase type values are: '01' (Airline), '02' (Hotels and Resorts), '03' (Car Rental), '04' (Cable, Satellite, Television, and Radio Services),  '05' (Cruise Lines), '11' (Medical Services and Health Practitioners), '21' (Advertising Services), '22' (Misc Advertising and Business Services), '23' (Ticketing), '31' (Insurance Sales, Underwriting, and Premiums), '91' (Restaurants and Food Services), and '93' (Tax Payments). Leave this blank if you plan to utilize MID level controls.")

  public String getPurchaseType() {
    return purchaseType;
  }


  public void setPurchaseType(String purchaseType) {
    
    
    
    this.purchaseType = purchaseType;
  }


  public CardUpdateLodgedCardRequest activated(Boolean activated) {
    
    
    
    
    this.activated = activated;
    return this;
  }

   /**
   * True activates a lodged card. False suspends a lodged card.
   * @return activated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True activates a lodged card. False suspends a lodged card.")

  public Boolean getActivated() {
    return activated;
  }


  public void setActivated(Boolean activated) {
    
    
    
    this.activated = activated;
  }


  public CardUpdateLodgedCardRequest associationId(String associationId) {
    
    
    
    
    this.associationId = associationId;
    return this;
  }

   /**
   * Utilize the Association ID field to tie a lodged card to a sale or sales. For example, if you have several sales and one lodged card payment to a supplier, you can add association ID to the sales and the lodged card for downstream reporting.
   * @return associationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Utilize the Association ID field to tie a lodged card to a sale or sales. For example, if you have several sales and one lodged card payment to a supplier, you can add association ID to the sales and the lodged card for downstream reporting.")

  public String getAssociationId() {
    return associationId;
  }


  public void setAssociationId(String associationId) {
    
    
    
    this.associationId = associationId;
  }


  public CardUpdateLodgedCardRequest terminateDate(LocalDate terminateDate) {
    
    
    
    
    this.terminateDate = terminateDate;
    return this;
  }

   /**
   * The TerminateDate (YYYY-MM-DD format) is the date the Lodged Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the Lodged Card is expected to be processed. If a terminate date is not indicated, the card will be inactivated as of the expiration date. Note, Returns can still be processed on terminated Lodged Cards.
   * @return terminateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The TerminateDate (YYYY-MM-DD format) is the date the Lodged Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the Lodged Card is expected to be processed. If a terminate date is not indicated, the card will be inactivated as of the expiration date. Note, Returns can still be processed on terminated Lodged Cards.")

  public LocalDate getTerminateDate() {
    return terminateDate;
  }


  public void setTerminateDate(LocalDate terminateDate) {
    
    
    
    this.terminateDate = terminateDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CardUpdateLodgedCardRequest instance itself
   */
  public CardUpdateLodgedCardRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardUpdateLodgedCardRequest cardUpdateLodgedCardRequest = (CardUpdateLodgedCardRequest) o;
    return Objects.equals(this.usageLimit, cardUpdateLodgedCardRequest.usageLimit) &&
        Objects.equals(this.amountLimit, cardUpdateLodgedCardRequest.amountLimit) &&
        Objects.equals(this.limitWindow, cardUpdateLodgedCardRequest.limitWindow) &&
        Objects.equals(this.purchaseType, cardUpdateLodgedCardRequest.purchaseType) &&
        Objects.equals(this.activated, cardUpdateLodgedCardRequest.activated) &&
        Objects.equals(this.associationId, cardUpdateLodgedCardRequest.associationId) &&
        Objects.equals(this.terminateDate, cardUpdateLodgedCardRequest.terminateDate)&&
        Objects.equals(this.additionalProperties, cardUpdateLodgedCardRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usageLimit, amountLimit, limitWindow, purchaseType, activated, associationId, terminateDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardUpdateLodgedCardRequest {\n");
    sb.append("    usageLimit: ").append(toIndentedString(usageLimit)).append("\n");
    sb.append("    amountLimit: ").append(toIndentedString(amountLimit)).append("\n");
    sb.append("    limitWindow: ").append(toIndentedString(limitWindow)).append("\n");
    sb.append("    purchaseType: ").append(toIndentedString(purchaseType)).append("\n");
    sb.append("    activated: ").append(toIndentedString(activated)).append("\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    terminateDate: ").append(toIndentedString(terminateDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UsageLimit");
    openapiFields.add("AmountLimit");
    openapiFields.add("LimitWindow");
    openapiFields.add("PurchaseType");
    openapiFields.add("Activated");
    openapiFields.add("AssociationId");
    openapiFields.add("TerminateDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CardUpdateLodgedCardRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CardUpdateLodgedCardRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardUpdateLodgedCardRequest is not found in the empty JSON string", CardUpdateLodgedCardRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("LimitWindow") != null && !jsonObj.get("LimitWindow").isJsonNull()) && !jsonObj.get("LimitWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LimitWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LimitWindow").toString()));
      }
      if ((jsonObj.get("PurchaseType") != null && !jsonObj.get("PurchaseType").isJsonNull()) && !jsonObj.get("PurchaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PurchaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PurchaseType").toString()));
      }
      if ((jsonObj.get("AssociationId") != null && !jsonObj.get("AssociationId").isJsonNull()) && !jsonObj.get("AssociationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssociationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssociationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardUpdateLodgedCardRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardUpdateLodgedCardRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardUpdateLodgedCardRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardUpdateLodgedCardRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CardUpdateLodgedCardRequest>() {
           @Override
           public void write(JsonWriter out, CardUpdateLodgedCardRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CardUpdateLodgedCardRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CardUpdateLodgedCardRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardUpdateLodgedCardRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardUpdateLodgedCardRequest
  * @throws IOException if the JSON string is invalid with respect to CardUpdateLodgedCardRequest
  */
  public static CardUpdateLodgedCardRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardUpdateLodgedCardRequest.class);
  }

 /**
  * Convert an instance of CardUpdateLodgedCardRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

