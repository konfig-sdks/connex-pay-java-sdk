/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DtoPayments;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DtoPayout
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DtoPayout {
  public static final String SERIALIZED_NAME_PAYOUT_GUID = "payoutGuid";
  @SerializedName(SERIALIZED_NAME_PAYOUT_GUID)
  private UUID payoutGuid;

  public static final String SERIALIZED_NAME_PAYOUT_REFERENCE_TOKEN = "payoutReferenceToken";
  @SerializedName(SERIALIZED_NAME_PAYOUT_REFERENCE_TOKEN)
  private String payoutReferenceToken;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "associationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_LABEL_IDS = "labelIds";
  @SerializedName(SERIALIZED_NAME_LABEL_IDS)
  private List<Integer> labelIds = null;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<DtoPayments> payments = null;

  public DtoPayout() {
  }

  public DtoPayout payoutGuid(UUID payoutGuid) {
    
    
    
    
    this.payoutGuid = payoutGuid;
    return this;
  }

   /**
   * Unique identifier assigned to the Payout.
   * @return payoutGuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "Unique identifier assigned to the Payout.")

  public UUID getPayoutGuid() {
    return payoutGuid;
  }


  public void setPayoutGuid(UUID payoutGuid) {
    
    
    
    this.payoutGuid = payoutGuid;
  }


  public DtoPayout payoutReferenceToken(String payoutReferenceToken) {
    
    
    
    
    this.payoutReferenceToken = payoutReferenceToken;
    return this;
  }

   /**
   * The Payout identifier that will be needed by our support teams to research issues.
   * @return payoutReferenceToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Payout identifier that will be needed by our support teams to research issues.")

  public String getPayoutReferenceToken() {
    return payoutReferenceToken;
  }


  public void setPayoutReferenceToken(String payoutReferenceToken) {
    
    
    
    this.payoutReferenceToken = payoutReferenceToken;
  }


  public DtoPayout memo(String memo) {
    
    
    
    
    this.memo = memo;
    return this;
  }

   /**
   * A brief description highlighting the reason for this Payout.
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A brief description highlighting the reason for this Payout.")

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    
    
    
    this.memo = memo;
  }


  public DtoPayout orderNumber(String orderNumber) {
    
    
    
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * The most common number used throughout the ConnexPay Portal. Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. The maximum length is 50 alpha-numeric characters and allows dashes ( - ).
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The most common number used throughout the ConnexPay Portal. Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. The maximum length is 50 alpha-numeric characters and allows dashes ( - ).")

  public String getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(String orderNumber) {
    
    
    
    this.orderNumber = orderNumber;
  }


  public DtoPayout associationId(String associationId) {
    
    
    
    
    this.associationId = associationId;
    return this;
  }

   /**
   * Association ID is used to tie a Payout to a sale or sales. For example, if you have several sales and one Payout to a Payee, association ID can be added to the sales and the Payout for downstream reporting.
   * @return associationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Association ID is used to tie a Payout to a sale or sales. For example, if you have several sales and one Payout to a Payee, association ID can be added to the sales and the Payout for downstream reporting.")

  public String getAssociationId() {
    return associationId;
  }


  public void setAssociationId(String associationId) {
    
    
    
    this.associationId = associationId;
  }


  public DtoPayout customerId(String customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Transaction ID within the client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes. The maximum length is 100 characters and is alpha-numeric.
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction ID within the client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes. The maximum length is 100 characters and is alpha-numeric.")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    
    
    
    this.customerId = customerId;
  }


  public DtoPayout createdDate(OffsetDateTime createdDate) {
    
    
    
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    
    
    
    this.createdDate = createdDate;
  }


  public DtoPayout createdBy(String createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public DtoPayout labelIds(List<Integer> labelIds) {
    
    
    
    
    this.labelIds = labelIds;
    return this;
  }

  public DtoPayout addLabelIdsItem(Integer labelIdsItem) {
    if (this.labelIds == null) {
      this.labelIds = new ArrayList<>();
    }
    this.labelIds.add(labelIdsItem);
    return this;
  }

   /**
   * Label IDs are used to associate a Payout to specific labels within ConnexPay Bridge UI for an organization. If a Payout is tied to an incorrect Label, it will not filter or display correctly in Bridge&#39;s Search Grid. Please contact your Customer Care Consultant for a list of valid Label IDs before use.
   * @return labelIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label IDs are used to associate a Payout to specific labels within ConnexPay Bridge UI for an organization. If a Payout is tied to an incorrect Label, it will not filter or display correctly in Bridge's Search Grid. Please contact your Customer Care Consultant for a list of valid Label IDs before use.")

  public List<Integer> getLabelIds() {
    return labelIds;
  }


  public void setLabelIds(List<Integer> labelIds) {
    
    
    
    this.labelIds = labelIds;
  }


  public DtoPayout payments(List<DtoPayments> payments) {
    
    
    
    
    this.payments = payments;
    return this;
  }

  public DtoPayout addPaymentsItem(DtoPayments paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

   /**
   * Get payments
   * @return payments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<DtoPayments> getPayments() {
    return payments;
  }


  public void setPayments(List<DtoPayments> payments) {
    
    
    
    this.payments = payments;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DtoPayout instance itself
   */
  public DtoPayout putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoPayout dtoPayout = (DtoPayout) o;
    return Objects.equals(this.payoutGuid, dtoPayout.payoutGuid) &&
        Objects.equals(this.payoutReferenceToken, dtoPayout.payoutReferenceToken) &&
        Objects.equals(this.memo, dtoPayout.memo) &&
        Objects.equals(this.orderNumber, dtoPayout.orderNumber) &&
        Objects.equals(this.associationId, dtoPayout.associationId) &&
        Objects.equals(this.customerId, dtoPayout.customerId) &&
        Objects.equals(this.createdDate, dtoPayout.createdDate) &&
        Objects.equals(this.createdBy, dtoPayout.createdBy) &&
        Objects.equals(this.labelIds, dtoPayout.labelIds) &&
        Objects.equals(this.payments, dtoPayout.payments)&&
        Objects.equals(this.additionalProperties, dtoPayout.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payoutGuid, payoutReferenceToken, memo, orderNumber, associationId, customerId, createdDate, createdBy, labelIds, payments, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoPayout {\n");
    sb.append("    payoutGuid: ").append(toIndentedString(payoutGuid)).append("\n");
    sb.append("    payoutReferenceToken: ").append(toIndentedString(payoutReferenceToken)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    labelIds: ").append(toIndentedString(labelIds)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payoutGuid");
    openapiFields.add("payoutReferenceToken");
    openapiFields.add("memo");
    openapiFields.add("orderNumber");
    openapiFields.add("associationId");
    openapiFields.add("customerId");
    openapiFields.add("createdDate");
    openapiFields.add("createdBy");
    openapiFields.add("labelIds");
    openapiFields.add("payments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DtoPayout
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DtoPayout.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoPayout is not found in the empty JSON string", DtoPayout.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payoutGuid") != null && !jsonObj.get("payoutGuid").isJsonNull()) && !jsonObj.get("payoutGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutGuid").toString()));
      }
      if ((jsonObj.get("payoutReferenceToken") != null && !jsonObj.get("payoutReferenceToken").isJsonNull()) && !jsonObj.get("payoutReferenceToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutReferenceToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutReferenceToken").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("orderNumber") != null && !jsonObj.get("orderNumber").isJsonNull()) && !jsonObj.get("orderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderNumber").toString()));
      }
      if ((jsonObj.get("associationId") != null && !jsonObj.get("associationId").isJsonNull()) && !jsonObj.get("associationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associationId").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labelIds") != null && !jsonObj.get("labelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelIds` to be an array in the JSON string but got `%s`", jsonObj.get("labelIds").toString()));
      }
      if (jsonObj.get("payments") != null && !jsonObj.get("payments").isJsonNull()) {
        JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
        if (jsonArraypayments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
          }

          // validate the optional field `payments` (array)
          for (int i = 0; i < jsonArraypayments.size(); i++) {
            DtoPayments.validateJsonObject(jsonArraypayments.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoPayout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoPayout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoPayout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoPayout.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoPayout>() {
           @Override
           public void write(JsonWriter out, DtoPayout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoPayout read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DtoPayout instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DtoPayout given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DtoPayout
  * @throws IOException if the JSON string is invalid with respect to DtoPayout
  */
  public static DtoPayout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoPayout.class);
  }

 /**
  * Convert an instance of DtoPayout to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

