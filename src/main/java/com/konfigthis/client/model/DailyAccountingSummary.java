/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DailyAccountingSummary
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DailyAccountingSummary {
  public static final String SERIALIZED_NAME_MERCHANT_GUID = "merchantGuid";
  @SerializedName(SERIALIZED_NAME_MERCHANT_GUID)
  private UUID merchantGuid;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "clientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_RELEASED_DATE = "releasedDate";
  @SerializedName(SERIALIZED_NAME_RELEASED_DATE)
  private LocalDate releasedDate;

  public static final String SERIALIZED_NAME_PRIOR_DAY_CASH_BALANCE = "priorDayCashBalance";
  @SerializedName(SERIALIZED_NAME_PRIOR_DAY_CASH_BALANCE)
  private Double priorDayCashBalance;

  public static final String SERIALIZED_NAME_WIRE_ACH_TO_FUND_CASH_AMOUNT = "wireAchToFundCashAmount";
  @SerializedName(SERIALIZED_NAME_WIRE_ACH_TO_FUND_CASH_AMOUNT)
  private Double wireAchToFundCashAmount;

  public static final String SERIALIZED_NAME_BEGINNING_CASH_BALANCE = "beginningCashBalance";
  @SerializedName(SERIALIZED_NAME_BEGINNING_CASH_BALANCE)
  private Double beginningCashBalance;

  public static final String SERIALIZED_NAME_CREDIT_SALE_AMOUNT = "creditSaleAmount";
  @SerializedName(SERIALIZED_NAME_CREDIT_SALE_AMOUNT)
  private Double creditSaleAmount;

  public static final String SERIALIZED_NAME_ACH_SALE_AMOUNT = "achSaleAmount";
  @SerializedName(SERIALIZED_NAME_ACH_SALE_AMOUNT)
  private Double achSaleAmount;

  public static final String SERIALIZED_NAME_PURCHASE_ACH_AMOUNT = "purchaseAchAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ACH_AMOUNT)
  private Double purchaseAchAmount;

  public static final String SERIALIZED_NAME_PURCHASE_CARD_AMOUNT = "purchaseCardAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_CARD_AMOUNT)
  private Double purchaseCardAmount;

  public static final String SERIALIZED_NAME_PURCHASE_PUSH_TO_CARD_AMOUNT = "purchasePushToCardAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_PUSH_TO_CARD_AMOUNT)
  private Double purchasePushToCardAmount;

  public static final String SERIALIZED_NAME_CREDIT_VOID_AMOUNT = "creditVoidAmount";
  @SerializedName(SERIALIZED_NAME_CREDIT_VOID_AMOUNT)
  private Double creditVoidAmount;

  public static final String SERIALIZED_NAME_CREDIT_RETURN_AMOUNT = "creditReturnAmount";
  @SerializedName(SERIALIZED_NAME_CREDIT_RETURN_AMOUNT)
  private Double creditReturnAmount;

  public static final String SERIALIZED_NAME_CREDIT_CHARGEBACK_AMOUNT = "creditChargebackAmount";
  @SerializedName(SERIALIZED_NAME_CREDIT_CHARGEBACK_AMOUNT)
  private Double creditChargebackAmount;

  public static final String SERIALIZED_NAME_CREDIT_ADJUSTMENT_AMOUNT = "creditAdjustmentAmount";
  @SerializedName(SERIALIZED_NAME_CREDIT_ADJUSTMENT_AMOUNT)
  private Double creditAdjustmentAmount;

  public static final String SERIALIZED_NAME_ACH_VOID_AMOUNT = "achVoidAmount";
  @SerializedName(SERIALIZED_NAME_ACH_VOID_AMOUNT)
  private Double achVoidAmount;

  public static final String SERIALIZED_NAME_ACH_RETURN_AMOUNT = "achReturnAmount";
  @SerializedName(SERIALIZED_NAME_ACH_RETURN_AMOUNT)
  private Double achReturnAmount;

  public static final String SERIALIZED_NAME_PURCHASE_CARD_RETURN_AMOUNT = "purchaseCardReturnAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_CARD_RETURN_AMOUNT)
  private Double purchaseCardReturnAmount;

  public static final String SERIALIZED_NAME_PURCHASE_CARD_CHARGEBACK_AMOUNT = "purchaseCardChargebackAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_CARD_CHARGEBACK_AMOUNT)
  private Double purchaseCardChargebackAmount;

  public static final String SERIALIZED_NAME_PURCHASE_ACH_RETURN_AMOUNT = "purchaseAchReturnAmount";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ACH_RETURN_AMOUNT)
  private Double purchaseAchReturnAmount;

  public static final String SERIALIZED_NAME_TOTAL_ACTIVITY = "totalActivity";
  @SerializedName(SERIALIZED_NAME_TOTAL_ACTIVITY)
  private Double totalActivity;

  public static final String SERIALIZED_NAME_NEW_CASH_BALANCE = "newCashBalance";
  @SerializedName(SERIALIZED_NAME_NEW_CASH_BALANCE)
  private Double newCashBalance;

  public static final String SERIALIZED_NAME_NET_DEBIT_CREDIT_TO_CLIENT = "netDebitCreditToClient";
  @SerializedName(SERIALIZED_NAME_NET_DEBIT_CREDIT_TO_CLIENT)
  private Double netDebitCreditToClient;

  public static final String SERIALIZED_NAME_ENDING_CASH_BALANCE = "endingCashBalance";
  @SerializedName(SERIALIZED_NAME_ENDING_CASH_BALANCE)
  private Double endingCashBalance;

  public static final String SERIALIZED_NAME_MINIMUM_CASH_BALANCE = "minimumCashBalance";
  @SerializedName(SERIALIZED_NAME_MINIMUM_CASH_BALANCE)
  private Double minimumCashBalance;

  public static final String SERIALIZED_NAME_ACH_DEBIT_REJECT_AMOUNT = "achDebitRejectAmount";
  @SerializedName(SERIALIZED_NAME_ACH_DEBIT_REJECT_AMOUNT)
  private Double achDebitRejectAmount;

  public DailyAccountingSummary() {
  }

  public DailyAccountingSummary merchantGuid(UUID merchantGuid) {
    
    
    
    
    this.merchantGuid = merchantGuid;
    return this;
  }

   /**
   * Merchant Guid    Unique identifier assigned to the merchant by ConnexPay.
   * @return merchantGuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant Guid    Unique identifier assigned to the merchant by ConnexPay.")

  public UUID getMerchantGuid() {
    return merchantGuid;
  }


  public void setMerchantGuid(UUID merchantGuid) {
    
    
    
    this.merchantGuid = merchantGuid;
  }


  public DailyAccountingSummary clientName(String clientName) {
    
    
    
    
    this.clientName = clientName;
    return this;
  }

   /**
   * Client Name    Unique name assigned to the client by ConnexPay.
   * @return clientName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Client Name    Unique name assigned to the client by ConnexPay.")

  public String getClientName() {
    return clientName;
  }


  public void setClientName(String clientName) {
    
    
    
    this.clientName = clientName;
  }


  public DailyAccountingSummary releasedDate(LocalDate releasedDate) {
    
    
    
    
    this.releasedDate = releasedDate;
    return this;
  }

   /**
   * Released Date    Date on which the requested transactions were released to the client.
   * @return releasedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Released Date    Date on which the requested transactions were released to the client.")

  public LocalDate getReleasedDate() {
    return releasedDate;
  }


  public void setReleasedDate(LocalDate releasedDate) {
    
    
    
    this.releasedDate = releasedDate;
  }


  public DailyAccountingSummary priorDayCashBalance(Double priorDayCashBalance) {
    
    
    
    
    this.priorDayCashBalance = priorDayCashBalance;
    return this;
  }

   /**
   * Prior Day Cash Balance    The starting cash balance from the previous day.
   * @return priorDayCashBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Prior Day Cash Balance    The starting cash balance from the previous day.")

  public Double getPriorDayCashBalance() {
    return priorDayCashBalance;
  }


  public void setPriorDayCashBalance(Double priorDayCashBalance) {
    
    
    
    this.priorDayCashBalance = priorDayCashBalance;
  }


  public DailyAccountingSummary wireAchToFundCashAmount(Double wireAchToFundCashAmount) {
    
    
    
    
    this.wireAchToFundCashAmount = wireAchToFundCashAmount;
    return this;
  }

   /**
   * Wire/ACH to Fund Cash Account Amount (Credit) or Withdraw from Cash Account Amount (Debit)    Funds transferred between the client&#39;s bank account and ConnexPay to fund transactions or to return funds to the client.
   * @return wireAchToFundCashAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Wire/ACH to Fund Cash Account Amount (Credit) or Withdraw from Cash Account Amount (Debit)    Funds transferred between the client's bank account and ConnexPay to fund transactions or to return funds to the client.")

  public Double getWireAchToFundCashAmount() {
    return wireAchToFundCashAmount;
  }


  public void setWireAchToFundCashAmount(Double wireAchToFundCashAmount) {
    
    
    
    this.wireAchToFundCashAmount = wireAchToFundCashAmount;
  }


  public DailyAccountingSummary beginningCashBalance(Double beginningCashBalance) {
    
    
    
    
    this.beginningCashBalance = beginningCashBalance;
    return this;
  }

   /**
   * Beginning Cash Balance    The funds the client begins the day with.
   * @return beginningCashBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Beginning Cash Balance    The funds the client begins the day with.")

  public Double getBeginningCashBalance() {
    return beginningCashBalance;
  }


  public void setBeginningCashBalance(Double beginningCashBalance) {
    
    
    
    this.beginningCashBalance = beginningCashBalance;
  }


  public DailyAccountingSummary creditSaleAmount(Double creditSaleAmount) {
    
    
    
    
    this.creditSaleAmount = creditSaleAmount;
    return this;
  }

   /**
   * Credit Card Sale Amount (Credit)    Total amount of incoming credit card sales added to the client&#39;s cash balance.
   * @return creditSaleAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit Card Sale Amount (Credit)    Total amount of incoming credit card sales added to the client's cash balance.")

  public Double getCreditSaleAmount() {
    return creditSaleAmount;
  }


  public void setCreditSaleAmount(Double creditSaleAmount) {
    
    
    
    this.creditSaleAmount = creditSaleAmount;
  }


  public DailyAccountingSummary achSaleAmount(Double achSaleAmount) {
    
    
    
    
    this.achSaleAmount = achSaleAmount;
    return this;
  }

   /**
   * ACH Sale Amount (Credit)    Total amount of incoming ACH sales added to the client&#39;s cash balance.
   * @return achSaleAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ACH Sale Amount (Credit)    Total amount of incoming ACH sales added to the client's cash balance.")

  public Double getAchSaleAmount() {
    return achSaleAmount;
  }


  public void setAchSaleAmount(Double achSaleAmount) {
    
    
    
    this.achSaleAmount = achSaleAmount;
  }


  public DailyAccountingSummary purchaseAchAmount(Double purchaseAchAmount) {
    
    
    
    
    this.purchaseAchAmount = purchaseAchAmount;
    return this;
  }

   /**
   * ACH Purchase Amount (Debit)    Total amount of ACH purchases decreasing the client&#39;s cash balance.
   * @return purchaseAchAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ACH Purchase Amount (Debit)    Total amount of ACH purchases decreasing the client's cash balance.")

  public Double getPurchaseAchAmount() {
    return purchaseAchAmount;
  }


  public void setPurchaseAchAmount(Double purchaseAchAmount) {
    
    
    
    this.purchaseAchAmount = purchaseAchAmount;
  }


  public DailyAccountingSummary purchaseCardAmount(Double purchaseCardAmount) {
    
    
    
    
    this.purchaseCardAmount = purchaseCardAmount;
    return this;
  }

   /**
   * Virtual Card Purchase Amount (Debit)    Total amount of issued virtual credit card purchases subtracting from the client&#39;s cash balance.
   * @return purchaseCardAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Virtual Card Purchase Amount (Debit)    Total amount of issued virtual credit card purchases subtracting from the client's cash balance.")

  public Double getPurchaseCardAmount() {
    return purchaseCardAmount;
  }


  public void setPurchaseCardAmount(Double purchaseCardAmount) {
    
    
    
    this.purchaseCardAmount = purchaseCardAmount;
  }


  public DailyAccountingSummary purchasePushToCardAmount(Double purchasePushToCardAmount) {
    
    
    
    
    this.purchasePushToCardAmount = purchasePushToCardAmount;
    return this;
  }

   /**
   * Purchase Push to Card Amount    Total amount of funds paid out through PushToCard subtracting from the client&#39;s cash balance.
   * @return purchasePushToCardAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase Push to Card Amount    Total amount of funds paid out through PushToCard subtracting from the client's cash balance.")

  public Double getPurchasePushToCardAmount() {
    return purchasePushToCardAmount;
  }


  public void setPurchasePushToCardAmount(Double purchasePushToCardAmount) {
    
    
    
    this.purchasePushToCardAmount = purchasePushToCardAmount;
  }


  public DailyAccountingSummary creditVoidAmount(Double creditVoidAmount) {
    
    
    
    
    this.creditVoidAmount = creditVoidAmount;
    return this;
  }

   /**
   * Credit Card Void Amount (Debit)    Total amount of credit card sales voided subtracting from the client&#39;s cash balance.
   * @return creditVoidAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit Card Void Amount (Debit)    Total amount of credit card sales voided subtracting from the client's cash balance.")

  public Double getCreditVoidAmount() {
    return creditVoidAmount;
  }


  public void setCreditVoidAmount(Double creditVoidAmount) {
    
    
    
    this.creditVoidAmount = creditVoidAmount;
  }


  public DailyAccountingSummary creditReturnAmount(Double creditReturnAmount) {
    
    
    
    
    this.creditReturnAmount = creditReturnAmount;
    return this;
  }

   /**
   * Credit Card Return Amount (Debit)    Total amount of credit card sales returned subtracting from the client&#39;s cash balance.
   * @return creditReturnAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit Card Return Amount (Debit)    Total amount of credit card sales returned subtracting from the client's cash balance.")

  public Double getCreditReturnAmount() {
    return creditReturnAmount;
  }


  public void setCreditReturnAmount(Double creditReturnAmount) {
    
    
    
    this.creditReturnAmount = creditReturnAmount;
  }


  public DailyAccountingSummary creditChargebackAmount(Double creditChargebackAmount) {
    
    
    
    
    this.creditChargebackAmount = creditChargebackAmount;
    return this;
  }

   /**
   * Credit Chargeback Amount    Total amount of Chargebacks received on the credit card sales subtracting from the client&#39;s cash balance.
   * @return creditChargebackAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit Chargeback Amount    Total amount of Chargebacks received on the credit card sales subtracting from the client's cash balance.")

  public Double getCreditChargebackAmount() {
    return creditChargebackAmount;
  }


  public void setCreditChargebackAmount(Double creditChargebackAmount) {
    
    
    
    this.creditChargebackAmount = creditChargebackAmount;
  }


  public DailyAccountingSummary creditAdjustmentAmount(Double creditAdjustmentAmount) {
    
    
    
    
    this.creditAdjustmentAmount = creditAdjustmentAmount;
    return this;
  }

   /**
   * Credit Adjustment Amount    Total amount of manual credit adjustments created for the client.
   * @return creditAdjustmentAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit Adjustment Amount    Total amount of manual credit adjustments created for the client.")

  public Double getCreditAdjustmentAmount() {
    return creditAdjustmentAmount;
  }


  public void setCreditAdjustmentAmount(Double creditAdjustmentAmount) {
    
    
    
    this.creditAdjustmentAmount = creditAdjustmentAmount;
  }


  public DailyAccountingSummary achVoidAmount(Double achVoidAmount) {
    
    
    
    
    this.achVoidAmount = achVoidAmount;
    return this;
  }

   /**
   * ACH Void Amount (Debit)    Total amount of ACH sales voided subtracting from the client&#39;s cash balance.
   * @return achVoidAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ACH Void Amount (Debit)    Total amount of ACH sales voided subtracting from the client's cash balance.")

  public Double getAchVoidAmount() {
    return achVoidAmount;
  }


  public void setAchVoidAmount(Double achVoidAmount) {
    
    
    
    this.achVoidAmount = achVoidAmount;
  }


  public DailyAccountingSummary achReturnAmount(Double achReturnAmount) {
    
    
    
    
    this.achReturnAmount = achReturnAmount;
    return this;
  }

   /**
   * ACH Return (Debit)    Total amount of ACH sales returned subtracting from the client&#39;s cash balance.
   * @return achReturnAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ACH Return (Debit)    Total amount of ACH sales returned subtracting from the client's cash balance.")

  public Double getAchReturnAmount() {
    return achReturnAmount;
  }


  public void setAchReturnAmount(Double achReturnAmount) {
    
    
    
    this.achReturnAmount = achReturnAmount;
  }


  public DailyAccountingSummary purchaseCardReturnAmount(Double purchaseCardReturnAmount) {
    
    
    
    
    this.purchaseCardReturnAmount = purchaseCardReturnAmount;
    return this;
  }

   /**
   * Virtual Card Return Amount (Credit)    Total amount returned to issued virtual credit cards adding to the client&#39;s cash balance.
   * @return purchaseCardReturnAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Virtual Card Return Amount (Credit)    Total amount returned to issued virtual credit cards adding to the client's cash balance.")

  public Double getPurchaseCardReturnAmount() {
    return purchaseCardReturnAmount;
  }


  public void setPurchaseCardReturnAmount(Double purchaseCardReturnAmount) {
    
    
    
    this.purchaseCardReturnAmount = purchaseCardReturnAmount;
  }


  public DailyAccountingSummary purchaseCardChargebackAmount(Double purchaseCardChargebackAmount) {
    
    
    
    
    this.purchaseCardChargebackAmount = purchaseCardChargebackAmount;
    return this;
  }

   /**
   * Purchase Card Chargeback Amount    Total amount of Chargebacks received on issued virtual credit cards as part of the dispute process.
   * @return purchaseCardChargebackAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase Card Chargeback Amount    Total amount of Chargebacks received on issued virtual credit cards as part of the dispute process.")

  public Double getPurchaseCardChargebackAmount() {
    return purchaseCardChargebackAmount;
  }


  public void setPurchaseCardChargebackAmount(Double purchaseCardChargebackAmount) {
    
    
    
    this.purchaseCardChargebackAmount = purchaseCardChargebackAmount;
  }


  public DailyAccountingSummary purchaseAchReturnAmount(Double purchaseAchReturnAmount) {
    
    
    
    
    this.purchaseAchReturnAmount = purchaseAchReturnAmount;
    return this;
  }

   /**
   * Purchase - ACH Return Amount (Credit)    Total amount returned to issued ACHs adding to the client&#39;s cash balance.
   * @return purchaseAchReturnAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase - ACH Return Amount (Credit)    Total amount returned to issued ACHs adding to the client's cash balance.")

  public Double getPurchaseAchReturnAmount() {
    return purchaseAchReturnAmount;
  }


  public void setPurchaseAchReturnAmount(Double purchaseAchReturnAmount) {
    
    
    
    this.purchaseAchReturnAmount = purchaseAchReturnAmount;
  }


  public DailyAccountingSummary totalActivity(Double totalActivity) {
    
    
    
    
    this.totalActivity = totalActivity;
    return this;
  }

   /**
   * Total Activity    The sum of all debits and credits processed on the client&#39;s behalf for the previous day.
   * @return totalActivity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total Activity    The sum of all debits and credits processed on the client's behalf for the previous day.")

  public Double getTotalActivity() {
    return totalActivity;
  }


  public void setTotalActivity(Double totalActivity) {
    
    
    
    this.totalActivity = totalActivity;
  }


  public DailyAccountingSummary newCashBalance(Double newCashBalance) {
    
    
    
    
    this.newCashBalance = newCashBalance;
    return this;
  }

   /**
   * New Cash Balance    Reflects the day&#39;s beginning cash balance plus or minus the client&#39;s total activity.
   * @return newCashBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "New Cash Balance    Reflects the day's beginning cash balance plus or minus the client's total activity.")

  public Double getNewCashBalance() {
    return newCashBalance;
  }


  public void setNewCashBalance(Double newCashBalance) {
    
    
    
    this.newCashBalance = newCashBalance;
  }


  public DailyAccountingSummary netDebitCreditToClient(Double netDebitCreditToClient) {
    
    
    
    
    this.netDebitCreditToClient = netDebitCreditToClient;
    return this;
  }

   /**
   * Credit/Debit    The amount to be credited to or debited from the client&#39;s bank account. ConnexPay will collaborate with  the client to determine the percentage that will be returned to the client&#39;s bank account each day.
   * @return netDebitCreditToClient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit/Debit    The amount to be credited to or debited from the client's bank account. ConnexPay will collaborate with  the client to determine the percentage that will be returned to the client's bank account each day.")

  public Double getNetDebitCreditToClient() {
    return netDebitCreditToClient;
  }


  public void setNetDebitCreditToClient(Double netDebitCreditToClient) {
    
    
    
    this.netDebitCreditToClient = netDebitCreditToClient;
  }


  public DailyAccountingSummary endingCashBalance(Double endingCashBalance) {
    
    
    
    
    this.endingCashBalance = endingCashBalance;
    return this;
  }

   /**
   * Ending Cash Balance    The client&#39;s New Cash Balance plus or minus the Credit/Debit amount.
   * @return endingCashBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ending Cash Balance    The client's New Cash Balance plus or minus the Credit/Debit amount.")

  public Double getEndingCashBalance() {
    return endingCashBalance;
  }


  public void setEndingCashBalance(Double endingCashBalance) {
    
    
    
    this.endingCashBalance = endingCashBalance;
  }


  public DailyAccountingSummary minimumCashBalance(Double minimumCashBalance) {
    
    
    
    
    this.minimumCashBalance = minimumCashBalance;
    return this;
  }

   /**
   * Minimum Cash Balance (MCB)    Minimum funding balance that should be maintained by the client with ConnexPay.
   * @return minimumCashBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum Cash Balance (MCB)    Minimum funding balance that should be maintained by the client with ConnexPay.")

  public Double getMinimumCashBalance() {
    return minimumCashBalance;
  }


  public void setMinimumCashBalance(Double minimumCashBalance) {
    
    
    
    this.minimumCashBalance = minimumCashBalance;
  }


  public DailyAccountingSummary achDebitRejectAmount(Double achDebitRejectAmount) {
    
    
    
    
    this.achDebitRejectAmount = achDebitRejectAmount;
    return this;
  }

   /**
   * ACH Debit Reject Amount (Credit)    Total amount of payments that did not clear the supplier&#39;s account. Payments can be rejected for a variety of reasons, including closed accounts, incorrect account numbers, etc.
   * @return achDebitRejectAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ACH Debit Reject Amount (Credit)    Total amount of payments that did not clear the supplier's account. Payments can be rejected for a variety of reasons, including closed accounts, incorrect account numbers, etc.")

  public Double getAchDebitRejectAmount() {
    return achDebitRejectAmount;
  }


  public void setAchDebitRejectAmount(Double achDebitRejectAmount) {
    
    
    
    this.achDebitRejectAmount = achDebitRejectAmount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DailyAccountingSummary instance itself
   */
  public DailyAccountingSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyAccountingSummary dailyAccountingSummary = (DailyAccountingSummary) o;
    return Objects.equals(this.merchantGuid, dailyAccountingSummary.merchantGuid) &&
        Objects.equals(this.clientName, dailyAccountingSummary.clientName) &&
        Objects.equals(this.releasedDate, dailyAccountingSummary.releasedDate) &&
        Objects.equals(this.priorDayCashBalance, dailyAccountingSummary.priorDayCashBalance) &&
        Objects.equals(this.wireAchToFundCashAmount, dailyAccountingSummary.wireAchToFundCashAmount) &&
        Objects.equals(this.beginningCashBalance, dailyAccountingSummary.beginningCashBalance) &&
        Objects.equals(this.creditSaleAmount, dailyAccountingSummary.creditSaleAmount) &&
        Objects.equals(this.achSaleAmount, dailyAccountingSummary.achSaleAmount) &&
        Objects.equals(this.purchaseAchAmount, dailyAccountingSummary.purchaseAchAmount) &&
        Objects.equals(this.purchaseCardAmount, dailyAccountingSummary.purchaseCardAmount) &&
        Objects.equals(this.purchasePushToCardAmount, dailyAccountingSummary.purchasePushToCardAmount) &&
        Objects.equals(this.creditVoidAmount, dailyAccountingSummary.creditVoidAmount) &&
        Objects.equals(this.creditReturnAmount, dailyAccountingSummary.creditReturnAmount) &&
        Objects.equals(this.creditChargebackAmount, dailyAccountingSummary.creditChargebackAmount) &&
        Objects.equals(this.creditAdjustmentAmount, dailyAccountingSummary.creditAdjustmentAmount) &&
        Objects.equals(this.achVoidAmount, dailyAccountingSummary.achVoidAmount) &&
        Objects.equals(this.achReturnAmount, dailyAccountingSummary.achReturnAmount) &&
        Objects.equals(this.purchaseCardReturnAmount, dailyAccountingSummary.purchaseCardReturnAmount) &&
        Objects.equals(this.purchaseCardChargebackAmount, dailyAccountingSummary.purchaseCardChargebackAmount) &&
        Objects.equals(this.purchaseAchReturnAmount, dailyAccountingSummary.purchaseAchReturnAmount) &&
        Objects.equals(this.totalActivity, dailyAccountingSummary.totalActivity) &&
        Objects.equals(this.newCashBalance, dailyAccountingSummary.newCashBalance) &&
        Objects.equals(this.netDebitCreditToClient, dailyAccountingSummary.netDebitCreditToClient) &&
        Objects.equals(this.endingCashBalance, dailyAccountingSummary.endingCashBalance) &&
        Objects.equals(this.minimumCashBalance, dailyAccountingSummary.minimumCashBalance) &&
        Objects.equals(this.achDebitRejectAmount, dailyAccountingSummary.achDebitRejectAmount)&&
        Objects.equals(this.additionalProperties, dailyAccountingSummary.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantGuid, clientName, releasedDate, priorDayCashBalance, wireAchToFundCashAmount, beginningCashBalance, creditSaleAmount, achSaleAmount, purchaseAchAmount, purchaseCardAmount, purchasePushToCardAmount, creditVoidAmount, creditReturnAmount, creditChargebackAmount, creditAdjustmentAmount, achVoidAmount, achReturnAmount, purchaseCardReturnAmount, purchaseCardChargebackAmount, purchaseAchReturnAmount, totalActivity, newCashBalance, netDebitCreditToClient, endingCashBalance, minimumCashBalance, achDebitRejectAmount, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyAccountingSummary {\n");
    sb.append("    merchantGuid: ").append(toIndentedString(merchantGuid)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    releasedDate: ").append(toIndentedString(releasedDate)).append("\n");
    sb.append("    priorDayCashBalance: ").append(toIndentedString(priorDayCashBalance)).append("\n");
    sb.append("    wireAchToFundCashAmount: ").append(toIndentedString(wireAchToFundCashAmount)).append("\n");
    sb.append("    beginningCashBalance: ").append(toIndentedString(beginningCashBalance)).append("\n");
    sb.append("    creditSaleAmount: ").append(toIndentedString(creditSaleAmount)).append("\n");
    sb.append("    achSaleAmount: ").append(toIndentedString(achSaleAmount)).append("\n");
    sb.append("    purchaseAchAmount: ").append(toIndentedString(purchaseAchAmount)).append("\n");
    sb.append("    purchaseCardAmount: ").append(toIndentedString(purchaseCardAmount)).append("\n");
    sb.append("    purchasePushToCardAmount: ").append(toIndentedString(purchasePushToCardAmount)).append("\n");
    sb.append("    creditVoidAmount: ").append(toIndentedString(creditVoidAmount)).append("\n");
    sb.append("    creditReturnAmount: ").append(toIndentedString(creditReturnAmount)).append("\n");
    sb.append("    creditChargebackAmount: ").append(toIndentedString(creditChargebackAmount)).append("\n");
    sb.append("    creditAdjustmentAmount: ").append(toIndentedString(creditAdjustmentAmount)).append("\n");
    sb.append("    achVoidAmount: ").append(toIndentedString(achVoidAmount)).append("\n");
    sb.append("    achReturnAmount: ").append(toIndentedString(achReturnAmount)).append("\n");
    sb.append("    purchaseCardReturnAmount: ").append(toIndentedString(purchaseCardReturnAmount)).append("\n");
    sb.append("    purchaseCardChargebackAmount: ").append(toIndentedString(purchaseCardChargebackAmount)).append("\n");
    sb.append("    purchaseAchReturnAmount: ").append(toIndentedString(purchaseAchReturnAmount)).append("\n");
    sb.append("    totalActivity: ").append(toIndentedString(totalActivity)).append("\n");
    sb.append("    newCashBalance: ").append(toIndentedString(newCashBalance)).append("\n");
    sb.append("    netDebitCreditToClient: ").append(toIndentedString(netDebitCreditToClient)).append("\n");
    sb.append("    endingCashBalance: ").append(toIndentedString(endingCashBalance)).append("\n");
    sb.append("    minimumCashBalance: ").append(toIndentedString(minimumCashBalance)).append("\n");
    sb.append("    achDebitRejectAmount: ").append(toIndentedString(achDebitRejectAmount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("merchantGuid");
    openapiFields.add("clientName");
    openapiFields.add("releasedDate");
    openapiFields.add("priorDayCashBalance");
    openapiFields.add("wireAchToFundCashAmount");
    openapiFields.add("beginningCashBalance");
    openapiFields.add("creditSaleAmount");
    openapiFields.add("achSaleAmount");
    openapiFields.add("purchaseAchAmount");
    openapiFields.add("purchaseCardAmount");
    openapiFields.add("purchasePushToCardAmount");
    openapiFields.add("creditVoidAmount");
    openapiFields.add("creditReturnAmount");
    openapiFields.add("creditChargebackAmount");
    openapiFields.add("creditAdjustmentAmount");
    openapiFields.add("achVoidAmount");
    openapiFields.add("achReturnAmount");
    openapiFields.add("purchaseCardReturnAmount");
    openapiFields.add("purchaseCardChargebackAmount");
    openapiFields.add("purchaseAchReturnAmount");
    openapiFields.add("totalActivity");
    openapiFields.add("newCashBalance");
    openapiFields.add("netDebitCreditToClient");
    openapiFields.add("endingCashBalance");
    openapiFields.add("minimumCashBalance");
    openapiFields.add("achDebitRejectAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DailyAccountingSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DailyAccountingSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyAccountingSummary is not found in the empty JSON string", DailyAccountingSummary.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("merchantGuid") != null && !jsonObj.get("merchantGuid").isJsonNull()) && !jsonObj.get("merchantGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantGuid").toString()));
      }
      if (!jsonObj.get("clientName").isJsonNull() && (jsonObj.get("clientName") != null && !jsonObj.get("clientName").isJsonNull()) && !jsonObj.get("clientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyAccountingSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyAccountingSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyAccountingSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyAccountingSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyAccountingSummary>() {
           @Override
           public void write(JsonWriter out, DailyAccountingSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyAccountingSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DailyAccountingSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DailyAccountingSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DailyAccountingSummary
  * @throws IOException if the JSON string is invalid with respect to DailyAccountingSummary
  */
  public static DailyAccountingSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyAccountingSummary.class);
  }

 /**
  * Convert an instance of DailyAccountingSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

