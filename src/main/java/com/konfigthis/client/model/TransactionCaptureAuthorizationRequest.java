/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SaleCreateTransactionRequestCustomParametersInner;
import com.konfigthis.client.model.TransactionCaptureAuthorizationRequestConnexPayTransaction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TransactionCaptureAuthorizationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TransactionCaptureAuthorizationRequest {
  public static final String SERIALIZED_NAME_DEVICE_GUID = "DeviceGuid";
  @SerializedName(SERIALIZED_NAME_DEVICE_GUID)
  private String deviceGuid;

  public static final String SERIALIZED_NAME_AUTH_ONLY_GUID = "AuthOnlyGuid";
  @SerializedName(SERIALIZED_NAME_AUTH_ONLY_GUID)
  private String authOnlyGuid;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber;

  public static final String SERIALIZED_NAME_CONNEX_PAY_TRANSACTION = "ConnexPayTransaction";
  @SerializedName(SERIALIZED_NAME_CONNEX_PAY_TRANSACTION)
  private TransactionCaptureAuthorizationRequestConnexPayTransaction connexPayTransaction;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "OrderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_CUSTOMER_I_D = "CustomerID";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_I_D)
  private String customerID;

  public static final String SERIALIZED_NAME_ASSOCIATION_I_D = "AssociationID";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_I_D)
  private String associationID;

  public static final String SERIALIZED_NAME_CUSTOM_PARAMETERS = "CustomParameters";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMETERS)
  private List<SaleCreateTransactionRequestCustomParametersInner> customParameters = null;

  public TransactionCaptureAuthorizationRequest() {
  }

  public TransactionCaptureAuthorizationRequest deviceGuid(String deviceGuid) {
    
    
    
    
    this.deviceGuid = deviceGuid;
    return this;
  }

   /**
   * Device&#39;s Guid provided by ConnexPay.
   * @return deviceGuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Device's Guid provided by ConnexPay.")

  public String getDeviceGuid() {
    return deviceGuid;
  }


  public void setDeviceGuid(String deviceGuid) {
    
    
    
    this.deviceGuid = deviceGuid;
  }


  public TransactionCaptureAuthorizationRequest authOnlyGuid(String authOnlyGuid) {
    
    
    
    
    this.authOnlyGuid = authOnlyGuid;
    return this;
  }

   /**
   * Guid received from the AuthOnly operation.
   * @return authOnlyGuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Guid received from the AuthOnly operation.")

  public String getAuthOnlyGuid() {
    return authOnlyGuid;
  }


  public void setAuthOnlyGuid(String authOnlyGuid) {
    
    
    
    this.authOnlyGuid = authOnlyGuid;
  }


  public TransactionCaptureAuthorizationRequest sequenceNumber(String sequenceNumber) {
    
    
    
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Transaction sequence number within client environment. Provide a unique SequenceNumber for each new request. If the same value is sent within 30 minutes it will be considered a duplicate request. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric.
   * @return sequenceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction sequence number within client environment. Provide a unique SequenceNumber for each new request. If the same value is sent within 30 minutes it will be considered a duplicate request. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric.")

  public String getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(String sequenceNumber) {
    
    
    
    this.sequenceNumber = sequenceNumber;
  }


  public TransactionCaptureAuthorizationRequest connexPayTransaction(TransactionCaptureAuthorizationRequestConnexPayTransaction connexPayTransaction) {
    
    
    
    
    this.connexPayTransaction = connexPayTransaction;
    return this;
  }

   /**
   * Get connexPayTransaction
   * @return connexPayTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCaptureAuthorizationRequestConnexPayTransaction getConnexPayTransaction() {
    return connexPayTransaction;
  }


  public void setConnexPayTransaction(TransactionCaptureAuthorizationRequestConnexPayTransaction connexPayTransaction) {
    
    
    
    this.connexPayTransaction = connexPayTransaction;
  }


  public TransactionCaptureAuthorizationRequest orderNumber(String orderNumber) {
    
    
    
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * This is the most common number you&#39;ll see throughout the ConnexPay Portal. Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field. The maximum length is 50 alpha-numeric characters and allows dashes ( - ). If you provided an order number in the AUTH request it will be overwritten with the order number in the CAPTURE endpoint.
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is the most common number you'll see throughout the ConnexPay Portal. Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field. The maximum length is 50 alpha-numeric characters and allows dashes ( - ). If you provided an order number in the AUTH request it will be overwritten with the order number in the CAPTURE endpoint.")

  public String getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(String orderNumber) {
    
    
    
    this.orderNumber = orderNumber;
  }


  public TransactionCaptureAuthorizationRequest customerID(String customerID) {
    
    
    
    
    this.customerID = customerID;
    return this;
  }

   /**
   * Transaction ID within client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes. The maximum length is 100 characters and is alpha-numeric.
   * @return customerID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction ID within client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes. The maximum length is 100 characters and is alpha-numeric.")

  public String getCustomerID() {
    return customerID;
  }


  public void setCustomerID(String customerID) {
    
    
    
    this.customerID = customerID;
  }


  public TransactionCaptureAuthorizationRequest associationID(String associationID) {
    
    
    
    
    this.associationID = associationID;
    return this;
  }

   /**
   * Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting.
   * @return associationID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting.")

  public String getAssociationID() {
    return associationID;
  }


  public void setAssociationID(String associationID) {
    
    
    
    this.associationID = associationID;
  }


  public TransactionCaptureAuthorizationRequest customParameters(List<SaleCreateTransactionRequestCustomParametersInner> customParameters) {
    
    
    
    
    this.customParameters = customParameters;
    return this;
  }

  public TransactionCaptureAuthorizationRequest addCustomParametersItem(SaleCreateTransactionRequestCustomParametersInner customParametersItem) {
    if (this.customParameters == null) {
      this.customParameters = new ArrayList<>();
    }
    this.customParameters.add(customParametersItem);
    return this;
  }

   /**
   * You can add custom parameters to your sale request in the event that you need to associate additional information with the pay-in. For example, if you want to add an invoice number you would include the custom parameters object with the name parameter &#x3D; \&quot;invoice\&quot; and the value parameter as the invoice number. This requires customized reporting so you&#39;ll need to work with your implementations specialist to determine what&#39;s required.
   * @return customParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "You can add custom parameters to your sale request in the event that you need to associate additional information with the pay-in. For example, if you want to add an invoice number you would include the custom parameters object with the name parameter = \"invoice\" and the value parameter as the invoice number. This requires customized reporting so you'll need to work with your implementations specialist to determine what's required.")

  public List<SaleCreateTransactionRequestCustomParametersInner> getCustomParameters() {
    return customParameters;
  }


  public void setCustomParameters(List<SaleCreateTransactionRequestCustomParametersInner> customParameters) {
    
    
    
    this.customParameters = customParameters;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TransactionCaptureAuthorizationRequest instance itself
   */
  public TransactionCaptureAuthorizationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionCaptureAuthorizationRequest transactionCaptureAuthorizationRequest = (TransactionCaptureAuthorizationRequest) o;
    return Objects.equals(this.deviceGuid, transactionCaptureAuthorizationRequest.deviceGuid) &&
        Objects.equals(this.authOnlyGuid, transactionCaptureAuthorizationRequest.authOnlyGuid) &&
        Objects.equals(this.sequenceNumber, transactionCaptureAuthorizationRequest.sequenceNumber) &&
        Objects.equals(this.connexPayTransaction, transactionCaptureAuthorizationRequest.connexPayTransaction) &&
        Objects.equals(this.orderNumber, transactionCaptureAuthorizationRequest.orderNumber) &&
        Objects.equals(this.customerID, transactionCaptureAuthorizationRequest.customerID) &&
        Objects.equals(this.associationID, transactionCaptureAuthorizationRequest.associationID) &&
        Objects.equals(this.customParameters, transactionCaptureAuthorizationRequest.customParameters)&&
        Objects.equals(this.additionalProperties, transactionCaptureAuthorizationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceGuid, authOnlyGuid, sequenceNumber, connexPayTransaction, orderNumber, customerID, associationID, customParameters, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionCaptureAuthorizationRequest {\n");
    sb.append("    deviceGuid: ").append(toIndentedString(deviceGuid)).append("\n");
    sb.append("    authOnlyGuid: ").append(toIndentedString(authOnlyGuid)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    connexPayTransaction: ").append(toIndentedString(connexPayTransaction)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    customerID: ").append(toIndentedString(customerID)).append("\n");
    sb.append("    associationID: ").append(toIndentedString(associationID)).append("\n");
    sb.append("    customParameters: ").append(toIndentedString(customParameters)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceGuid");
    openapiFields.add("AuthOnlyGuid");
    openapiFields.add("SequenceNumber");
    openapiFields.add("ConnexPayTransaction");
    openapiFields.add("OrderNumber");
    openapiFields.add("CustomerID");
    openapiFields.add("AssociationID");
    openapiFields.add("CustomParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeviceGuid");
    openapiRequiredFields.add("AuthOnlyGuid");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionCaptureAuthorizationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionCaptureAuthorizationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionCaptureAuthorizationRequest is not found in the empty JSON string", TransactionCaptureAuthorizationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionCaptureAuthorizationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("DeviceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceGuid").toString()));
      }
      if (!jsonObj.get("AuthOnlyGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuthOnlyGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AuthOnlyGuid").toString()));
      }
      if ((jsonObj.get("SequenceNumber") != null && !jsonObj.get("SequenceNumber").isJsonNull()) && !jsonObj.get("SequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SequenceNumber").toString()));
      }
      // validate the optional field `ConnexPayTransaction`
      if (jsonObj.get("ConnexPayTransaction") != null && !jsonObj.get("ConnexPayTransaction").isJsonNull()) {
        TransactionCaptureAuthorizationRequestConnexPayTransaction.validateJsonObject(jsonObj.getAsJsonObject("ConnexPayTransaction"));
      }
      if ((jsonObj.get("OrderNumber") != null && !jsonObj.get("OrderNumber").isJsonNull()) && !jsonObj.get("OrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderNumber").toString()));
      }
      if ((jsonObj.get("CustomerID") != null && !jsonObj.get("CustomerID").isJsonNull()) && !jsonObj.get("CustomerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerID").toString()));
      }
      if ((jsonObj.get("AssociationID") != null && !jsonObj.get("AssociationID").isJsonNull()) && !jsonObj.get("AssociationID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssociationID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssociationID").toString()));
      }
      if (jsonObj.get("CustomParameters") != null && !jsonObj.get("CustomParameters").isJsonNull()) {
        JsonArray jsonArraycustomParameters = jsonObj.getAsJsonArray("CustomParameters");
        if (jsonArraycustomParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CustomParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CustomParameters` to be an array in the JSON string but got `%s`", jsonObj.get("CustomParameters").toString()));
          }

          // validate the optional field `CustomParameters` (array)
          for (int i = 0; i < jsonArraycustomParameters.size(); i++) {
            SaleCreateTransactionRequestCustomParametersInner.validateJsonObject(jsonArraycustomParameters.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionCaptureAuthorizationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionCaptureAuthorizationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionCaptureAuthorizationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionCaptureAuthorizationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionCaptureAuthorizationRequest>() {
           @Override
           public void write(JsonWriter out, TransactionCaptureAuthorizationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionCaptureAuthorizationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TransactionCaptureAuthorizationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionCaptureAuthorizationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionCaptureAuthorizationRequest
  * @throws IOException if the JSON string is invalid with respect to TransactionCaptureAuthorizationRequest
  */
  public static TransactionCaptureAuthorizationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionCaptureAuthorizationRequest.class);
  }

 /**
  * Convert an instance of TransactionCaptureAuthorizationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

