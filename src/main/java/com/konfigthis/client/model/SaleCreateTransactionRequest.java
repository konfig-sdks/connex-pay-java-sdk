/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SaleCreateTransactionRequestBankAccount;
import com.konfigthis.client.model.SaleCreateTransactionRequestBrowserData;
import com.konfigthis.client.model.SaleCreateTransactionRequestCard;
import com.konfigthis.client.model.SaleCreateTransactionRequestConnexPayTransaction;
import com.konfigthis.client.model.SaleCreateTransactionRequestCustomParametersInner;
import com.konfigthis.client.model.SaleCreateTransactionRequestCustomer;
import com.konfigthis.client.model.SaleCreateTransactionRequestEnhancedData;
import com.konfigthis.client.model.SaleCreateTransactionRequestRiskData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SaleCreateTransactionRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SaleCreateTransactionRequest {
  public static final String SERIALIZED_NAME_DEVICE_GUID = "DeviceGuid";
  @SerializedName(SERIALIZED_NAME_DEVICE_GUID)
  private String deviceGuid = "{{Device}}";

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount;

  public static final String SERIALIZED_NAME_TENDER_TYPE = "TenderType";
  @SerializedName(SERIALIZED_NAME_TENDER_TYPE)
  private String tenderType = "credit";

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber = "{{SequenceNumber}}";

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "OrderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber = "{{OrderNumber}}";

  public static final String SERIALIZED_NAME_SEND_RECEIPT = "SendReceipt";
  @SerializedName(SERIALIZED_NAME_SEND_RECEIPT)
  private Boolean sendReceipt;

  public static final String SERIALIZED_NAME_RISK_PROCESSING_ONLY = "RiskProcessingOnly";
  @SerializedName(SERIALIZED_NAME_RISK_PROCESSING_ONLY)
  private Boolean riskProcessingOnly;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTION = "StatementDescription";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTION)
  private String statementDescription = "{{StatementDescription}}";

  public static final String SERIALIZED_NAME_CUSTOMER_I_D = "CustomerID";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_I_D)
  private String customerID;

  public static final String SERIALIZED_NAME_ACTIVATION_DATE = "ActivationDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_DATE)
  private LocalDate activationDate;

  public static final String SERIALIZED_NAME_REQUEST_IP = "RequestIp";
  @SerializedName(SERIALIZED_NAME_REQUEST_IP)
  private String requestIp;

  public static final String SERIALIZED_NAME_CONNEX_PAY_TRANSACTION = "ConnexPayTransaction";
  @SerializedName(SERIALIZED_NAME_CONNEX_PAY_TRANSACTION)
  private SaleCreateTransactionRequestConnexPayTransaction connexPayTransaction;

  public static final String SERIALIZED_NAME_RISK_DATA = "RiskData";
  @SerializedName(SERIALIZED_NAME_RISK_DATA)
  private SaleCreateTransactionRequestRiskData riskData;

  public static final String SERIALIZED_NAME_CARD = "Card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private SaleCreateTransactionRequestCard card;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT = "BankAccount";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT)
  private SaleCreateTransactionRequestBankAccount bankAccount;

  public static final String SERIALIZED_NAME_CUSTOMER = "Customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private SaleCreateTransactionRequestCustomer customer;

  public static final String SERIALIZED_NAME_ENHANCED_DATA = "EnhancedData";
  @SerializedName(SERIALIZED_NAME_ENHANCED_DATA)
  private SaleCreateTransactionRequestEnhancedData enhancedData;

  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "AssociationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_CUSTOM_PARAMETERS = "CustomParameters";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMETERS)
  private List<SaleCreateTransactionRequestCustomParametersInner> customParameters = null;

  public static final String SERIALIZED_NAME_LABEL_I_DS = "LabelIDs";
  @SerializedName(SERIALIZED_NAME_LABEL_I_DS)
  private List<String> labelIDs = null;

  public static final String SERIALIZED_NAME_BROWSER_DATA = "BrowserData";
  @SerializedName(SERIALIZED_NAME_BROWSER_DATA)
  private SaleCreateTransactionRequestBrowserData browserData;

  public SaleCreateTransactionRequest() {
  }

  public SaleCreateTransactionRequest deviceGuid(String deviceGuid) {
    
    
    
    
    this.deviceGuid = deviceGuid;
    return this;
  }

   /**
   * Device&#39;s Guid provided by ConnexPay
   * @return deviceGuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "{{Device}}", required = true, value = "Device's Guid provided by ConnexPay")

  public String getDeviceGuid() {
    return deviceGuid;
  }


  public void setDeviceGuid(String deviceGuid) {
    
    
    
    this.deviceGuid = deviceGuid;
  }


  public SaleCreateTransactionRequest amount(Float amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount of the transaction that will be processed. Note: this value is submitted multiple times (in different formats) within the integration to support different purposes i.e. risk analysis, merchant processing, etc.  The minimum amount is: $0.50.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Amount of the transaction that will be processed. Note: this value is submitted multiple times (in different formats) within the integration to support different purposes i.e. risk analysis, merchant processing, etc.  The minimum amount is: $0.50.")

  public Float getAmount() {
    return amount;
  }


  public void setAmount(Float amount) {
    
    
    
    this.amount = amount;
  }


  public SaleCreateTransactionRequest tenderType(String tenderType) {
    
    
    
    
    this.tenderType = tenderType;
    return this;
  }

   /**
   * Allowed values:  \&quot;credit\&quot; (default if TenderType not provided) and \&quot;ach\&quot;
   * @return tenderType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "credit", value = "Allowed values:  \"credit\" (default if TenderType not provided) and \"ach\"")

  public String getTenderType() {
    return tenderType;
  }


  public void setTenderType(String tenderType) {
    
    
    
    this.tenderType = tenderType;
  }


  public SaleCreateTransactionRequest sequenceNumber(String sequenceNumber) {
    
    
    
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Transaction sequence number within client environment. Provide a unique SequenceNumber for each new request. If a sale request with the same parameter data and the same sequence number is sent within 30 minutes it will be considered a duplicate request and the sale will not process. Note: value is not searchable or reportable in Bridge.  Alphanumeric.
   * @return sequenceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{{SequenceNumber}}", value = "Transaction sequence number within client environment. Provide a unique SequenceNumber for each new request. If a sale request with the same parameter data and the same sequence number is sent within 30 minutes it will be considered a duplicate request and the sale will not process. Note: value is not searchable or reportable in Bridge.  Alphanumeric.")

  public String getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(String sequenceNumber) {
    
    
    
    this.sequenceNumber = sequenceNumber;
  }


  public SaleCreateTransactionRequest orderNumber(String orderNumber) {
    
    
    
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * This is the most common number you&#39;ll see throughout the ConnexPay Portal.  Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field.  The maximum length is 50 alpha-numeric characters and allows dashes ( - ).
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{{OrderNumber}}", value = "This is the most common number you'll see throughout the ConnexPay Portal.  Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field.  The maximum length is 50 alpha-numeric characters and allows dashes ( - ).")

  public String getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(String orderNumber) {
    
    
    
    this.orderNumber = orderNumber;
  }


  public SaleCreateTransactionRequest sendReceipt(Boolean sendReceipt) {
    
    
    
    
    this.sendReceipt = sendReceipt;
    return this;
  }

   /**
   * Value determines whether or not a customer shall be emailed a receipt from the ConnexPay platform if the email address is provided in the API customer block. The default value is TRUE. Set to FALSE so that an email receipt is not sent to the customer. Set to TRUE or leave empty if you want e-mail to be sent. If TRUE, customer&#39;s email must be included in the \&quot;Card.Customer.email\&quot; parameter.
   * @return sendReceipt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value determines whether or not a customer shall be emailed a receipt from the ConnexPay platform if the email address is provided in the API customer block. The default value is TRUE. Set to FALSE so that an email receipt is not sent to the customer. Set to TRUE or leave empty if you want e-mail to be sent. If TRUE, customer's email must be included in the \"Card.Customer.email\" parameter.")

  public Boolean getSendReceipt() {
    return sendReceipt;
  }


  public void setSendReceipt(Boolean sendReceipt) {
    
    
    
    this.sendReceipt = sendReceipt;
  }


  public SaleCreateTransactionRequest riskProcessingOnly(Boolean riskProcessingOnly) {
    
    
    
    
    this.riskProcessingOnly = riskProcessingOnly;
    return this;
  }

   /**
   * Indicator that determines if client would like to evaluate the transactions as risk only rather than process as merchant of record and create a virtual card. The allowed values:  1. Set to TRUE will only run risk validations. If TenderType is not set to Credit, setting TRUE will throw a validation error.  2. Set to FALSE will run risk validations and an authorization on the card. For this option a Processing Merchant account is required, contact ConnexPay support if any questions.  3. Set to NULL and your Merchant Level settings would apply.
   * @return riskProcessingOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicator that determines if client would like to evaluate the transactions as risk only rather than process as merchant of record and create a virtual card. The allowed values:  1. Set to TRUE will only run risk validations. If TenderType is not set to Credit, setting TRUE will throw a validation error.  2. Set to FALSE will run risk validations and an authorization on the card. For this option a Processing Merchant account is required, contact ConnexPay support if any questions.  3. Set to NULL and your Merchant Level settings would apply.")

  public Boolean getRiskProcessingOnly() {
    return riskProcessingOnly;
  }


  public void setRiskProcessingOnly(Boolean riskProcessingOnly) {
    
    
    
    this.riskProcessingOnly = riskProcessingOnly;
  }


  public SaleCreateTransactionRequest statementDescription(String statementDescription) {
    
    
    
    
    this.statementDescription = statementDescription;
    return this;
  }

   /**
   * US Clients only: The statement description allows a client to customize the Merchant name that appears on the cardholder statement such that the cardholder recognizes the transaction on their statement. For US Merchants: ConnexPay recommends sending a recognizable DBA along with the PNR i.e. ABC Travel ABC123.  The maximum length is 25 alpha-numeric characters.  For EU Merchants: The maximum length of the description is 13 alphanumeric characters and the DBA Name and City will automatically be coded to appear as part of the statement description. Note: functionality not applicable for American Express program.
   * @return statementDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{{StatementDescription}}", value = "US Clients only: The statement description allows a client to customize the Merchant name that appears on the cardholder statement such that the cardholder recognizes the transaction on their statement. For US Merchants: ConnexPay recommends sending a recognizable DBA along with the PNR i.e. ABC Travel ABC123.  The maximum length is 25 alpha-numeric characters.  For EU Merchants: The maximum length of the description is 13 alphanumeric characters and the DBA Name and City will automatically be coded to appear as part of the statement description. Note: functionality not applicable for American Express program.")

  public String getStatementDescription() {
    return statementDescription;
  }


  public void setStatementDescription(String statementDescription) {
    
    
    
    this.statementDescription = statementDescription;
  }


  public SaleCreateTransactionRequest customerID(String customerID) {
    
    
    
    
    this.customerID = customerID;
    return this;
  }

   /**
   * Transaction ID within client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes.  The maximum length is 100 characters and is alpha-numeric.
   * @return customerID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction ID within client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes.  The maximum length is 100 characters and is alpha-numeric.")

  public String getCustomerID() {
    return customerID;
  }


  public void setCustomerID(String customerID) {
    
    
    
    this.customerID = customerID;
  }


  public SaleCreateTransactionRequest activationDate(LocalDate activationDate) {
    
    
    
    
    this.activationDate = activationDate;
    return this;
  }

   /**
   * Set a future date on which to run this sale, at least one day from creation date and within 600 days. If this parameter is supplied a record for this sale is created, supplied consumer card information is internally tokenized, but fraud check and authorization do not occur until ConnexPay processes it on the supplied ActivationDate. Alternatively, a client can force activation via the Activate API (see below). If this date is not supplied a sale is authorized and the consumer&#39;s credit card is charged immediately.
   * @return activationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set a future date on which to run this sale, at least one day from creation date and within 600 days. If this parameter is supplied a record for this sale is created, supplied consumer card information is internally tokenized, but fraud check and authorization do not occur until ConnexPay processes it on the supplied ActivationDate. Alternatively, a client can force activation via the Activate API (see below). If this date is not supplied a sale is authorized and the consumer's credit card is charged immediately.")

  public LocalDate getActivationDate() {
    return activationDate;
  }


  public void setActivationDate(LocalDate activationDate) {
    
    
    
    this.activationDate = activationDate;
  }


  public SaleCreateTransactionRequest requestIp(String requestIp) {
    
    
    
    
    this.requestIp = requestIp;
    return this;
  }

   /**
   * Mandatory if TenderType is ACH. Customer&#39;s IP Address is a required parameter for all ACH Sales transactions to adhere to NACHA regulations.
   * @return requestIp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mandatory if TenderType is ACH. Customer's IP Address is a required parameter for all ACH Sales transactions to adhere to NACHA regulations.")

  public String getRequestIp() {
    return requestIp;
  }


  public void setRequestIp(String requestIp) {
    
    
    
    this.requestIp = requestIp;
  }


  public SaleCreateTransactionRequest connexPayTransaction(SaleCreateTransactionRequestConnexPayTransaction connexPayTransaction) {
    
    
    
    
    this.connexPayTransaction = connexPayTransaction;
    return this;
  }

   /**
   * Get connexPayTransaction
   * @return connexPayTransaction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SaleCreateTransactionRequestConnexPayTransaction getConnexPayTransaction() {
    return connexPayTransaction;
  }


  public void setConnexPayTransaction(SaleCreateTransactionRequestConnexPayTransaction connexPayTransaction) {
    
    
    
    this.connexPayTransaction = connexPayTransaction;
  }


  public SaleCreateTransactionRequest riskData(SaleCreateTransactionRequestRiskData riskData) {
    
    
    
    
    this.riskData = riskData;
    return this;
  }

   /**
   * Get riskData
   * @return riskData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SaleCreateTransactionRequestRiskData getRiskData() {
    return riskData;
  }


  public void setRiskData(SaleCreateTransactionRequestRiskData riskData) {
    
    
    
    this.riskData = riskData;
  }


  public SaleCreateTransactionRequest card(SaleCreateTransactionRequestCard card) {
    
    
    
    
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SaleCreateTransactionRequestCard getCard() {
    return card;
  }


  public void setCard(SaleCreateTransactionRequestCard card) {
    
    
    
    this.card = card;
  }


  public SaleCreateTransactionRequest bankAccount(SaleCreateTransactionRequestBankAccount bankAccount) {
    
    
    
    
    this.bankAccount = bankAccount;
    return this;
  }

   /**
   * Get bankAccount
   * @return bankAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SaleCreateTransactionRequestBankAccount getBankAccount() {
    return bankAccount;
  }


  public void setBankAccount(SaleCreateTransactionRequestBankAccount bankAccount) {
    
    
    
    this.bankAccount = bankAccount;
  }


  public SaleCreateTransactionRequest customer(SaleCreateTransactionRequestCustomer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SaleCreateTransactionRequestCustomer getCustomer() {
    return customer;
  }


  public void setCustomer(SaleCreateTransactionRequestCustomer customer) {
    
    
    
    this.customer = customer;
  }


  public SaleCreateTransactionRequest enhancedData(SaleCreateTransactionRequestEnhancedData enhancedData) {
    
    
    
    
    this.enhancedData = enhancedData;
    return this;
  }

   /**
   * Get enhancedData
   * @return enhancedData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SaleCreateTransactionRequestEnhancedData getEnhancedData() {
    return enhancedData;
  }


  public void setEnhancedData(SaleCreateTransactionRequestEnhancedData enhancedData) {
    
    
    
    this.enhancedData = enhancedData;
  }


  public SaleCreateTransactionRequest associationId(String associationId) {
    
    
    
    
    this.associationId = associationId;
    return this;
  }

   /**
   * Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting.
   * @return associationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting.")

  public String getAssociationId() {
    return associationId;
  }


  public void setAssociationId(String associationId) {
    
    
    
    this.associationId = associationId;
  }


  public SaleCreateTransactionRequest customParameters(List<SaleCreateTransactionRequestCustomParametersInner> customParameters) {
    
    
    
    
    this.customParameters = customParameters;
    return this;
  }

  public SaleCreateTransactionRequest addCustomParametersItem(SaleCreateTransactionRequestCustomParametersInner customParametersItem) {
    if (this.customParameters == null) {
      this.customParameters = new ArrayList<>();
    }
    this.customParameters.add(customParametersItem);
    return this;
  }

   /**
   * You can add custom parameters to your sale request in the event that you need to associate additional information with the pay-in. For example, if you want to add an invoice number you would include the custom parameters object with the name parameter &#x3D; \&quot;invoice\&quot; and the value parameter as the invoice number. This requires customized reporting so you&#39;ll need to work with your implementations specialist to determine what&#39;s required.
   * @return customParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "You can add custom parameters to your sale request in the event that you need to associate additional information with the pay-in. For example, if you want to add an invoice number you would include the custom parameters object with the name parameter = \"invoice\" and the value parameter as the invoice number. This requires customized reporting so you'll need to work with your implementations specialist to determine what's required.")

  public List<SaleCreateTransactionRequestCustomParametersInner> getCustomParameters() {
    return customParameters;
  }


  public void setCustomParameters(List<SaleCreateTransactionRequestCustomParametersInner> customParameters) {
    
    
    
    this.customParameters = customParameters;
  }


  public SaleCreateTransactionRequest labelIDs(List<String> labelIDs) {
    
    
    
    
    this.labelIDs = labelIDs;
    return this;
  }

  public SaleCreateTransactionRequest addLabelIDsItem(String labelIDsItem) {
    if (this.labelIDs == null) {
      this.labelIDs = new ArrayList<>();
    }
    this.labelIDs.add(labelIDsItem);
    return this;
  }

   /**
   * Utilize Label IDs to associate a sale to a specific label(s) within ConnexPay Bridge UI for your organization. If a sale is tied to an incorrect Label, it will not filter or display correctly in Bridge&#39;s Search Grid. Please contact your Customer Care Consultant for a list of valid Label IDs before use.
   * @return labelIDs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Utilize Label IDs to associate a sale to a specific label(s) within ConnexPay Bridge UI for your organization. If a sale is tied to an incorrect Label, it will not filter or display correctly in Bridge's Search Grid. Please contact your Customer Care Consultant for a list of valid Label IDs before use.")

  public List<String> getLabelIDs() {
    return labelIDs;
  }


  public void setLabelIDs(List<String> labelIDs) {
    
    
    
    this.labelIDs = labelIDs;
  }


  public SaleCreateTransactionRequest browserData(SaleCreateTransactionRequestBrowserData browserData) {
    
    
    
    
    this.browserData = browserData;
    return this;
  }

   /**
   * Get browserData
   * @return browserData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SaleCreateTransactionRequestBrowserData getBrowserData() {
    return browserData;
  }


  public void setBrowserData(SaleCreateTransactionRequestBrowserData browserData) {
    
    
    
    this.browserData = browserData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SaleCreateTransactionRequest instance itself
   */
  public SaleCreateTransactionRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleCreateTransactionRequest saleCreateTransactionRequest = (SaleCreateTransactionRequest) o;
    return Objects.equals(this.deviceGuid, saleCreateTransactionRequest.deviceGuid) &&
        Objects.equals(this.amount, saleCreateTransactionRequest.amount) &&
        Objects.equals(this.tenderType, saleCreateTransactionRequest.tenderType) &&
        Objects.equals(this.sequenceNumber, saleCreateTransactionRequest.sequenceNumber) &&
        Objects.equals(this.orderNumber, saleCreateTransactionRequest.orderNumber) &&
        Objects.equals(this.sendReceipt, saleCreateTransactionRequest.sendReceipt) &&
        Objects.equals(this.riskProcessingOnly, saleCreateTransactionRequest.riskProcessingOnly) &&
        Objects.equals(this.statementDescription, saleCreateTransactionRequest.statementDescription) &&
        Objects.equals(this.customerID, saleCreateTransactionRequest.customerID) &&
        Objects.equals(this.activationDate, saleCreateTransactionRequest.activationDate) &&
        Objects.equals(this.requestIp, saleCreateTransactionRequest.requestIp) &&
        Objects.equals(this.connexPayTransaction, saleCreateTransactionRequest.connexPayTransaction) &&
        Objects.equals(this.riskData, saleCreateTransactionRequest.riskData) &&
        Objects.equals(this.card, saleCreateTransactionRequest.card) &&
        Objects.equals(this.bankAccount, saleCreateTransactionRequest.bankAccount) &&
        Objects.equals(this.customer, saleCreateTransactionRequest.customer) &&
        Objects.equals(this.enhancedData, saleCreateTransactionRequest.enhancedData) &&
        Objects.equals(this.associationId, saleCreateTransactionRequest.associationId) &&
        Objects.equals(this.customParameters, saleCreateTransactionRequest.customParameters) &&
        Objects.equals(this.labelIDs, saleCreateTransactionRequest.labelIDs) &&
        Objects.equals(this.browserData, saleCreateTransactionRequest.browserData)&&
        Objects.equals(this.additionalProperties, saleCreateTransactionRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceGuid, amount, tenderType, sequenceNumber, orderNumber, sendReceipt, riskProcessingOnly, statementDescription, customerID, activationDate, requestIp, connexPayTransaction, riskData, card, bankAccount, customer, enhancedData, associationId, customParameters, labelIDs, browserData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleCreateTransactionRequest {\n");
    sb.append("    deviceGuid: ").append(toIndentedString(deviceGuid)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    tenderType: ").append(toIndentedString(tenderType)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    sendReceipt: ").append(toIndentedString(sendReceipt)).append("\n");
    sb.append("    riskProcessingOnly: ").append(toIndentedString(riskProcessingOnly)).append("\n");
    sb.append("    statementDescription: ").append(toIndentedString(statementDescription)).append("\n");
    sb.append("    customerID: ").append(toIndentedString(customerID)).append("\n");
    sb.append("    activationDate: ").append(toIndentedString(activationDate)).append("\n");
    sb.append("    requestIp: ").append(toIndentedString(requestIp)).append("\n");
    sb.append("    connexPayTransaction: ").append(toIndentedString(connexPayTransaction)).append("\n");
    sb.append("    riskData: ").append(toIndentedString(riskData)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    enhancedData: ").append(toIndentedString(enhancedData)).append("\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    customParameters: ").append(toIndentedString(customParameters)).append("\n");
    sb.append("    labelIDs: ").append(toIndentedString(labelIDs)).append("\n");
    sb.append("    browserData: ").append(toIndentedString(browserData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceGuid");
    openapiFields.add("Amount");
    openapiFields.add("TenderType");
    openapiFields.add("SequenceNumber");
    openapiFields.add("OrderNumber");
    openapiFields.add("SendReceipt");
    openapiFields.add("RiskProcessingOnly");
    openapiFields.add("StatementDescription");
    openapiFields.add("CustomerID");
    openapiFields.add("ActivationDate");
    openapiFields.add("RequestIp");
    openapiFields.add("ConnexPayTransaction");
    openapiFields.add("RiskData");
    openapiFields.add("Card");
    openapiFields.add("BankAccount");
    openapiFields.add("Customer");
    openapiFields.add("EnhancedData");
    openapiFields.add("AssociationId");
    openapiFields.add("CustomParameters");
    openapiFields.add("LabelIDs");
    openapiFields.add("BrowserData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeviceGuid");
    openapiRequiredFields.add("Amount");
    openapiRequiredFields.add("ConnexPayTransaction");
    openapiRequiredFields.add("RiskData");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SaleCreateTransactionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SaleCreateTransactionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaleCreateTransactionRequest is not found in the empty JSON string", SaleCreateTransactionRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SaleCreateTransactionRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("DeviceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceGuid").toString()));
      }
      if ((jsonObj.get("TenderType") != null && !jsonObj.get("TenderType").isJsonNull()) && !jsonObj.get("TenderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenderType").toString()));
      }
      if ((jsonObj.get("SequenceNumber") != null && !jsonObj.get("SequenceNumber").isJsonNull()) && !jsonObj.get("SequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SequenceNumber").toString()));
      }
      if ((jsonObj.get("OrderNumber") != null && !jsonObj.get("OrderNumber").isJsonNull()) && !jsonObj.get("OrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderNumber").toString()));
      }
      if ((jsonObj.get("StatementDescription") != null && !jsonObj.get("StatementDescription").isJsonNull()) && !jsonObj.get("StatementDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatementDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatementDescription").toString()));
      }
      if ((jsonObj.get("CustomerID") != null && !jsonObj.get("CustomerID").isJsonNull()) && !jsonObj.get("CustomerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerID").toString()));
      }
      if ((jsonObj.get("RequestIp") != null && !jsonObj.get("RequestIp").isJsonNull()) && !jsonObj.get("RequestIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequestIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RequestIp").toString()));
      }
      // validate the required field `ConnexPayTransaction`
      SaleCreateTransactionRequestConnexPayTransaction.validateJsonObject(jsonObj.getAsJsonObject("ConnexPayTransaction"));
      // validate the required field `RiskData`
      SaleCreateTransactionRequestRiskData.validateJsonObject(jsonObj.getAsJsonObject("RiskData"));
      // validate the optional field `Card`
      if (jsonObj.get("Card") != null && !jsonObj.get("Card").isJsonNull()) {
        SaleCreateTransactionRequestCard.validateJsonObject(jsonObj.getAsJsonObject("Card"));
      }
      // validate the optional field `BankAccount`
      if (jsonObj.get("BankAccount") != null && !jsonObj.get("BankAccount").isJsonNull()) {
        SaleCreateTransactionRequestBankAccount.validateJsonObject(jsonObj.getAsJsonObject("BankAccount"));
      }
      // validate the optional field `Customer`
      if (jsonObj.get("Customer") != null && !jsonObj.get("Customer").isJsonNull()) {
        SaleCreateTransactionRequestCustomer.validateJsonObject(jsonObj.getAsJsonObject("Customer"));
      }
      // validate the optional field `EnhancedData`
      if (jsonObj.get("EnhancedData") != null && !jsonObj.get("EnhancedData").isJsonNull()) {
        SaleCreateTransactionRequestEnhancedData.validateJsonObject(jsonObj.getAsJsonObject("EnhancedData"));
      }
      if ((jsonObj.get("AssociationId") != null && !jsonObj.get("AssociationId").isJsonNull()) && !jsonObj.get("AssociationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssociationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssociationId").toString()));
      }
      if (jsonObj.get("CustomParameters") != null && !jsonObj.get("CustomParameters").isJsonNull()) {
        JsonArray jsonArraycustomParameters = jsonObj.getAsJsonArray("CustomParameters");
        if (jsonArraycustomParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CustomParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CustomParameters` to be an array in the JSON string but got `%s`", jsonObj.get("CustomParameters").toString()));
          }

          // validate the optional field `CustomParameters` (array)
          for (int i = 0; i < jsonArraycustomParameters.size(); i++) {
            SaleCreateTransactionRequestCustomParametersInner.validateJsonObject(jsonArraycustomParameters.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LabelIDs") != null && !jsonObj.get("LabelIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LabelIDs` to be an array in the JSON string but got `%s`", jsonObj.get("LabelIDs").toString()));
      }
      // validate the optional field `BrowserData`
      if (jsonObj.get("BrowserData") != null && !jsonObj.get("BrowserData").isJsonNull()) {
        SaleCreateTransactionRequestBrowserData.validateJsonObject(jsonObj.getAsJsonObject("BrowserData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleCreateTransactionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaleCreateTransactionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleCreateTransactionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleCreateTransactionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleCreateTransactionRequest>() {
           @Override
           public void write(JsonWriter out, SaleCreateTransactionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleCreateTransactionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SaleCreateTransactionRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SaleCreateTransactionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SaleCreateTransactionRequest
  * @throws IOException if the JSON string is invalid with respect to SaleCreateTransactionRequest
  */
  public static SaleCreateTransactionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleCreateTransactionRequest.class);
  }

 /**
  * Convert an instance of SaleCreateTransactionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

