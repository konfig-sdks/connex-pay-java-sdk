/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DailyAccountingDetail
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DailyAccountingDetail {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MERCHANT_GUID = "merchantGuid";
  @SerializedName(SERIALIZED_NAME_MERCHANT_GUID)
  private UUID merchantGuid;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "clientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_RELEASED_DATE = "releasedDate";
  @SerializedName(SERIALIZED_NAME_RELEASED_DATE)
  private LocalDate releasedDate;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CARD_LAST_FOUR = "cardLastFour";
  @SerializedName(SERIALIZED_NAME_CARD_LAST_FOUR)
  private String cardLastFour;

  public static final String SERIALIZED_NAME_INCOMING_TRANSACTION_CODE = "incomingTransactionCode";
  @SerializedName(SERIALIZED_NAME_INCOMING_TRANSACTION_CODE)
  private String incomingTransactionCode;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_TICKET_NUMBER = "ticketNumber";
  @SerializedName(SERIALIZED_NAME_TICKET_NUMBER)
  private String ticketNumber;

  public static final String SERIALIZED_NAME_ENTITY_GUID = "entityGuid";
  @SerializedName(SERIALIZED_NAME_ENTITY_GUID)
  private UUID entityGuid;

  public static final String SERIALIZED_NAME_PURCHASE_TYPE = "purchaseType";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TYPE)
  private String purchaseType;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_ISSUED_AMOUNT = "issuedAmount";
  @SerializedName(SERIALIZED_NAME_ISSUED_AMOUNT)
  private Double issuedAmount;

  public static final String SERIALIZED_NAME_LABEL_NAME = "labelName";
  @SerializedName(SERIALIZED_NAME_LABEL_NAME)
  private String labelName;

  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "associationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_SALE_GUID = "saleGuid";
  @SerializedName(SERIALIZED_NAME_SALE_GUID)
  private UUID saleGuid;

  public static final String SERIALIZED_NAME_CARD_GUID = "cardGuid";
  @SerializedName(SERIALIZED_NAME_CARD_GUID)
  private UUID cardGuid;

  public static final String SERIALIZED_NAME_DATE_TIME = "dateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private OffsetDateTime dateTime;

  public DailyAccountingDetail() {
  }

  public DailyAccountingDetail description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description    The type of transaction being released in this detail record.    Possible Values:    ACH Debit Reject    Bank A ACH Credit Reject    Credit to Client (Withdrawal from Cash Account)    Daily Flex Funding    Debit from Client (Deposit to Cash Account)    Empty    Prior Day Cash Balance    Purchase - ACH Purchase    Purchase - ACH Return    Purchase - Push To Card Payout    Purchase - Virtual Card Chargeback    Purchase - Virtual Card Purchase    Purchase - Virtual Card Return    Reserve Balance    Sale - ACH Return    Sale - ACH Sale    Sale - ACH Void    Sale - Credit Card Adjustment    Sale - Credit Card Chargeback    Sale - Credit Card Return    Sale - Credit Card Sale    Sale - Credit Card Void    Unspecified
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description    The type of transaction being released in this detail record.    Possible Values:    ACH Debit Reject    Bank A ACH Credit Reject    Credit to Client (Withdrawal from Cash Account)    Daily Flex Funding    Debit from Client (Deposit to Cash Account)    Empty    Prior Day Cash Balance    Purchase - ACH Purchase    Purchase - ACH Return    Purchase - Push To Card Payout    Purchase - Virtual Card Chargeback    Purchase - Virtual Card Purchase    Purchase - Virtual Card Return    Reserve Balance    Sale - ACH Return    Sale - ACH Sale    Sale - ACH Void    Sale - Credit Card Adjustment    Sale - Credit Card Chargeback    Sale - Credit Card Return    Sale - Credit Card Sale    Sale - Credit Card Void    Unspecified")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public DailyAccountingDetail merchantGuid(UUID merchantGuid) {
    
    
    
    
    this.merchantGuid = merchantGuid;
    return this;
  }

   /**
   * Merchant Guid    Unique identifier assigned to the merchant by ConnexPay.
   * @return merchantGuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant Guid    Unique identifier assigned to the merchant by ConnexPay.")

  public UUID getMerchantGuid() {
    return merchantGuid;
  }


  public void setMerchantGuid(UUID merchantGuid) {
    
    
    
    this.merchantGuid = merchantGuid;
  }


  public DailyAccountingDetail clientName(String clientName) {
    
    
    
    
    this.clientName = clientName;
    return this;
  }

   /**
   * Client Name    Unique name assigned to the client by ConnexPay.
   * @return clientName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Client Name    Unique name assigned to the client by ConnexPay.")

  public String getClientName() {
    return clientName;
  }


  public void setClientName(String clientName) {
    
    
    
    this.clientName = clientName;
  }


  public DailyAccountingDetail releasedDate(LocalDate releasedDate) {
    
    
    
    
    this.releasedDate = releasedDate;
    return this;
  }

   /**
   * Released Date    Date on which the Accounting File for this detail record was released to the client.
   * @return releasedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Released Date    Date on which the Accounting File for this detail record was released to the client.")

  public LocalDate getReleasedDate() {
    return releasedDate;
  }


  public void setReleasedDate(LocalDate releasedDate) {
    
    
    
    this.releasedDate = releasedDate;
  }


  public DailyAccountingDetail orderNumber(String orderNumber) {
    
    
    
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * Order Number    Identifier that may be provided by the client during the Create Sale or IssueLite process to identify the order.  Can be comprised of multiple sales and purchases.
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order Number    Identifier that may be provided by the client during the Create Sale or IssueLite process to identify the order.  Can be comprised of multiple sales and purchases.")

  public String getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(String orderNumber) {
    
    
    
    this.orderNumber = orderNumber;
  }


  public DailyAccountingDetail name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name    The name line 1 and 2 of the virtual credit card.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name    The name line 1 and 2 of the virtual credit card.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public DailyAccountingDetail cardLastFour(String cardLastFour) {
    
    
    
    
    this.cardLastFour = cardLastFour;
    return this;
  }

   /**
   * Card Last Four    The last four digits of the card number associated with the detail record.
   * @return cardLastFour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card Last Four    The last four digits of the card number associated with the detail record.")

  public String getCardLastFour() {
    return cardLastFour;
  }


  public void setCardLastFour(String cardLastFour) {
    
    
    
    this.cardLastFour = cardLastFour;
  }


  public DailyAccountingDetail incomingTransactionCode(String incomingTransactionCode) {
    
    
    
    
    this.incomingTransactionCode = incomingTransactionCode;
    return this;
  }

   /**
   * Incoming Transaction Code (ITC)    A unique ConnexPay generated token that connects an incoming sale transaction to an outbound  purchase (virtual card or ACH) transaction. An ITC is generated and returned for each successful  authorization associated with a Sale request and is required for each purchase request.
   * @return incomingTransactionCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Incoming Transaction Code (ITC)    A unique ConnexPay generated token that connects an incoming sale transaction to an outbound  purchase (virtual card or ACH) transaction. An ITC is generated and returned for each successful  authorization associated with a Sale request and is required for each purchase request.")

  public String getIncomingTransactionCode() {
    return incomingTransactionCode;
  }


  public void setIncomingTransactionCode(String incomingTransactionCode) {
    
    
    
    this.incomingTransactionCode = incomingTransactionCode;
  }


  public DailyAccountingDetail customerId(String customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Customer ID    Identifier that may be provided by the client during the Create Sale or IssueLite process. Can be comprised   of multiple sales and purchases. Acts as a secondary identifier in conjunction with OrderNumber.
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer ID    Identifier that may be provided by the client during the Create Sale or IssueLite process. Can be comprised   of multiple sales and purchases. Acts as a secondary identifier in conjunction with OrderNumber.")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    
    
    
    this.customerId = customerId;
  }


  public DailyAccountingDetail amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount    Amount of the sale or purchase transaction.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount    Amount of the sale or purchase transaction.")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public DailyAccountingDetail merchantName(String merchantName) {
    
    
    
    
    this.merchantName = merchantName;
    return this;
  }

   /**
   * Merchant Name    Name of the supplier processing the virtual credit card transaction.
   * @return merchantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant Name    Name of the supplier processing the virtual credit card transaction.")

  public String getMerchantName() {
    return merchantName;
  }


  public void setMerchantName(String merchantName) {
    
    
    
    this.merchantName = merchantName;
  }


  public DailyAccountingDetail ticketNumber(String ticketNumber) {
    
    
    
    
    this.ticketNumber = ticketNumber;
    return this;
  }

   /**
   * Ticket Number    Addendum data associated with the transaction that is returned if provided during the virtual credit card or ACH creation
   * @return ticketNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ticket Number    Addendum data associated with the transaction that is returned if provided during the virtual credit card or ACH creation")

  public String getTicketNumber() {
    return ticketNumber;
  }


  public void setTicketNumber(String ticketNumber) {
    
    
    
    this.ticketNumber = ticketNumber;
  }


  public DailyAccountingDetail entityGuid(UUID entityGuid) {
    
    
    
    
    this.entityGuid = entityGuid;
    return this;
  }

   /**
   * Entity Guid    Entity Guid of the detail record to link them back to the original entity.
   * @return entityGuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Entity Guid    Entity Guid of the detail record to link them back to the original entity.")

  public UUID getEntityGuid() {
    return entityGuid;
  }


  public void setEntityGuid(UUID entityGuid) {
    
    
    
    this.entityGuid = entityGuid;
  }


  public DailyAccountingDetail purchaseType(String purchaseType) {
    
    
    
    
    this.purchaseType = purchaseType;
    return this;
  }

   /**
   * Purchase Type    Description of the client&#39;s category group. Essentially, the industry where the virtual card will be utilized.    See the Issue Card method in the Purchases API documentation for more details.
   * @return purchaseType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase Type    Description of the client's category group. Essentially, the industry where the virtual card will be utilized.    See the Issue Card method in the Purchases API documentation for more details.")

  public String getPurchaseType() {
    return purchaseType;
  }


  public void setPurchaseType(String purchaseType) {
    
    
    
    this.purchaseType = purchaseType;
  }


  public DailyAccountingDetail entityId(String entityId) {
    
    
    
    
    this.entityId = entityId;
    return this;
  }

   /**
   * Entity Id    Entity Guid of the detail record to link them back to the original entity.
   * @return entityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Entity Id    Entity Guid of the detail record to link them back to the original entity.")

  public String getEntityId() {
    return entityId;
  }


  public void setEntityId(String entityId) {
    
    
    
    this.entityId = entityId;
  }


  public DailyAccountingDetail issuedAmount(Double issuedAmount) {
    
    
    
    
    this.issuedAmount = issuedAmount;
    return this;
  }

   /**
   * Issued Amount    Amount of the virtual credit card issued to the client.
   * @return issuedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Issued Amount    Amount of the virtual credit card issued to the client.")

  public Double getIssuedAmount() {
    return issuedAmount;
  }


  public void setIssuedAmount(Double issuedAmount) {
    
    
    
    this.issuedAmount = issuedAmount;
  }


  public DailyAccountingDetail labelName(String labelName) {
    
    
    
    
    this.labelName = labelName;
    return this;
  }

   /**
   * Label Name    Comma-separated list of labels associated with the sale.
   * @return labelName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label Name    Comma-separated list of labels associated with the sale.")

  public String getLabelName() {
    return labelName;
  }


  public void setLabelName(String labelName) {
    
    
    
    this.labelName = labelName;
  }


  public DailyAccountingDetail associationId(String associationId) {
    
    
    
    
    this.associationId = associationId;
    return this;
  }

   /**
   * Association ID    Used to associate a virtual card to one or more sales.
   * @return associationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Association ID    Used to associate a virtual card to one or more sales.")

  public String getAssociationId() {
    return associationId;
  }


  public void setAssociationId(String associationId) {
    
    
    
    this.associationId = associationId;
  }


  public DailyAccountingDetail saleGuid(UUID saleGuid) {
    
    
    
    
    this.saleGuid = saleGuid;
    return this;
  }

   /**
   * Sale Guid    Guid value returned from the Create Sale method in the Sales API. Associated with   sale transaction detail records.
   * @return saleGuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sale Guid    Guid value returned from the Create Sale method in the Sales API. Associated with   sale transaction detail records.")

  public UUID getSaleGuid() {
    return saleGuid;
  }


  public void setSaleGuid(UUID saleGuid) {
    
    
    
    this.saleGuid = saleGuid;
  }


  public DailyAccountingDetail cardGuid(UUID cardGuid) {
    
    
    
    
    this.cardGuid = cardGuid;
    return this;
  }

   /**
   * Card Guid    Guid value return from the Issue Card method in the Purchases API. Associated with   purchase and return detail records.
   * @return cardGuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card Guid    Guid value return from the Issue Card method in the Purchases API. Associated with   purchase and return detail records.")

  public UUID getCardGuid() {
    return cardGuid;
  }


  public void setCardGuid(UUID cardGuid) {
    
    
    
    this.cardGuid = cardGuid;
  }


  public DailyAccountingDetail dateTime(OffsetDateTime dateTime) {
    
    
    
    
    this.dateTime = dateTime;
    return this;
  }

   /**
   * Date Time    For Sale detail records, the date of the sale transaction.    For Purchase and Return detail records, the date of the purchase or return settlement.    Note: This date may not be the same as ReleasedDate because release does not occur on weekends and bank holidays.
   * @return dateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date Time    For Sale detail records, the date of the sale transaction.    For Purchase and Return detail records, the date of the purchase or return settlement.    Note: This date may not be the same as ReleasedDate because release does not occur on weekends and bank holidays.")

  public OffsetDateTime getDateTime() {
    return dateTime;
  }


  public void setDateTime(OffsetDateTime dateTime) {
    
    
    
    this.dateTime = dateTime;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DailyAccountingDetail instance itself
   */
  public DailyAccountingDetail putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DailyAccountingDetail dailyAccountingDetail = (DailyAccountingDetail) o;
    return Objects.equals(this.description, dailyAccountingDetail.description) &&
        Objects.equals(this.merchantGuid, dailyAccountingDetail.merchantGuid) &&
        Objects.equals(this.clientName, dailyAccountingDetail.clientName) &&
        Objects.equals(this.releasedDate, dailyAccountingDetail.releasedDate) &&
        Objects.equals(this.orderNumber, dailyAccountingDetail.orderNumber) &&
        Objects.equals(this.name, dailyAccountingDetail.name) &&
        Objects.equals(this.cardLastFour, dailyAccountingDetail.cardLastFour) &&
        Objects.equals(this.incomingTransactionCode, dailyAccountingDetail.incomingTransactionCode) &&
        Objects.equals(this.customerId, dailyAccountingDetail.customerId) &&
        Objects.equals(this.amount, dailyAccountingDetail.amount) &&
        Objects.equals(this.merchantName, dailyAccountingDetail.merchantName) &&
        Objects.equals(this.ticketNumber, dailyAccountingDetail.ticketNumber) &&
        Objects.equals(this.entityGuid, dailyAccountingDetail.entityGuid) &&
        Objects.equals(this.purchaseType, dailyAccountingDetail.purchaseType) &&
        Objects.equals(this.entityId, dailyAccountingDetail.entityId) &&
        Objects.equals(this.issuedAmount, dailyAccountingDetail.issuedAmount) &&
        Objects.equals(this.labelName, dailyAccountingDetail.labelName) &&
        Objects.equals(this.associationId, dailyAccountingDetail.associationId) &&
        Objects.equals(this.saleGuid, dailyAccountingDetail.saleGuid) &&
        Objects.equals(this.cardGuid, dailyAccountingDetail.cardGuid) &&
        Objects.equals(this.dateTime, dailyAccountingDetail.dateTime)&&
        Objects.equals(this.additionalProperties, dailyAccountingDetail.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, merchantGuid, clientName, releasedDate, orderNumber, name, cardLastFour, incomingTransactionCode, customerId, amount, merchantName, ticketNumber, entityGuid, purchaseType, entityId, issuedAmount, labelName, associationId, saleGuid, cardGuid, dateTime, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DailyAccountingDetail {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    merchantGuid: ").append(toIndentedString(merchantGuid)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    releasedDate: ").append(toIndentedString(releasedDate)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    cardLastFour: ").append(toIndentedString(cardLastFour)).append("\n");
    sb.append("    incomingTransactionCode: ").append(toIndentedString(incomingTransactionCode)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    ticketNumber: ").append(toIndentedString(ticketNumber)).append("\n");
    sb.append("    entityGuid: ").append(toIndentedString(entityGuid)).append("\n");
    sb.append("    purchaseType: ").append(toIndentedString(purchaseType)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    issuedAmount: ").append(toIndentedString(issuedAmount)).append("\n");
    sb.append("    labelName: ").append(toIndentedString(labelName)).append("\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    saleGuid: ").append(toIndentedString(saleGuid)).append("\n");
    sb.append("    cardGuid: ").append(toIndentedString(cardGuid)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("merchantGuid");
    openapiFields.add("clientName");
    openapiFields.add("releasedDate");
    openapiFields.add("orderNumber");
    openapiFields.add("name");
    openapiFields.add("cardLastFour");
    openapiFields.add("incomingTransactionCode");
    openapiFields.add("customerId");
    openapiFields.add("amount");
    openapiFields.add("merchantName");
    openapiFields.add("ticketNumber");
    openapiFields.add("entityGuid");
    openapiFields.add("purchaseType");
    openapiFields.add("entityId");
    openapiFields.add("issuedAmount");
    openapiFields.add("labelName");
    openapiFields.add("associationId");
    openapiFields.add("saleGuid");
    openapiFields.add("cardGuid");
    openapiFields.add("dateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DailyAccountingDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DailyAccountingDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DailyAccountingDetail is not found in the empty JSON string", DailyAccountingDetail.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("merchantGuid") != null && !jsonObj.get("merchantGuid").isJsonNull()) && !jsonObj.get("merchantGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantGuid").toString()));
      }
      if (!jsonObj.get("clientName").isJsonNull() && (jsonObj.get("clientName") != null && !jsonObj.get("clientName").isJsonNull()) && !jsonObj.get("clientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientName").toString()));
      }
      if (!jsonObj.get("orderNumber").isJsonNull() && (jsonObj.get("orderNumber") != null && !jsonObj.get("orderNumber").isJsonNull()) && !jsonObj.get("orderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderNumber").toString()));
      }
      if (!jsonObj.get("name").isJsonNull() && (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("cardLastFour").isJsonNull() && (jsonObj.get("cardLastFour") != null && !jsonObj.get("cardLastFour").isJsonNull()) && !jsonObj.get("cardLastFour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardLastFour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardLastFour").toString()));
      }
      if (!jsonObj.get("incomingTransactionCode").isJsonNull() && (jsonObj.get("incomingTransactionCode") != null && !jsonObj.get("incomingTransactionCode").isJsonNull()) && !jsonObj.get("incomingTransactionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incomingTransactionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incomingTransactionCode").toString()));
      }
      if (!jsonObj.get("customerId").isJsonNull() && (jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if (!jsonObj.get("merchantName").isJsonNull() && (jsonObj.get("merchantName") != null && !jsonObj.get("merchantName").isJsonNull()) && !jsonObj.get("merchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantName").toString()));
      }
      if (!jsonObj.get("ticketNumber").isJsonNull() && (jsonObj.get("ticketNumber") != null && !jsonObj.get("ticketNumber").isJsonNull()) && !jsonObj.get("ticketNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticketNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticketNumber").toString()));
      }
      if (!jsonObj.get("entityGuid").isJsonNull() && (jsonObj.get("entityGuid") != null && !jsonObj.get("entityGuid").isJsonNull()) && !jsonObj.get("entityGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityGuid").toString()));
      }
      if (!jsonObj.get("purchaseType").isJsonNull() && (jsonObj.get("purchaseType") != null && !jsonObj.get("purchaseType").isJsonNull()) && !jsonObj.get("purchaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseType").toString()));
      }
      if (!jsonObj.get("entityId").isJsonNull() && (jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if (!jsonObj.get("labelName").isJsonNull() && (jsonObj.get("labelName") != null && !jsonObj.get("labelName").isJsonNull()) && !jsonObj.get("labelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelName").toString()));
      }
      if (!jsonObj.get("associationId").isJsonNull() && (jsonObj.get("associationId") != null && !jsonObj.get("associationId").isJsonNull()) && !jsonObj.get("associationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associationId").toString()));
      }
      if (!jsonObj.get("saleGuid").isJsonNull() && (jsonObj.get("saleGuid") != null && !jsonObj.get("saleGuid").isJsonNull()) && !jsonObj.get("saleGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `saleGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("saleGuid").toString()));
      }
      if (!jsonObj.get("cardGuid").isJsonNull() && (jsonObj.get("cardGuid") != null && !jsonObj.get("cardGuid").isJsonNull()) && !jsonObj.get("cardGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardGuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DailyAccountingDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DailyAccountingDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DailyAccountingDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DailyAccountingDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<DailyAccountingDetail>() {
           @Override
           public void write(JsonWriter out, DailyAccountingDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DailyAccountingDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DailyAccountingDetail instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DailyAccountingDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DailyAccountingDetail
  * @throws IOException if the JSON string is invalid with respect to DailyAccountingDetail
  */
  public static DailyAccountingDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DailyAccountingDetail.class);
  }

 /**
  * Convert an instance of DailyAccountingDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

