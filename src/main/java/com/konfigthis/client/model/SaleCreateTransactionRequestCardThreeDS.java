/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ThreeDS object is required when 3DS authentication parameters are being passed in the Sale or Auth.  For US clients: the parameters are identified using the 3DS Authentication endpoint.  For EU clients: the parameters are identified when a cardholder challenge and/or fingerprint authentication is required after calling the Create Sale or Auth Only endpoint with the BrowserData object details.
 */
@ApiModel(description = "ThreeDS object is required when 3DS authentication parameters are being passed in the Sale or Auth.  For US clients: the parameters are identified using the 3DS Authentication endpoint.  For EU clients: the parameters are identified when a cardholder challenge and/or fingerprint authentication is required after calling the Create Sale or Auth Only endpoint with the BrowserData object details.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SaleCreateTransactionRequestCardThreeDS {
  public static final String SERIALIZED_NAME_SECURE_CODE = "SecureCode";
  @SerializedName(SERIALIZED_NAME_SECURE_CODE)
  private String secureCode;

  public static final String SERIALIZED_NAME_CAVV = "Cavv";
  @SerializedName(SERIALIZED_NAME_CAVV)
  private String cavv;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_DIRECTORY_SERVER_TRANSACTION_I_D = "DirectoryServerTransactionID";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_SERVER_TRANSACTION_I_D)
  private String directoryServerTransactionID;

  public static final String SERIALIZED_NAME_ACS_TRANSACTION_ID = "AcsTransactionId";
  @SerializedName(SERIALIZED_NAME_ACS_TRANSACTION_ID)
  private String acsTransactionId;

  public static final String SERIALIZED_NAME_E_C_I = "ECI";
  @SerializedName(SERIALIZED_NAME_E_C_I)
  private String ECI;

  public SaleCreateTransactionRequestCardThreeDS() {
  }

  public SaleCreateTransactionRequestCardThreeDS secureCode(String secureCode) {
    
    
    
    
    this.secureCode = secureCode;
    return this;
  }

   /**
   * Get secureCode
   * @return secureCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSecureCode() {
    return secureCode;
  }


  public void setSecureCode(String secureCode) {
    
    
    
    this.secureCode = secureCode;
  }


  public SaleCreateTransactionRequestCardThreeDS cavv(String cavv) {
    
    
    
    
    this.cavv = cavv;
    return this;
  }

   /**
   * Cardholder authentication verification value
   * @return cavv
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cardholder authentication verification value")

  public String getCavv() {
    return cavv;
  }


  public void setCavv(String cavv) {
    
    
    
    this.cavv = cavv;
  }


  public SaleCreateTransactionRequestCardThreeDS version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * Version of 3DS being used
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version of 3DS being used")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public SaleCreateTransactionRequestCardThreeDS directoryServerTransactionID(String directoryServerTransactionID) {
    
    
    
    
    this.directoryServerTransactionID = directoryServerTransactionID;
    return this;
  }

   /**
   * Unique identifier provided by the card scheme as part of 3D Secure authentication.
   * @return directoryServerTransactionID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier provided by the card scheme as part of 3D Secure authentication.")

  public String getDirectoryServerTransactionID() {
    return directoryServerTransactionID;
  }


  public void setDirectoryServerTransactionID(String directoryServerTransactionID) {
    
    
    
    this.directoryServerTransactionID = directoryServerTransactionID;
  }


  public SaleCreateTransactionRequestCardThreeDS acsTransactionId(String acsTransactionId) {
    
    
    
    
    this.acsTransactionId = acsTransactionId;
    return this;
  }

   /**
   * Unique Identifier provided by the Access Control Server of the Card Issuer.
   * @return acsTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique Identifier provided by the Access Control Server of the Card Issuer.")

  public String getAcsTransactionId() {
    return acsTransactionId;
  }


  public void setAcsTransactionId(String acsTransactionId) {
    
    
    
    this.acsTransactionId = acsTransactionId;
  }


  public SaleCreateTransactionRequestCardThreeDS ECI(String ECI) {
    
    
    
    
    this.ECI = ECI;
    return this;
  }

   /**
   * Displays the Electronic Commerce Indicator (ECI). The ECI indicates the security level of the payment information provided to the merchant. A value of 0, 1 or 2 is a Mastercard transaction. A value of 5, 6 or 7 is a Visa, American Express, Diners or Discover card.
   * @return ECI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Displays the Electronic Commerce Indicator (ECI). The ECI indicates the security level of the payment information provided to the merchant. A value of 0, 1 or 2 is a Mastercard transaction. A value of 5, 6 or 7 is a Visa, American Express, Diners or Discover card.")

  public String getECI() {
    return ECI;
  }


  public void setECI(String ECI) {
    
    
    
    this.ECI = ECI;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SaleCreateTransactionRequestCardThreeDS instance itself
   */
  public SaleCreateTransactionRequestCardThreeDS putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleCreateTransactionRequestCardThreeDS saleCreateTransactionRequestCardThreeDS = (SaleCreateTransactionRequestCardThreeDS) o;
    return Objects.equals(this.secureCode, saleCreateTransactionRequestCardThreeDS.secureCode) &&
        Objects.equals(this.cavv, saleCreateTransactionRequestCardThreeDS.cavv) &&
        Objects.equals(this.version, saleCreateTransactionRequestCardThreeDS.version) &&
        Objects.equals(this.directoryServerTransactionID, saleCreateTransactionRequestCardThreeDS.directoryServerTransactionID) &&
        Objects.equals(this.acsTransactionId, saleCreateTransactionRequestCardThreeDS.acsTransactionId) &&
        Objects.equals(this.ECI, saleCreateTransactionRequestCardThreeDS.ECI)&&
        Objects.equals(this.additionalProperties, saleCreateTransactionRequestCardThreeDS.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(secureCode, cavv, version, directoryServerTransactionID, acsTransactionId, ECI, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleCreateTransactionRequestCardThreeDS {\n");
    sb.append("    secureCode: ").append(toIndentedString(secureCode)).append("\n");
    sb.append("    cavv: ").append(toIndentedString(cavv)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    directoryServerTransactionID: ").append(toIndentedString(directoryServerTransactionID)).append("\n");
    sb.append("    acsTransactionId: ").append(toIndentedString(acsTransactionId)).append("\n");
    sb.append("    ECI: ").append(toIndentedString(ECI)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SecureCode");
    openapiFields.add("Cavv");
    openapiFields.add("Version");
    openapiFields.add("DirectoryServerTransactionID");
    openapiFields.add("AcsTransactionId");
    openapiFields.add("ECI");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SaleCreateTransactionRequestCardThreeDS
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SaleCreateTransactionRequestCardThreeDS.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaleCreateTransactionRequestCardThreeDS is not found in the empty JSON string", SaleCreateTransactionRequestCardThreeDS.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("SecureCode") != null && !jsonObj.get("SecureCode").isJsonNull()) && !jsonObj.get("SecureCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecureCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecureCode").toString()));
      }
      if ((jsonObj.get("Cavv") != null && !jsonObj.get("Cavv").isJsonNull()) && !jsonObj.get("Cavv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Cavv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Cavv").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      if ((jsonObj.get("DirectoryServerTransactionID") != null && !jsonObj.get("DirectoryServerTransactionID").isJsonNull()) && !jsonObj.get("DirectoryServerTransactionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DirectoryServerTransactionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DirectoryServerTransactionID").toString()));
      }
      if ((jsonObj.get("AcsTransactionId") != null && !jsonObj.get("AcsTransactionId").isJsonNull()) && !jsonObj.get("AcsTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AcsTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AcsTransactionId").toString()));
      }
      if ((jsonObj.get("ECI") != null && !jsonObj.get("ECI").isJsonNull()) && !jsonObj.get("ECI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ECI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ECI").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleCreateTransactionRequestCardThreeDS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaleCreateTransactionRequestCardThreeDS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleCreateTransactionRequestCardThreeDS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleCreateTransactionRequestCardThreeDS.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleCreateTransactionRequestCardThreeDS>() {
           @Override
           public void write(JsonWriter out, SaleCreateTransactionRequestCardThreeDS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleCreateTransactionRequestCardThreeDS read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SaleCreateTransactionRequestCardThreeDS instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SaleCreateTransactionRequestCardThreeDS given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SaleCreateTransactionRequestCardThreeDS
  * @throws IOException if the JSON string is invalid with respect to SaleCreateTransactionRequestCardThreeDS
  */
  public static SaleCreateTransactionRequestCardThreeDS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleCreateTransactionRequestCardThreeDS.class);
  }

 /**
  * Convert an instance of SaleCreateTransactionRequestCardThreeDS to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

