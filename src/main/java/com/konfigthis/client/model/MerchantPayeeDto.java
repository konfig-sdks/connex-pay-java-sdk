/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MerchantPayeeDto
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MerchantPayeeDto {
  public static final String SERIALIZED_NAME_ID_MERCHANT = "idMerchant";
  @SerializedName(SERIALIZED_NAME_ID_MERCHANT)
  private Integer idMerchant;

  public static final String SERIALIZED_NAME_IS_BUSINESS = "isBusiness";
  @SerializedName(SERIALIZED_NAME_IS_BUSINESS)
  private Boolean isBusiness;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_DBA_NAME = "dbaName";
  @SerializedName(SERIALIZED_NAME_DBA_NAME)
  private String dbaName;

  public static final String SERIALIZED_NAME_PAYEE_ID = "payeeId";
  @SerializedName(SERIALIZED_NAME_PAYEE_ID)
  private String payeeId;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_PREFERRED_PAYOUT_METHOD = "preferredPayoutMethod";
  @SerializedName(SERIALIZED_NAME_PREFERRED_PAYOUT_METHOD)
  private String preferredPayoutMethod;

  public static final String SERIALIZED_NAME_PREFERRED_CARD_BRAND = "preferredCardBrand";
  @SerializedName(SERIALIZED_NAME_PREFERRED_CARD_BRAND)
  private String preferredCardBrand;

  public static final String SERIALIZED_NAME_PREFERRED_CARD_CLASS = "preferredCardClass";
  @SerializedName(SERIALIZED_NAME_PREFERRED_CARD_CLASS)
  private String preferredCardClass;

  public static final String SERIALIZED_NAME_PURCHASE_TYPE = "purchaseType";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TYPE)
  private String purchaseType;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private UUID guid;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public MerchantPayeeDto() {
  }

  public MerchantPayeeDto idMerchant(Integer idMerchant) {
    
    
    
    
    this.idMerchant = idMerchant;
    return this;
  }

   /**
   * Get idMerchant
   * @return idMerchant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Integer getIdMerchant() {
    return idMerchant;
  }


  public void setIdMerchant(Integer idMerchant) {
    
    
    
    this.idMerchant = idMerchant;
  }


  public MerchantPayeeDto isBusiness(Boolean isBusiness) {
    
    
    
    
    this.isBusiness = isBusiness;
    return this;
  }

   /**
   * Get isBusiness
   * @return isBusiness
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getIsBusiness() {
    return isBusiness;
  }


  public void setIsBusiness(Boolean isBusiness) {
    
    
    
    this.isBusiness = isBusiness;
  }


  public MerchantPayeeDto firstName(String firstName) {
    
    
    if (firstName != null && firstName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 0.");
    }
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John", value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    if (firstName != null && firstName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 0.");
    }
    this.firstName = firstName;
  }


  public MerchantPayeeDto lastName(String lastName) {
    
    
    if (lastName != null && lastName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 0.");
    }
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Doe", value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    if (lastName != null && lastName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 0.");
    }
    this.lastName = lastName;
  }


  public MerchantPayeeDto dbaName(String dbaName) {
    
    
    if (dbaName != null && dbaName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for dbaName. Length must be greater than or equal to 0.");
    }
    
    this.dbaName = dbaName;
    return this;
  }

   /**
   * Get dbaName
   * @return dbaName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getDbaName() {
    return dbaName;
  }


  public void setDbaName(String dbaName) {
    
    
    if (dbaName != null && dbaName.length() < 0) {
      throw new IllegalArgumentException("Invalid value for dbaName. Length must be greater than or equal to 0.");
    }
    this.dbaName = dbaName;
  }


  public MerchantPayeeDto payeeId(String payeeId) {
    
    
    if (payeeId != null && payeeId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for payeeId. Length must be greater than or equal to 0.");
    }
    
    this.payeeId = payeeId;
    return this;
  }

   /**
   * Get payeeId
   * @return payeeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "payeeID01", required = true, value = "")

  public String getPayeeId() {
    return payeeId;
  }


  public void setPayeeId(String payeeId) {
    
    
    if (payeeId != null && payeeId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for payeeId. Length must be greater than or equal to 0.");
    }
    this.payeeId = payeeId;
  }


  public MerchantPayeeDto taxId(String taxId) {
    
    
    if (taxId != null && taxId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for taxId. Length must be greater than or equal to 0.");
    }
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Get taxId
   * @return taxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12-3456789", value = "")

  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    
    
    if (taxId != null && taxId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for taxId. Length must be greater than or equal to 0.");
    }
    this.taxId = taxId;
  }


  public MerchantPayeeDto customerId(String customerId) {
    
    
    if (customerId != null && customerId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for customerId. Length must be greater than or equal to 0.");
    }
    
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "customerID01", value = "")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    
    
    if (customerId != null && customerId.length() < 0) {
      throw new IllegalArgumentException("Invalid value for customerId. Length must be greater than or equal to 0.");
    }
    this.customerId = customerId;
  }


  public MerchantPayeeDto email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "test@test.com", value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public MerchantPayeeDto address1(String address1) {
    
    
    if (address1 != null && address1.length() < 0) {
      throw new IllegalArgumentException("Invalid value for address1. Length must be greater than or equal to 0.");
    }
    
    this.address1 = address1;
    return this;
  }

   /**
   * Get address1
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123 Main St", value = "")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    if (address1 != null && address1.length() < 0) {
      throw new IllegalArgumentException("Invalid value for address1. Length must be greater than or equal to 0.");
    }
    this.address1 = address1;
  }


  public MerchantPayeeDto address2(String address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * Get address2
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "", value = "")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    
    this.address2 = address2;
  }


  public MerchantPayeeDto city(String city) {
    
    
    if (city != null && city.length() < 0) {
      throw new IllegalArgumentException("Invalid value for city. Length must be greater than or equal to 0.");
    }
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Anytown", value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    if (city != null && city.length() < 0) {
      throw new IllegalArgumentException("Invalid value for city. Length must be greater than or equal to 0.");
    }
    this.city = city;
  }


  public MerchantPayeeDto state(String state) {
    
    
    if (state != null && state.length() < 0) {
      throw new IllegalArgumentException("Invalid value for state. Length must be greater than or equal to 0.");
    }
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    if (state != null && state.length() < 0) {
      throw new IllegalArgumentException("Invalid value for state. Length must be greater than or equal to 0.");
    }
    this.state = state;
  }


  public MerchantPayeeDto zip(String zip) {
    
    
    if (zip != null && zip.length() < 0) {
      throw new IllegalArgumentException("Invalid value for zip. Length must be greater than or equal to 0.");
    }
    
    this.zip = zip;
    return this;
  }

   /**
   * Get zip
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    if (zip != null && zip.length() < 0) {
      throw new IllegalArgumentException("Invalid value for zip. Length must be greater than or equal to 0.");
    }
    this.zip = zip;
  }


  public MerchantPayeeDto country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US", value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public MerchantPayeeDto preferredPayoutMethod(String preferredPayoutMethod) {
    
    
    
    
    this.preferredPayoutMethod = preferredPayoutMethod;
    return this;
  }

   /**
   * Get preferredPayoutMethod
   * @return preferredPayoutMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "VCC", required = true, value = "")

  public String getPreferredPayoutMethod() {
    return preferredPayoutMethod;
  }


  public void setPreferredPayoutMethod(String preferredPayoutMethod) {
    
    
    
    this.preferredPayoutMethod = preferredPayoutMethod;
  }


  public MerchantPayeeDto preferredCardBrand(String preferredCardBrand) {
    
    
    
    
    this.preferredCardBrand = preferredCardBrand;
    return this;
  }

   /**
   * Get preferredCardBrand
   * @return preferredCardBrand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Visa", value = "")

  public String getPreferredCardBrand() {
    return preferredCardBrand;
  }


  public void setPreferredCardBrand(String preferredCardBrand) {
    
    
    
    this.preferredCardBrand = preferredCardBrand;
  }


  public MerchantPayeeDto preferredCardClass(String preferredCardClass) {
    
    
    
    
    this.preferredCardClass = preferredCardClass;
    return this;
  }

   /**
   * Get preferredCardClass
   * @return preferredCardClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CreditCommercial", value = "")

  public String getPreferredCardClass() {
    return preferredCardClass;
  }


  public void setPreferredCardClass(String preferredCardClass) {
    
    
    
    this.preferredCardClass = preferredCardClass;
  }


  public MerchantPayeeDto purchaseType(String purchaseType) {
    
    
    
    
    this.purchaseType = purchaseType;
    return this;
  }

   /**
   * Get purchaseType
   * @return purchaseType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "01", value = "")

  public String getPurchaseType() {
    return purchaseType;
  }


  public void setPurchaseType(String purchaseType) {
    
    
    
    this.purchaseType = purchaseType;
  }


  public MerchantPayeeDto guid(UUID guid) {
    
    
    
    
    this.guid = guid;
    return this;
  }

   /**
   * Get guid
   * @return guid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getGuid() {
    return guid;
  }


  public void setGuid(UUID guid) {
    
    
    
    this.guid = guid;
  }


  public MerchantPayeeDto timestamp(OffsetDateTime timestamp) {
    
    
    
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    
    
    
    this.timestamp = timestamp;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MerchantPayeeDto instance itself
   */
  public MerchantPayeeDto putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantPayeeDto merchantPayeeDto = (MerchantPayeeDto) o;
    return Objects.equals(this.idMerchant, merchantPayeeDto.idMerchant) &&
        Objects.equals(this.isBusiness, merchantPayeeDto.isBusiness) &&
        Objects.equals(this.firstName, merchantPayeeDto.firstName) &&
        Objects.equals(this.lastName, merchantPayeeDto.lastName) &&
        Objects.equals(this.dbaName, merchantPayeeDto.dbaName) &&
        Objects.equals(this.payeeId, merchantPayeeDto.payeeId) &&
        Objects.equals(this.taxId, merchantPayeeDto.taxId) &&
        Objects.equals(this.customerId, merchantPayeeDto.customerId) &&
        Objects.equals(this.email, merchantPayeeDto.email) &&
        Objects.equals(this.address1, merchantPayeeDto.address1) &&
        Objects.equals(this.address2, merchantPayeeDto.address2) &&
        Objects.equals(this.city, merchantPayeeDto.city) &&
        Objects.equals(this.state, merchantPayeeDto.state) &&
        Objects.equals(this.zip, merchantPayeeDto.zip) &&
        Objects.equals(this.country, merchantPayeeDto.country) &&
        Objects.equals(this.preferredPayoutMethod, merchantPayeeDto.preferredPayoutMethod) &&
        Objects.equals(this.preferredCardBrand, merchantPayeeDto.preferredCardBrand) &&
        Objects.equals(this.preferredCardClass, merchantPayeeDto.preferredCardClass) &&
        Objects.equals(this.purchaseType, merchantPayeeDto.purchaseType) &&
        Objects.equals(this.guid, merchantPayeeDto.guid) &&
        Objects.equals(this.timestamp, merchantPayeeDto.timestamp)&&
        Objects.equals(this.additionalProperties, merchantPayeeDto.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idMerchant, isBusiness, firstName, lastName, dbaName, payeeId, taxId, customerId, email, address1, address2, city, state, zip, country, preferredPayoutMethod, preferredCardBrand, preferredCardClass, purchaseType, guid, timestamp, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantPayeeDto {\n");
    sb.append("    idMerchant: ").append(toIndentedString(idMerchant)).append("\n");
    sb.append("    isBusiness: ").append(toIndentedString(isBusiness)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    dbaName: ").append(toIndentedString(dbaName)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    preferredPayoutMethod: ").append(toIndentedString(preferredPayoutMethod)).append("\n");
    sb.append("    preferredCardBrand: ").append(toIndentedString(preferredCardBrand)).append("\n");
    sb.append("    preferredCardClass: ").append(toIndentedString(preferredCardClass)).append("\n");
    sb.append("    purchaseType: ").append(toIndentedString(purchaseType)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idMerchant");
    openapiFields.add("isBusiness");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("dbaName");
    openapiFields.add("payeeId");
    openapiFields.add("taxId");
    openapiFields.add("customerId");
    openapiFields.add("email");
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("zip");
    openapiFields.add("country");
    openapiFields.add("preferredPayoutMethod");
    openapiFields.add("preferredCardBrand");
    openapiFields.add("preferredCardClass");
    openapiFields.add("purchaseType");
    openapiFields.add("guid");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isBusiness");
    openapiRequiredFields.add("payeeId");
    openapiRequiredFields.add("preferredPayoutMethod");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MerchantPayeeDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MerchantPayeeDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantPayeeDto is not found in the empty JSON string", MerchantPayeeDto.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MerchantPayeeDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("dbaName") != null && !jsonObj.get("dbaName").isJsonNull()) && !jsonObj.get("dbaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbaName").toString()));
      }
      if (!jsonObj.get("payeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payeeId").toString()));
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("address1") != null && !jsonObj.get("address1").isJsonNull()) && !jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if ((jsonObj.get("address2") != null && !jsonObj.get("address2").isJsonNull()) && !jsonObj.get("address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address2").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("preferredPayoutMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredPayoutMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredPayoutMethod").toString()));
      }
      if ((jsonObj.get("preferredCardBrand") != null && !jsonObj.get("preferredCardBrand").isJsonNull()) && !jsonObj.get("preferredCardBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredCardBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredCardBrand").toString()));
      }
      if ((jsonObj.get("preferredCardClass") != null && !jsonObj.get("preferredCardClass").isJsonNull()) && !jsonObj.get("preferredCardClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredCardClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredCardClass").toString()));
      }
      if ((jsonObj.get("purchaseType") != null && !jsonObj.get("purchaseType").isJsonNull()) && !jsonObj.get("purchaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseType").toString()));
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantPayeeDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantPayeeDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantPayeeDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantPayeeDto.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantPayeeDto>() {
           @Override
           public void write(JsonWriter out, MerchantPayeeDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantPayeeDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MerchantPayeeDto instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MerchantPayeeDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MerchantPayeeDto
  * @throws IOException if the JSON string is invalid with respect to MerchantPayeeDto
  */
  public static MerchantPayeeDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantPayeeDto.class);
  }

 /**
  * Convert an instance of MerchantPayeeDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

