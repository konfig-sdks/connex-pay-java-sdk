/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CardIssuanceCreateVirtualCardRequestCustomParametersInner;
import com.konfigthis.client.model.CardIssuanceCreateVirtualCardRequestTransmission;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CardIssuanceCreateVirtualCardRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CardIssuanceCreateVirtualCardRequest {
  public static final String SERIALIZED_NAME_MERCHANT_GUID = "MerchantGuid";
  @SerializedName(SERIALIZED_NAME_MERCHANT_GUID)
  private String merchantGuid;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PHONE = "Phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_ADDRESS1 = "Address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "Address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP_CODE = "ZipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_USAGE_LIMIT = "UsageLimit";
  @SerializedName(SERIALIZED_NAME_USAGE_LIMIT)
  private Long usageLimit;

  public static final String SERIALIZED_NAME_AMOUNT_LIMIT = "AmountLimit";
  @SerializedName(SERIALIZED_NAME_AMOUNT_LIMIT)
  private Float amountLimit;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "ExpirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private LocalDate expirationDate;

  public static final String SERIALIZED_NAME_TERMINATE_DATE = "TerminateDate";
  @SerializedName(SERIALIZED_NAME_TERMINATE_DATE)
  private LocalDate terminateDate;

  public static final String SERIALIZED_NAME_PURCHASE_TYPE = "PurchaseType";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TYPE)
  private String purchaseType;

  public static final String SERIALIZED_NAME_MI_D_WHITELIST = "MIDWhitelist";
  @SerializedName(SERIALIZED_NAME_MI_D_WHITELIST)
  private List<String> miDWhitelist = null;

  public static final String SERIALIZED_NAME_MI_D_BLACKLIST = "MIDBlacklist";
  @SerializedName(SERIALIZED_NAME_MI_D_BLACKLIST)
  private List<String> miDBlacklist = null;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "OrderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber = "{{OrderNumber}}";

  public static final String SERIALIZED_NAME_INCOMING_TRANSACTION_CODE = "IncomingTransactionCode";
  @SerializedName(SERIALIZED_NAME_INCOMING_TRANSACTION_CODE)
  private String incomingTransactionCode;

  public static final String SERIALIZED_NAME_SUPPLIER_ID = "SupplierId";
  @SerializedName(SERIALIZED_NAME_SUPPLIER_ID)
  private String supplierId;

  public static final String SERIALIZED_NAME_NON_DOMESTIC_SUPPLIER = "NonDomesticSupplier";
  @SerializedName(SERIALIZED_NAME_NON_DOMESTIC_SUPPLIER)
  private Boolean nonDomesticSupplier;

  public static final String SERIALIZED_NAME_TRANSMISSION = "Transmission";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION)
  private CardIssuanceCreateVirtualCardRequestTransmission transmission;

  public static final String SERIALIZED_NAME_RETURN_CARD_DATA = "ReturnCardData";
  @SerializedName(SERIALIZED_NAME_RETURN_CARD_DATA)
  private Boolean returnCardData;

  public static final String SERIALIZED_NAME_CUSTOMER_I_D = "CustomerID";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_I_D)
  private String customerID;

  public static final String SERIALIZED_NAME_ASSOCIATION_ID = "AssociationId";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ID)
  private String associationId;

  public static final String SERIALIZED_NAME_CUSTOM_PARAMETERS = "CustomParameters";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMETERS)
  private List<CardIssuanceCreateVirtualCardRequestCustomParametersInner> customParameters = null;

  public static final String SERIALIZED_NAME_LABEL_I_DS = "LabelIDs";
  @SerializedName(SERIALIZED_NAME_LABEL_I_DS)
  private List<String> labelIDs = null;

  public CardIssuanceCreateVirtualCardRequest() {
  }

  public CardIssuanceCreateVirtualCardRequest merchantGuid(String merchantGuid) {
    
    
    
    
    this.merchantGuid = merchantGuid;
    return this;
  }

   /**
   * Merchant&#39;s Guid. Application-level value that indicates a virtual card is being requested for client&#39;s account. Value provided by ConnexPay.
   * @return merchantGuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Merchant's Guid. Application-level value that indicates a virtual card is being requested for client's account. Value provided by ConnexPay.")

  public String getMerchantGuid() {
    return merchantGuid;
  }


  public void setMerchantGuid(String merchantGuid) {
    
    
    
    this.merchantGuid = merchantGuid;
  }


  public CardIssuanceCreateVirtualCardRequest firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Cardholder&#39;s first name. This is the first name placed on the virtual card provided to the supplier. The value is also searchable in the ConnexPay portal.
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Cardholder's first name. This is the first name placed on the virtual card provided to the supplier. The value is also searchable in the ConnexPay portal.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public CardIssuanceCreateVirtualCardRequest lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Cardholder&#39;s last name. This is the last name placed on the virtual card provided to the supplier. The value is also searchable in the ConnexPay portal.
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Cardholder's last name. This is the last name placed on the virtual card provided to the supplier. The value is also searchable in the ConnexPay portal.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public CardIssuanceCreateVirtualCardRequest phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Cardholder&#39;s phone number. Phone number up to 20 character string, numbers and plus sign (+) allowed only. Telephone number of the user (including area code), prepended by the + symbol and the 1- to 3-digit country calling code. Do not include hyphens, spaces, or parentheses.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cardholder's phone number. Phone number up to 20 character string, numbers and plus sign (+) allowed only. Telephone number of the user (including area code), prepended by the + symbol and the 1- to 3-digit country calling code. Do not include hyphens, spaces, or parentheses.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public CardIssuanceCreateVirtualCardRequest address1(String address1) {
    
    
    
    
    this.address1 = address1;
    return this;
  }

   /**
   * Cardholder&#39;s address line 1. The street number is used by the supplier when submitting the transaction to perform an AVS check. Alphanumerics and [,.-&#39;] are allowed.
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cardholder's address line 1. The street number is used by the supplier when submitting the transaction to perform an AVS check. Alphanumerics and [,.-'] are allowed.")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    
    this.address1 = address1;
  }


  public CardIssuanceCreateVirtualCardRequest address2(String address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * Cardholder&#39;s address line 2. Alphanumerics and [,.-&#39;] are allowed.
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cardholder's address line 2. Alphanumerics and [,.-'] are allowed.")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    
    this.address2 = address2;
  }


  public CardIssuanceCreateVirtualCardRequest city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Cardholder&#39;s city.
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cardholder's city.")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public CardIssuanceCreateVirtualCardRequest state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Cardholder&#39;s short name state.  The ISO 3166-2 CA and US state or province code of a user. Length &#x3D; 2. If a non U.S. or Canadian value is submitted the virtual card request will not be processed and an error response returned.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cardholder's short name state.  The ISO 3166-2 CA and US state or province code of a user. Length = 2. If a non U.S. or Canadian value is submitted the virtual card request will not be processed and an error response returned.")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public CardIssuanceCreateVirtualCardRequest zipCode(String zipCode) {
    
    
    
    
    this.zipCode = zipCode;
    return this;
  }

   /**
   * Cardholder&#39;s zipcode. The zip code is used by the supplier when submitting the transaction to perform an AVS check.  The Zipcode must be between 1 and 10 characters long, only numbers and letters are allowed.
   * @return zipCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cardholder's zipcode. The zip code is used by the supplier when submitting the transaction to perform an AVS check.  The Zipcode must be between 1 and 10 characters long, only numbers and letters are allowed.")

  public String getZipCode() {
    return zipCode;
  }


  public void setZipCode(String zipCode) {
    
    
    
    this.zipCode = zipCode;
  }


  public CardIssuanceCreateVirtualCardRequest country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Cardholder&#39;s country.  Only alpha-2 digit country code allowed and numbers are not allowed.  See ISO-3166 country list of Alpha-2 country codes (https://www.iso.org/obp/ui/) .
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cardholder's country.  Only alpha-2 digit country code allowed and numbers are not allowed.  See ISO-3166 country list of Alpha-2 country codes (https://www.iso.org/obp/ui/) .")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public CardIssuanceCreateVirtualCardRequest usageLimit(Long usageLimit) {
    
    
    
    
    this.usageLimit = usageLimit;
    return this;
  }

   /**
   * Security Control: Maximum number of times the card may be authorized. The maximum allowed field value is 99, and if you do not provide a value the card will be considered unlimited. Authorization attempts exceeding the provided value will be declined. Even though a virtual card is often considered a “one-time-use” card, some suppliers may need to authorize a card multiple times (pre-authorizations, a purchase comprised of multiple tickets, etc.) and you may consider a value that is not overly restrictive to avoid unwanted declines.
   * @return usageLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Security Control: Maximum number of times the card may be authorized. The maximum allowed field value is 99, and if you do not provide a value the card will be considered unlimited. Authorization attempts exceeding the provided value will be declined. Even though a virtual card is often considered a “one-time-use” card, some suppliers may need to authorize a card multiple times (pre-authorizations, a purchase comprised of multiple tickets, etc.) and you may consider a value that is not overly restrictive to avoid unwanted declines.")

  public Long getUsageLimit() {
    return usageLimit;
  }


  public void setUsageLimit(Long usageLimit) {
    
    
    
    this.usageLimit = usageLimit;
  }


  public CardIssuanceCreateVirtualCardRequest amountLimit(Float amountLimit) {
    
    
    
    
    this.amountLimit = amountLimit;
    return this;
  }

   /**
   * Security Control: Maximum dollar amount the card can be authorized and settled, which must be less than or equal to $1,000,000.00. The value must incorporate any anticipated overages such as currency conversion or taxes that a supplier may associate with the transaction. If a supplier attempts to authorize a card for more than the amount limit it will be declined.
   * @return amountLimit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Security Control: Maximum dollar amount the card can be authorized and settled, which must be less than or equal to $1,000,000.00. The value must incorporate any anticipated overages such as currency conversion or taxes that a supplier may associate with the transaction. If a supplier attempts to authorize a card for more than the amount limit it will be declined.")

  public Float getAmountLimit() {
    return amountLimit;
  }


  public void setAmountLimit(Float amountLimit) {
    
    
    
    this.amountLimit = amountLimit;
  }


  public CardIssuanceCreateVirtualCardRequest expirationDate(LocalDate expirationDate) {
    
    
    
    
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * The ExpirationDate (YYYY-MM-DD) is the date to be provided to the supplier as the actual expiration date for the virtual card. The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed to avoid acceptance issues.  The expiration date cannot be more than 36 months in the future. If an expiration date is not provided, the expiration will default to issue date plus three years. For cards issued outside of the US/Canada, the expiration date will default to issue date plus three years and can not be overwritten - even if this parameter is included in the request. Note, Returns can still be processed on expired or terminated VCCs.
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ExpirationDate (YYYY-MM-DD) is the date to be provided to the supplier as the actual expiration date for the virtual card. The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed to avoid acceptance issues.  The expiration date cannot be more than 36 months in the future. If an expiration date is not provided, the expiration will default to issue date plus three years. For cards issued outside of the US/Canada, the expiration date will default to issue date plus three years and can not be overwritten - even if this parameter is included in the request. Note, Returns can still be processed on expired or terminated VCCs.")

  public LocalDate getExpirationDate() {
    return expirationDate;
  }


  public void setExpirationDate(LocalDate expirationDate) {
    
    
    
    this.expirationDate = expirationDate;
  }


  public CardIssuanceCreateVirtualCardRequest terminateDate(LocalDate terminateDate) {
    
    
    
    
    this.terminateDate = terminateDate;
    return this;
  }

   /**
   * The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed. If a terminate date is not indicated, the card will be inactivated as of the expiration date. Note, Returns can still be processed on terminated VCCs.
   * @return terminateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed. If a terminate date is not indicated, the card will be inactivated as of the expiration date. Note, Returns can still be processed on terminated VCCs.")

  public LocalDate getTerminateDate() {
    return terminateDate;
  }


  public void setTerminateDate(LocalDate terminateDate) {
    
    
    
    this.terminateDate = terminateDate;
  }


  public CardIssuanceCreateVirtualCardRequest purchaseType(String purchaseType) {
    
    
    
    
    this.purchaseType = purchaseType;
    return this;
  }

   /**
   * Security Control: The industry where the virtual card will be utilized. For example, if value set to airline and the card is used at hotel, it will be declined. Available purchase type values are: &#39;01&#39; (Airline), &#39;02&#39; (Hotels and Resorts), &#39;03&#39; (Car Rental), &#39;04&#39; (Cable, Satellite, Television, and Radio Services),  &#39;05&#39; (Cruise Lines), &#39;11&#39; (Medical Services and Health Practitioners), &#39;21&#39; (Advertising Services), &#39;22&#39; (Misc Advertising and Business Services), &#39;23&#39; (Ticketing), &#39;31&#39; (Insurance Sales, Underwriting, and Premiums), &#39;91&#39; (Restaurants and Food Services), and &#39;93&#39; (Tax Payments). Leave this blank if you plan to utilize MID level controls.
   * @return purchaseType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Security Control: The industry where the virtual card will be utilized. For example, if value set to airline and the card is used at hotel, it will be declined. Available purchase type values are: '01' (Airline), '02' (Hotels and Resorts), '03' (Car Rental), '04' (Cable, Satellite, Television, and Radio Services),  '05' (Cruise Lines), '11' (Medical Services and Health Practitioners), '21' (Advertising Services), '22' (Misc Advertising and Business Services), '23' (Ticketing), '31' (Insurance Sales, Underwriting, and Premiums), '91' (Restaurants and Food Services), and '93' (Tax Payments). Leave this blank if you plan to utilize MID level controls.")

  public String getPurchaseType() {
    return purchaseType;
  }


  public void setPurchaseType(String purchaseType) {
    
    
    
    this.purchaseType = purchaseType;
  }


  public CardIssuanceCreateVirtualCardRequest miDWhitelist(List<String> miDWhitelist) {
    
    
    
    
    this.miDWhitelist = miDWhitelist;
    return this;
  }

  public CardIssuanceCreateVirtualCardRequest addMiDWhitelistItem(String miDWhitelistItem) {
    if (this.miDWhitelist == null) {
      this.miDWhitelist = new ArrayList<>();
    }
    this.miDWhitelist.add(miDWhitelistItem);
    return this;
  }

   /**
   * MID &#x3D; Merchant ID. Whitelisted MIDs are a supplement to Purchase Type. Utilize if you have a supplier MID(s) where the card can be used if that MID is categorized in an MCC other than the Purchase Type selected. Or use instead of Purchase Type. (eg. [&#39;273514000108778&#39;, &#39;900074KLM&#39;])
   * @return miDWhitelist
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MID = Merchant ID. Whitelisted MIDs are a supplement to Purchase Type. Utilize if you have a supplier MID(s) where the card can be used if that MID is categorized in an MCC other than the Purchase Type selected. Or use instead of Purchase Type. (eg. ['273514000108778', '900074KLM'])")

  public List<String> getMiDWhitelist() {
    return miDWhitelist;
  }


  public void setMiDWhitelist(List<String> miDWhitelist) {
    
    
    
    this.miDWhitelist = miDWhitelist;
  }


  public CardIssuanceCreateVirtualCardRequest miDBlacklist(List<String> miDBlacklist) {
    
    
    
    
    this.miDBlacklist = miDBlacklist;
    return this;
  }

  public CardIssuanceCreateVirtualCardRequest addMiDBlacklistItem(String miDBlacklistItem) {
    if (this.miDBlacklist == null) {
      this.miDBlacklist = new ArrayList<>();
    }
    this.miDBlacklist.add(miDBlacklistItem);
    return this;
  }

   /**
   * MID &#x3D; Merchant ID. The list of MIDs where the virtual card will always be DECLINED regardless of PurchaseType or MIDWhitelist. MIDBlacklist overrides all other specifications. (eg. [&#39;273594000108778&#39;].)
   * @return miDBlacklist
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MID = Merchant ID. The list of MIDs where the virtual card will always be DECLINED regardless of PurchaseType or MIDWhitelist. MIDBlacklist overrides all other specifications. (eg. ['273594000108778'].)")

  public List<String> getMiDBlacklist() {
    return miDBlacklist;
  }


  public void setMiDBlacklist(List<String> miDBlacklist) {
    
    
    
    this.miDBlacklist = miDBlacklist;
  }


  public CardIssuanceCreateVirtualCardRequest sequenceNumber(String sequenceNumber) {
    
    
    
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Transaction sequence number within client environment. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric.
   * @return sequenceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction sequence number within client environment. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric.")

  public String getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(String sequenceNumber) {
    
    
    
    this.sequenceNumber = sequenceNumber;
  }


  public CardIssuanceCreateVirtualCardRequest orderNumber(String orderNumber) {
    
    
    
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * This is the most common number you&#39;ll see throughout the ConnexPay Portal. Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field. The maximum length is 50 alpha-numeric characters and allows dashes ( - ).
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{{OrderNumber}}", value = "This is the most common number you'll see throughout the ConnexPay Portal. Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field. The maximum length is 50 alpha-numeric characters and allows dashes ( - ).")

  public String getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(String orderNumber) {
    
    
    
    this.orderNumber = orderNumber;
  }


  public CardIssuanceCreateVirtualCardRequest incomingTransactionCode(String incomingTransactionCode) {
    
    
    
    
    this.incomingTransactionCode = incomingTransactionCode;
    return this;
  }

   /**
   * ITC for short Application level setting to associate the virtual card request with an original sale or sale group. The value is provided in the sale response of the original sale transaction, or in the Group Sale response of the group sale. All virtual card requests must be associated with an original sale or group transaction.
   * @return incomingTransactionCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ITC for short Application level setting to associate the virtual card request with an original sale or sale group. The value is provided in the sale response of the original sale transaction, or in the Group Sale response of the group sale. All virtual card requests must be associated with an original sale or group transaction.")

  public String getIncomingTransactionCode() {
    return incomingTransactionCode;
  }


  public void setIncomingTransactionCode(String incomingTransactionCode) {
    
    
    
    this.incomingTransactionCode = incomingTransactionCode;
  }


  public CardIssuanceCreateVirtualCardRequest supplierId(String supplierId) {
    
    
    
    
    this.supplierId = supplierId;
    return this;
  }

   /**
   * The SupplierId is used to assist with Intelligent Routing functionality. The field accepts up to 100 alpha-numeric characters.  Alphanumeric with a max length of 100 characters
   * @return supplierId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The SupplierId is used to assist with Intelligent Routing functionality. The field accepts up to 100 alpha-numeric characters.  Alphanumeric with a max length of 100 characters")

  public String getSupplierId() {
    return supplierId;
  }


  public void setSupplierId(String supplierId) {
    
    
    
    this.supplierId = supplierId;
  }


  public CardIssuanceCreateVirtualCardRequest nonDomesticSupplier(Boolean nonDomesticSupplier) {
    
    
    
    
    this.nonDomesticSupplier = nonDomesticSupplier;
    return this;
  }

   /**
   * We can issue the “Global VCC” if the Supplier accepting that VCC has an overseas merchant account. This is an optional field. Indicating true will result in issuing this Global VCC. Indicating false (or not including this property in your request) will result in receiving a VCC created for domestic use.
   * @return nonDomesticSupplier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "We can issue the “Global VCC” if the Supplier accepting that VCC has an overseas merchant account. This is an optional field. Indicating true will result in issuing this Global VCC. Indicating false (or not including this property in your request) will result in receiving a VCC created for domestic use.")

  public Boolean getNonDomesticSupplier() {
    return nonDomesticSupplier;
  }


  public void setNonDomesticSupplier(Boolean nonDomesticSupplier) {
    
    
    
    this.nonDomesticSupplier = nonDomesticSupplier;
  }


  public CardIssuanceCreateVirtualCardRequest transmission(CardIssuanceCreateVirtualCardRequestTransmission transmission) {
    
    
    
    
    this.transmission = transmission;
    return this;
  }

   /**
   * Get transmission
   * @return transmission
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CardIssuanceCreateVirtualCardRequestTransmission getTransmission() {
    return transmission;
  }


  public void setTransmission(CardIssuanceCreateVirtualCardRequestTransmission transmission) {
    
    
    
    this.transmission = transmission;
  }


  public CardIssuanceCreateVirtualCardRequest returnCardData(Boolean returnCardData) {
    
    
    
    
    this.returnCardData = returnCardData;
    return this;
  }

   /**
   * Optional field that may be set to true or false. When set to a value of true or if the field is not provided at all, card data is returned in the response. When set to a value of false, the Card Account Number and Security Code (CVV) will be excluded from the response.
   * @return returnCardData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional field that may be set to true or false. When set to a value of true or if the field is not provided at all, card data is returned in the response. When set to a value of false, the Card Account Number and Security Code (CVV) will be excluded from the response.")

  public Boolean getReturnCardData() {
    return returnCardData;
  }


  public void setReturnCardData(Boolean returnCardData) {
    
    
    
    this.returnCardData = returnCardData;
  }


  public CardIssuanceCreateVirtualCardRequest customerID(String customerID) {
    
    
    
    
    this.customerID = customerID;
    return this;
  }

   /**
   * Transaction ID within client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes.  The maximum length is 100 characters and is alpha-numeric.
   * @return customerID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction ID within client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes.  The maximum length is 100 characters and is alpha-numeric.")

  public String getCustomerID() {
    return customerID;
  }


  public void setCustomerID(String customerID) {
    
    
    
    this.customerID = customerID;
  }


  public CardIssuanceCreateVirtualCardRequest associationId(String associationId) {
    
    
    
    
    this.associationId = associationId;
    return this;
  }

   /**
   * Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting.
   * @return associationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting.")

  public String getAssociationId() {
    return associationId;
  }


  public void setAssociationId(String associationId) {
    
    
    
    this.associationId = associationId;
  }


  public CardIssuanceCreateVirtualCardRequest customParameters(List<CardIssuanceCreateVirtualCardRequestCustomParametersInner> customParameters) {
    
    
    
    
    this.customParameters = customParameters;
    return this;
  }

  public CardIssuanceCreateVirtualCardRequest addCustomParametersItem(CardIssuanceCreateVirtualCardRequestCustomParametersInner customParametersItem) {
    if (this.customParameters == null) {
      this.customParameters = new ArrayList<>();
    }
    this.customParameters.add(customParametersItem);
    return this;
  }

   /**
   * You can add custom parameters to your issue card request in the event that you need to associate additional information with the virtual card. For example, if you want to add an invoice number you would include the custom parameters object with the name parameter &#x3D; \&quot;invoice\&quot; and the value parameter as the invoice number. This requires customized reporting so you&#39;ll need to work with your implementations specialist to determine what&#39;s required.
   * @return customParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "You can add custom parameters to your issue card request in the event that you need to associate additional information with the virtual card. For example, if you want to add an invoice number you would include the custom parameters object with the name parameter = \"invoice\" and the value parameter as the invoice number. This requires customized reporting so you'll need to work with your implementations specialist to determine what's required.")

  public List<CardIssuanceCreateVirtualCardRequestCustomParametersInner> getCustomParameters() {
    return customParameters;
  }


  public void setCustomParameters(List<CardIssuanceCreateVirtualCardRequestCustomParametersInner> customParameters) {
    
    
    
    this.customParameters = customParameters;
  }


  public CardIssuanceCreateVirtualCardRequest labelIDs(List<String> labelIDs) {
    
    
    
    
    this.labelIDs = labelIDs;
    return this;
  }

  public CardIssuanceCreateVirtualCardRequest addLabelIDsItem(String labelIDsItem) {
    if (this.labelIDs == null) {
      this.labelIDs = new ArrayList<>();
    }
    this.labelIDs.add(labelIDsItem);
    return this;
  }

   /**
   * Utilize Label IDs to associate a virtual card to a specific label(s) within ConnexPay Bridge UI for your organization. If a virtual card is tied to an incorrect Label, it will not filter or display correctly in Bridge&#39;s Search Grid. Please contact your Customer Care Consultant for a list of valid Label IDs before use.
   * @return labelIDs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Utilize Label IDs to associate a virtual card to a specific label(s) within ConnexPay Bridge UI for your organization. If a virtual card is tied to an incorrect Label, it will not filter or display correctly in Bridge's Search Grid. Please contact your Customer Care Consultant for a list of valid Label IDs before use.")

  public List<String> getLabelIDs() {
    return labelIDs;
  }


  public void setLabelIDs(List<String> labelIDs) {
    
    
    
    this.labelIDs = labelIDs;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CardIssuanceCreateVirtualCardRequest instance itself
   */
  public CardIssuanceCreateVirtualCardRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardIssuanceCreateVirtualCardRequest cardIssuanceCreateVirtualCardRequest = (CardIssuanceCreateVirtualCardRequest) o;
    return Objects.equals(this.merchantGuid, cardIssuanceCreateVirtualCardRequest.merchantGuid) &&
        Objects.equals(this.firstName, cardIssuanceCreateVirtualCardRequest.firstName) &&
        Objects.equals(this.lastName, cardIssuanceCreateVirtualCardRequest.lastName) &&
        Objects.equals(this.phone, cardIssuanceCreateVirtualCardRequest.phone) &&
        Objects.equals(this.address1, cardIssuanceCreateVirtualCardRequest.address1) &&
        Objects.equals(this.address2, cardIssuanceCreateVirtualCardRequest.address2) &&
        Objects.equals(this.city, cardIssuanceCreateVirtualCardRequest.city) &&
        Objects.equals(this.state, cardIssuanceCreateVirtualCardRequest.state) &&
        Objects.equals(this.zipCode, cardIssuanceCreateVirtualCardRequest.zipCode) &&
        Objects.equals(this.country, cardIssuanceCreateVirtualCardRequest.country) &&
        Objects.equals(this.usageLimit, cardIssuanceCreateVirtualCardRequest.usageLimit) &&
        Objects.equals(this.amountLimit, cardIssuanceCreateVirtualCardRequest.amountLimit) &&
        Objects.equals(this.expirationDate, cardIssuanceCreateVirtualCardRequest.expirationDate) &&
        Objects.equals(this.terminateDate, cardIssuanceCreateVirtualCardRequest.terminateDate) &&
        Objects.equals(this.purchaseType, cardIssuanceCreateVirtualCardRequest.purchaseType) &&
        Objects.equals(this.miDWhitelist, cardIssuanceCreateVirtualCardRequest.miDWhitelist) &&
        Objects.equals(this.miDBlacklist, cardIssuanceCreateVirtualCardRequest.miDBlacklist) &&
        Objects.equals(this.sequenceNumber, cardIssuanceCreateVirtualCardRequest.sequenceNumber) &&
        Objects.equals(this.orderNumber, cardIssuanceCreateVirtualCardRequest.orderNumber) &&
        Objects.equals(this.incomingTransactionCode, cardIssuanceCreateVirtualCardRequest.incomingTransactionCode) &&
        Objects.equals(this.supplierId, cardIssuanceCreateVirtualCardRequest.supplierId) &&
        Objects.equals(this.nonDomesticSupplier, cardIssuanceCreateVirtualCardRequest.nonDomesticSupplier) &&
        Objects.equals(this.transmission, cardIssuanceCreateVirtualCardRequest.transmission) &&
        Objects.equals(this.returnCardData, cardIssuanceCreateVirtualCardRequest.returnCardData) &&
        Objects.equals(this.customerID, cardIssuanceCreateVirtualCardRequest.customerID) &&
        Objects.equals(this.associationId, cardIssuanceCreateVirtualCardRequest.associationId) &&
        Objects.equals(this.customParameters, cardIssuanceCreateVirtualCardRequest.customParameters) &&
        Objects.equals(this.labelIDs, cardIssuanceCreateVirtualCardRequest.labelIDs)&&
        Objects.equals(this.additionalProperties, cardIssuanceCreateVirtualCardRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantGuid, firstName, lastName, phone, address1, address2, city, state, zipCode, country, usageLimit, amountLimit, expirationDate, terminateDate, purchaseType, miDWhitelist, miDBlacklist, sequenceNumber, orderNumber, incomingTransactionCode, supplierId, nonDomesticSupplier, transmission, returnCardData, customerID, associationId, customParameters, labelIDs, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardIssuanceCreateVirtualCardRequest {\n");
    sb.append("    merchantGuid: ").append(toIndentedString(merchantGuid)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    usageLimit: ").append(toIndentedString(usageLimit)).append("\n");
    sb.append("    amountLimit: ").append(toIndentedString(amountLimit)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    terminateDate: ").append(toIndentedString(terminateDate)).append("\n");
    sb.append("    purchaseType: ").append(toIndentedString(purchaseType)).append("\n");
    sb.append("    miDWhitelist: ").append(toIndentedString(miDWhitelist)).append("\n");
    sb.append("    miDBlacklist: ").append(toIndentedString(miDBlacklist)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    incomingTransactionCode: ").append(toIndentedString(incomingTransactionCode)).append("\n");
    sb.append("    supplierId: ").append(toIndentedString(supplierId)).append("\n");
    sb.append("    nonDomesticSupplier: ").append(toIndentedString(nonDomesticSupplier)).append("\n");
    sb.append("    transmission: ").append(toIndentedString(transmission)).append("\n");
    sb.append("    returnCardData: ").append(toIndentedString(returnCardData)).append("\n");
    sb.append("    customerID: ").append(toIndentedString(customerID)).append("\n");
    sb.append("    associationId: ").append(toIndentedString(associationId)).append("\n");
    sb.append("    customParameters: ").append(toIndentedString(customParameters)).append("\n");
    sb.append("    labelIDs: ").append(toIndentedString(labelIDs)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MerchantGuid");
    openapiFields.add("FirstName");
    openapiFields.add("LastName");
    openapiFields.add("Phone");
    openapiFields.add("Address1");
    openapiFields.add("Address2");
    openapiFields.add("City");
    openapiFields.add("State");
    openapiFields.add("ZipCode");
    openapiFields.add("Country");
    openapiFields.add("UsageLimit");
    openapiFields.add("AmountLimit");
    openapiFields.add("ExpirationDate");
    openapiFields.add("TerminateDate");
    openapiFields.add("PurchaseType");
    openapiFields.add("MIDWhitelist");
    openapiFields.add("MIDBlacklist");
    openapiFields.add("SequenceNumber");
    openapiFields.add("OrderNumber");
    openapiFields.add("IncomingTransactionCode");
    openapiFields.add("SupplierId");
    openapiFields.add("NonDomesticSupplier");
    openapiFields.add("Transmission");
    openapiFields.add("ReturnCardData");
    openapiFields.add("CustomerID");
    openapiFields.add("AssociationId");
    openapiFields.add("CustomParameters");
    openapiFields.add("LabelIDs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MerchantGuid");
    openapiRequiredFields.add("FirstName");
    openapiRequiredFields.add("LastName");
    openapiRequiredFields.add("AmountLimit");
    openapiRequiredFields.add("PurchaseType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CardIssuanceCreateVirtualCardRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CardIssuanceCreateVirtualCardRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardIssuanceCreateVirtualCardRequest is not found in the empty JSON string", CardIssuanceCreateVirtualCardRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardIssuanceCreateVirtualCardRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("MerchantGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantGuid").toString()));
      }
      if (!jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if (!jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("Phone") != null && !jsonObj.get("Phone").isJsonNull()) && !jsonObj.get("Phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Phone").toString()));
      }
      if ((jsonObj.get("Address1") != null && !jsonObj.get("Address1").isJsonNull()) && !jsonObj.get("Address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address1").toString()));
      }
      if ((jsonObj.get("Address2") != null && !jsonObj.get("Address2").isJsonNull()) && !jsonObj.get("Address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address2").toString()));
      }
      if ((jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) && !jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      if ((jsonObj.get("ZipCode") != null && !jsonObj.get("ZipCode").isJsonNull()) && !jsonObj.get("ZipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ZipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ZipCode").toString()));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if (!jsonObj.get("PurchaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PurchaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PurchaseType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MIDWhitelist") != null && !jsonObj.get("MIDWhitelist").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MIDWhitelist` to be an array in the JSON string but got `%s`", jsonObj.get("MIDWhitelist").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MIDBlacklist") != null && !jsonObj.get("MIDBlacklist").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MIDBlacklist` to be an array in the JSON string but got `%s`", jsonObj.get("MIDBlacklist").toString()));
      }
      if ((jsonObj.get("SequenceNumber") != null && !jsonObj.get("SequenceNumber").isJsonNull()) && !jsonObj.get("SequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SequenceNumber").toString()));
      }
      if ((jsonObj.get("OrderNumber") != null && !jsonObj.get("OrderNumber").isJsonNull()) && !jsonObj.get("OrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderNumber").toString()));
      }
      if ((jsonObj.get("IncomingTransactionCode") != null && !jsonObj.get("IncomingTransactionCode").isJsonNull()) && !jsonObj.get("IncomingTransactionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IncomingTransactionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IncomingTransactionCode").toString()));
      }
      if ((jsonObj.get("SupplierId") != null && !jsonObj.get("SupplierId").isJsonNull()) && !jsonObj.get("SupplierId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupplierId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SupplierId").toString()));
      }
      // validate the optional field `Transmission`
      if (jsonObj.get("Transmission") != null && !jsonObj.get("Transmission").isJsonNull()) {
        CardIssuanceCreateVirtualCardRequestTransmission.validateJsonObject(jsonObj.getAsJsonObject("Transmission"));
      }
      if ((jsonObj.get("CustomerID") != null && !jsonObj.get("CustomerID").isJsonNull()) && !jsonObj.get("CustomerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerID").toString()));
      }
      if ((jsonObj.get("AssociationId") != null && !jsonObj.get("AssociationId").isJsonNull()) && !jsonObj.get("AssociationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssociationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssociationId").toString()));
      }
      if (jsonObj.get("CustomParameters") != null && !jsonObj.get("CustomParameters").isJsonNull()) {
        JsonArray jsonArraycustomParameters = jsonObj.getAsJsonArray("CustomParameters");
        if (jsonArraycustomParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CustomParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CustomParameters` to be an array in the JSON string but got `%s`", jsonObj.get("CustomParameters").toString()));
          }

          // validate the optional field `CustomParameters` (array)
          for (int i = 0; i < jsonArraycustomParameters.size(); i++) {
            CardIssuanceCreateVirtualCardRequestCustomParametersInner.validateJsonObject(jsonArraycustomParameters.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LabelIDs") != null && !jsonObj.get("LabelIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LabelIDs` to be an array in the JSON string but got `%s`", jsonObj.get("LabelIDs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardIssuanceCreateVirtualCardRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardIssuanceCreateVirtualCardRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardIssuanceCreateVirtualCardRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardIssuanceCreateVirtualCardRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CardIssuanceCreateVirtualCardRequest>() {
           @Override
           public void write(JsonWriter out, CardIssuanceCreateVirtualCardRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CardIssuanceCreateVirtualCardRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CardIssuanceCreateVirtualCardRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardIssuanceCreateVirtualCardRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardIssuanceCreateVirtualCardRequest
  * @throws IOException if the JSON string is invalid with respect to CardIssuanceCreateVirtualCardRequest
  */
  public static CardIssuanceCreateVirtualCardRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardIssuanceCreateVirtualCardRequest.class);
  }

 /**
  * Convert an instance of CardIssuanceCreateVirtualCardRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

