/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TokenRequestHppTokenRequestSale;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TokenRequestHppTokenRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TokenRequestHppTokenRequest {
  public static final String SERIALIZED_NAME_MERCHANT_NAME = "MerchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RESULT_REDIRECT_URL = "ResultRedirectUrl";
  @SerializedName(SERIALIZED_NAME_RESULT_REDIRECT_URL)
  private String resultRedirectUrl;

  public static final String SERIALIZED_NAME_LOGO_URL = "LogoUrl";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_TENDER_TYPE_OPTIONS = "TenderTypeOptions";
  @SerializedName(SERIALIZED_NAME_TENDER_TYPE_OPTIONS)
  private List<String> tenderTypeOptions = null;

  public static final String SERIALIZED_NAME_EXPIRATION = "Expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private OffsetDateTime expiration;

  public static final String SERIALIZED_NAME_SALE = "Sale";
  @SerializedName(SERIALIZED_NAME_SALE)
  private TokenRequestHppTokenRequestSale sale;

  public TokenRequestHppTokenRequest() {
  }

  public TokenRequestHppTokenRequest merchantName(String merchantName) {
    
    
    
    
    this.merchantName = merchantName;
    return this;
  }

   /**
   * Merchant Name. ConnexPay displays this on the Hosted Payment Page. The max length is 100 characters.
   * @return merchantName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Merchant Name. ConnexPay displays this on the Hosted Payment Page. The max length is 100 characters.")

  public String getMerchantName() {
    return merchantName;
  }


  public void setMerchantName(String merchantName) {
    
    
    
    this.merchantName = merchantName;
  }


  public TokenRequestHppTokenRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Additional information ConnexPay can display in the Hosted Payment Page. The max length is 2048 characters.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional information ConnexPay can display in the Hosted Payment Page. The max length is 2048 characters.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TokenRequestHppTokenRequest resultRedirectUrl(String resultRedirectUrl) {
    
    
    
    
    this.resultRedirectUrl = resultRedirectUrl;
    return this;
  }

   /**
   * This is a ConnexPay CLIENT server route ConnexPay uses to (re)direct the consumer payment result back to our client upon payment success, failure or cancel. If this data is not set, then it will use the default one from ConnexPay.
   * @return resultRedirectUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is a ConnexPay CLIENT server route ConnexPay uses to (re)direct the consumer payment result back to our client upon payment success, failure or cancel. If this data is not set, then it will use the default one from ConnexPay.")

  public String getResultRedirectUrl() {
    return resultRedirectUrl;
  }


  public void setResultRedirectUrl(String resultRedirectUrl) {
    
    
    
    this.resultRedirectUrl = resultRedirectUrl;
  }


  public TokenRequestHppTokenRequest logoUrl(String logoUrl) {
    
    
    
    
    this.logoUrl = logoUrl;
    return this;
  }

   /**
   * ConnexPay can display this instead of “MerchantName” in the payment dialog.
   * @return logoUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ConnexPay can display this instead of “MerchantName” in the payment dialog.")

  public String getLogoUrl() {
    return logoUrl;
  }


  public void setLogoUrl(String logoUrl) {
    
    
    
    this.logoUrl = logoUrl;
  }


  public TokenRequestHppTokenRequest tenderTypeOptions(List<String> tenderTypeOptions) {
    
    
    
    
    this.tenderTypeOptions = tenderTypeOptions;
    return this;
  }

  public TokenRequestHppTokenRequest addTenderTypeOptionsItem(String tenderTypeOptionsItem) {
    if (this.tenderTypeOptions == null) {
      this.tenderTypeOptions = new ArrayList<>();
    }
    this.tenderTypeOptions.add(tenderTypeOptionsItem);
    return this;
  }

   /**
   * Payment types you wish to make available to your consumer when they enter payment information into the Hosted Payment Page. Options are \&quot;ACH\&quot;, \&quot;Credit\&quot;, \&quot;GooglePay\&quot;/
   * @return tenderTypeOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"Credit\"]", value = "Payment types you wish to make available to your consumer when they enter payment information into the Hosted Payment Page. Options are \"ACH\", \"Credit\", \"GooglePay\"/")

  public List<String> getTenderTypeOptions() {
    return tenderTypeOptions;
  }


  public void setTenderTypeOptions(List<String> tenderTypeOptions) {
    
    
    
    this.tenderTypeOptions = tenderTypeOptions;
  }


  public TokenRequestHppTokenRequest expiration(OffsetDateTime expiration) {
    
    
    
    
    this.expiration = expiration;
    return this;
  }

   /**
   * Client can request a specific expiration date to identify when the HPP Link will expire. Timestamps will be converted to UTC for consistency within the ConnexPay environment.
   * @return expiration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Client can request a specific expiration date to identify when the HPP Link will expire. Timestamps will be converted to UTC for consistency within the ConnexPay environment.")

  public OffsetDateTime getExpiration() {
    return expiration;
  }


  public void setExpiration(OffsetDateTime expiration) {
    
    
    
    this.expiration = expiration;
  }


  public TokenRequestHppTokenRequest sale(TokenRequestHppTokenRequestSale sale) {
    
    
    
    
    this.sale = sale;
    return this;
  }

   /**
   * Get sale
   * @return sale
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TokenRequestHppTokenRequestSale getSale() {
    return sale;
  }


  public void setSale(TokenRequestHppTokenRequestSale sale) {
    
    
    
    this.sale = sale;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TokenRequestHppTokenRequest instance itself
   */
  public TokenRequestHppTokenRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenRequestHppTokenRequest tokenRequestHppTokenRequest = (TokenRequestHppTokenRequest) o;
    return Objects.equals(this.merchantName, tokenRequestHppTokenRequest.merchantName) &&
        Objects.equals(this.description, tokenRequestHppTokenRequest.description) &&
        Objects.equals(this.resultRedirectUrl, tokenRequestHppTokenRequest.resultRedirectUrl) &&
        Objects.equals(this.logoUrl, tokenRequestHppTokenRequest.logoUrl) &&
        Objects.equals(this.tenderTypeOptions, tokenRequestHppTokenRequest.tenderTypeOptions) &&
        Objects.equals(this.expiration, tokenRequestHppTokenRequest.expiration) &&
        Objects.equals(this.sale, tokenRequestHppTokenRequest.sale)&&
        Objects.equals(this.additionalProperties, tokenRequestHppTokenRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantName, description, resultRedirectUrl, logoUrl, tenderTypeOptions, expiration, sale, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenRequestHppTokenRequest {\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    resultRedirectUrl: ").append(toIndentedString(resultRedirectUrl)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    tenderTypeOptions: ").append(toIndentedString(tenderTypeOptions)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    sale: ").append(toIndentedString(sale)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MerchantName");
    openapiFields.add("Description");
    openapiFields.add("ResultRedirectUrl");
    openapiFields.add("LogoUrl");
    openapiFields.add("TenderTypeOptions");
    openapiFields.add("Expiration");
    openapiFields.add("Sale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MerchantName");
    openapiRequiredFields.add("Sale");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TokenRequestHppTokenRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TokenRequestHppTokenRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokenRequestHppTokenRequest is not found in the empty JSON string", TokenRequestHppTokenRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TokenRequestHppTokenRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("MerchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantName").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("ResultRedirectUrl") != null && !jsonObj.get("ResultRedirectUrl").isJsonNull()) && !jsonObj.get("ResultRedirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResultRedirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResultRedirectUrl").toString()));
      }
      if ((jsonObj.get("LogoUrl") != null && !jsonObj.get("LogoUrl").isJsonNull()) && !jsonObj.get("LogoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogoUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("TenderTypeOptions") != null && !jsonObj.get("TenderTypeOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenderTypeOptions` to be an array in the JSON string but got `%s`", jsonObj.get("TenderTypeOptions").toString()));
      }
      // validate the required field `Sale`
      TokenRequestHppTokenRequestSale.validateJsonObject(jsonObj.getAsJsonObject("Sale"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokenRequestHppTokenRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokenRequestHppTokenRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokenRequestHppTokenRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokenRequestHppTokenRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TokenRequestHppTokenRequest>() {
           @Override
           public void write(JsonWriter out, TokenRequestHppTokenRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TokenRequestHppTokenRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TokenRequestHppTokenRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TokenRequestHppTokenRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TokenRequestHppTokenRequest
  * @throws IOException if the JSON string is invalid with respect to TokenRequestHppTokenRequest
  */
  public static TokenRequestHppTokenRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokenRequestHppTokenRequest.class);
  }

 /**
  * Convert an instance of TokenRequestHppTokenRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

