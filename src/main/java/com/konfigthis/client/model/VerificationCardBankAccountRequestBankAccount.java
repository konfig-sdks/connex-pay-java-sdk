/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SaleCreateTransactionRequestBankAccountCustomer;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Conditional - Mandatory if Verify Bank Account is the parameter requested.
 */
@ApiModel(description = "Conditional - Mandatory if Verify Bank Account is the parameter requested.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VerificationCardBankAccountRequestBankAccount {
  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "AccountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "RoutingNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "AccountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_NAME_ON_ACCOUNT = "NameOnAccount";
  @SerializedName(SERIALIZED_NAME_NAME_ON_ACCOUNT)
  private String nameOnAccount;

  public static final String SERIALIZED_NAME_ACCOUNT_AND_ROUTING_NUMBER_TOKEN = "AccountAndRoutingNumberToken";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_AND_ROUTING_NUMBER_TOKEN)
  private String accountAndRoutingNumberToken;

  public static final String SERIALIZED_NAME_CUSTOMER = "Customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private SaleCreateTransactionRequestBankAccountCustomer customer;

  public VerificationCardBankAccountRequestBankAccount() {
  }

  public VerificationCardBankAccountRequestBankAccount accountType(String accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Accepted account types are: Saving or Checking
   * @return accountType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Accepted account types are: Saving or Checking")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    
    
    
    this.accountType = accountType;
  }


  public VerificationCardBankAccountRequestBankAccount routingNumber(String routingNumber) {
    
    
    
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * 9 Digit routing number
   * @return routingNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "9 Digit routing number")

  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    
    
    
    this.routingNumber = routingNumber;
  }


  public VerificationCardBankAccountRequestBankAccount accountNumber(String accountNumber) {
    
    
    
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Account number up to 20 characters
   * @return accountNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Account number up to 20 characters")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    
    this.accountNumber = accountNumber;
  }


  public VerificationCardBankAccountRequestBankAccount nameOnAccount(String nameOnAccount) {
    
    
    
    
    this.nameOnAccount = nameOnAccount;
    return this;
  }

   /**
   * Name on the account for ACH transfer (upto 50 characters)
   * @return nameOnAccount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name on the account for ACH transfer (upto 50 characters)")

  public String getNameOnAccount() {
    return nameOnAccount;
  }


  public void setNameOnAccount(String nameOnAccount) {
    
    
    
    this.nameOnAccount = nameOnAccount;
  }


  public VerificationCardBankAccountRequestBankAccount accountAndRoutingNumberToken(String accountAndRoutingNumberToken) {
    
    
    
    
    this.accountAndRoutingNumberToken = accountAndRoutingNumberToken;
    return this;
  }

   /**
   * Encrypted Token previously assigned to Bank Account. Either AccountAndRoutingNumberToken or both AccountNumber  and RoutingNumber  should be provided.
   * @return accountAndRoutingNumberToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Encrypted Token previously assigned to Bank Account. Either AccountAndRoutingNumberToken or both AccountNumber  and RoutingNumber  should be provided.")

  public String getAccountAndRoutingNumberToken() {
    return accountAndRoutingNumberToken;
  }


  public void setAccountAndRoutingNumberToken(String accountAndRoutingNumberToken) {
    
    
    
    this.accountAndRoutingNumberToken = accountAndRoutingNumberToken;
  }


  public VerificationCardBankAccountRequestBankAccount customer(SaleCreateTransactionRequestBankAccountCustomer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SaleCreateTransactionRequestBankAccountCustomer getCustomer() {
    return customer;
  }


  public void setCustomer(SaleCreateTransactionRequestBankAccountCustomer customer) {
    
    
    
    this.customer = customer;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VerificationCardBankAccountRequestBankAccount instance itself
   */
  public VerificationCardBankAccountRequestBankAccount putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerificationCardBankAccountRequestBankAccount verificationCardBankAccountRequestBankAccount = (VerificationCardBankAccountRequestBankAccount) o;
    return Objects.equals(this.accountType, verificationCardBankAccountRequestBankAccount.accountType) &&
        Objects.equals(this.routingNumber, verificationCardBankAccountRequestBankAccount.routingNumber) &&
        Objects.equals(this.accountNumber, verificationCardBankAccountRequestBankAccount.accountNumber) &&
        Objects.equals(this.nameOnAccount, verificationCardBankAccountRequestBankAccount.nameOnAccount) &&
        Objects.equals(this.accountAndRoutingNumberToken, verificationCardBankAccountRequestBankAccount.accountAndRoutingNumberToken) &&
        Objects.equals(this.customer, verificationCardBankAccountRequestBankAccount.customer)&&
        Objects.equals(this.additionalProperties, verificationCardBankAccountRequestBankAccount.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, routingNumber, accountNumber, nameOnAccount, accountAndRoutingNumberToken, customer, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerificationCardBankAccountRequestBankAccount {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    nameOnAccount: ").append(toIndentedString(nameOnAccount)).append("\n");
    sb.append("    accountAndRoutingNumberToken: ").append(toIndentedString(accountAndRoutingNumberToken)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountType");
    openapiFields.add("RoutingNumber");
    openapiFields.add("AccountNumber");
    openapiFields.add("NameOnAccount");
    openapiFields.add("AccountAndRoutingNumberToken");
    openapiFields.add("Customer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AccountType");
    openapiRequiredFields.add("RoutingNumber");
    openapiRequiredFields.add("AccountNumber");
    openapiRequiredFields.add("NameOnAccount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VerificationCardBankAccountRequestBankAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VerificationCardBankAccountRequestBankAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerificationCardBankAccountRequestBankAccount is not found in the empty JSON string", VerificationCardBankAccountRequestBankAccount.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VerificationCardBankAccountRequestBankAccount.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("AccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountType").toString()));
      }
      if (!jsonObj.get("RoutingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoutingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoutingNumber").toString()));
      }
      if (!jsonObj.get("AccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountNumber").toString()));
      }
      if (!jsonObj.get("NameOnAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NameOnAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NameOnAccount").toString()));
      }
      if ((jsonObj.get("AccountAndRoutingNumberToken") != null && !jsonObj.get("AccountAndRoutingNumberToken").isJsonNull()) && !jsonObj.get("AccountAndRoutingNumberToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountAndRoutingNumberToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountAndRoutingNumberToken").toString()));
      }
      // validate the optional field `Customer`
      if (jsonObj.get("Customer") != null && !jsonObj.get("Customer").isJsonNull()) {
        SaleCreateTransactionRequestBankAccountCustomer.validateJsonObject(jsonObj.getAsJsonObject("Customer"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerificationCardBankAccountRequestBankAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerificationCardBankAccountRequestBankAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerificationCardBankAccountRequestBankAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerificationCardBankAccountRequestBankAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<VerificationCardBankAccountRequestBankAccount>() {
           @Override
           public void write(JsonWriter out, VerificationCardBankAccountRequestBankAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VerificationCardBankAccountRequestBankAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VerificationCardBankAccountRequestBankAccount instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VerificationCardBankAccountRequestBankAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VerificationCardBankAccountRequestBankAccount
  * @throws IOException if the JSON string is invalid with respect to VerificationCardBankAccountRequestBankAccount
  */
  public static VerificationCardBankAccountRequestBankAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerificationCardBankAccountRequestBankAccount.class);
  }

 /**
  * Convert an instance of VerificationCardBankAccountRequestBankAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

