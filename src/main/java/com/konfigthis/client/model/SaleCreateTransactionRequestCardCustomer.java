/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Customer data
 */
@ApiModel(description = "Customer data")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SaleCreateTransactionRequestCardCustomer {
  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PHONE = "Phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ADDRESS1 = "Address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "Address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_ZIP = "Zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "DateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_DRIVERS_LICENSE_NUMBER = "DriversLicenseNumber";
  @SerializedName(SERIALIZED_NAME_DRIVERS_LICENSE_NUMBER)
  private Integer driversLicenseNumber;

  public static final String SERIALIZED_NAME_DRIVERS_LICENSE_STATE = "DriversLicenseState";
  @SerializedName(SERIALIZED_NAME_DRIVERS_LICENSE_STATE)
  private String driversLicenseState;

  public static final String SERIALIZED_NAME_S_S_N4 = "SSN4";
  @SerializedName(SERIALIZED_NAME_S_S_N4)
  private Integer SSN4;

  public SaleCreateTransactionRequestCardCustomer() {
  }

  public SaleCreateTransactionRequestCardCustomer firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Mandatory for ACH Sales.  Min Length &#x3D; 2 Max Length &#x3D; 30
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mandatory for ACH Sales.  Min Length = 2 Max Length = 30")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public SaleCreateTransactionRequestCardCustomer lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Mandatory for ACH Sales. Min Length &#x3D; 2 Max Length &#x3D; 30
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mandatory for ACH Sales. Min Length = 2 Max Length = 30")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public SaleCreateTransactionRequestCardCustomer phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Customer&#39;s phone number. Phone number up to 15 characters. Numbers and plus sign (+) allowed only.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer's phone number. Phone number up to 15 characters. Numbers and plus sign (+) allowed only.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public SaleCreateTransactionRequestCardCustomer city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Customer&#39;s City
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer's City")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public SaleCreateTransactionRequestCardCustomer state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Customer&#39;s short name state.  The ISO 3166-2 CA and US state or province code of a customer. Length &#x3D; 2.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer's short name state.  The ISO 3166-2 CA and US state or province code of a customer. Length = 2.")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public SaleCreateTransactionRequestCardCustomer country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Customer&#39;s country. The ISO country code of a customer’s country.  Length &#x3D; 2
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer's country. The ISO country code of a customer’s country.  Length = 2")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public SaleCreateTransactionRequestCardCustomer email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Customer&#39;s valid email address which is available in various reports. It is critical that SendReceipt is set to FALSE so that ConnexPay does not send a receipt to the cardholder when the transaction is processed
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer's valid email address which is available in various reports. It is critical that SendReceipt is set to FALSE so that ConnexPay does not send a receipt to the cardholder when the transaction is processed")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public SaleCreateTransactionRequestCardCustomer address1(String address1) {
    
    
    
    
    this.address1 = address1;
    return this;
  }

   /**
   * Customer billing address 1. It is strongly recommended to send this value in a card-not-present environment such that enhanced Address Validation (AVS) can be performed on transaction and the lowest possible interchange is received on transaction. Note: only the street number value portion of address is used for enhanced AVS check
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer billing address 1. It is strongly recommended to send this value in a card-not-present environment such that enhanced Address Validation (AVS) can be performed on transaction and the lowest possible interchange is received on transaction. Note: only the street number value portion of address is used for enhanced AVS check")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    
    this.address1 = address1;
  }


  public SaleCreateTransactionRequestCardCustomer address2(String address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * Customer billing address 2. It is strongly recommended to send this value in a card-not-present environment such that Address Validation (AVS) can be performed on transaction and the lowest possible interchange is received on transaction
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer billing address 2. It is strongly recommended to send this value in a card-not-present environment such that Address Validation (AVS) can be performed on transaction and the lowest possible interchange is received on transaction")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    
    this.address2 = address2;
  }


  public SaleCreateTransactionRequestCardCustomer zip(String zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * Customer billing postal code. It is strongly recommended to send this value in a card-not-present environment such that basic Address Validation (AVS) can be performed on transaction and the lowest possible interchange is received on transaction.  Only the a standard U.S. 5 digit zip code is eligible for basic AVS check. Min Length &#x3D; 2 Max Length &#x3D; 15. Alphanumerics and \&quot;-\&quot; allowed.
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer billing postal code. It is strongly recommended to send this value in a card-not-present environment such that basic Address Validation (AVS) can be performed on transaction and the lowest possible interchange is received on transaction.  Only the a standard U.S. 5 digit zip code is eligible for basic AVS check. Min Length = 2 Max Length = 15. Alphanumerics and \"-\" allowed.")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    
    this.zip = zip;
  }


  public SaleCreateTransactionRequestCardCustomer dateOfBirth(LocalDate dateOfBirth) {
    
    
    
    
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Customer&#39;s date of birth. Allowed format: YYYY-MM-DD. For example: 2002-05-30
   * @return dateOfBirth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer's date of birth. Allowed format: YYYY-MM-DD. For example: 2002-05-30")

  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }


  public void setDateOfBirth(LocalDate dateOfBirth) {
    
    
    
    this.dateOfBirth = dateOfBirth;
  }


  public SaleCreateTransactionRequestCardCustomer driversLicenseNumber(Integer driversLicenseNumber) {
    
    
    
    
    this.driversLicenseNumber = driversLicenseNumber;
    return this;
  }

   /**
   * Customer&#39;s driver license number.  Only letters, numbers and a hyphen is allowed
   * @return driversLicenseNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer's driver license number.  Only letters, numbers and a hyphen is allowed")

  public Integer getDriversLicenseNumber() {
    return driversLicenseNumber;
  }


  public void setDriversLicenseNumber(Integer driversLicenseNumber) {
    
    
    
    this.driversLicenseNumber = driversLicenseNumber;
  }


  public SaleCreateTransactionRequestCardCustomer driversLicenseState(String driversLicenseState) {
    
    
    
    
    this.driversLicenseState = driversLicenseState;
    return this;
  }

   /**
   * Mandatory when DriverLicenseNumber is provided. Customer&#39;s driver license short name state. The ISO 3166-2 CA and US state or province code of a customer.  Length &#x3D; 2
   * @return driversLicenseState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mandatory when DriverLicenseNumber is provided. Customer's driver license short name state. The ISO 3166-2 CA and US state or province code of a customer.  Length = 2")

  public String getDriversLicenseState() {
    return driversLicenseState;
  }


  public void setDriversLicenseState(String driversLicenseState) {
    
    
    
    this.driversLicenseState = driversLicenseState;
  }


  public SaleCreateTransactionRequestCardCustomer SSN4(Integer SSN4) {
    
    
    
    
    this.SSN4 = SSN4;
    return this;
  }

   /**
   * Last 4 of Customer&#39;s Social Security Number
   * @return SSN4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last 4 of Customer's Social Security Number")

  public Integer getSSN4() {
    return SSN4;
  }


  public void setSSN4(Integer SSN4) {
    
    
    
    this.SSN4 = SSN4;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SaleCreateTransactionRequestCardCustomer instance itself
   */
  public SaleCreateTransactionRequestCardCustomer putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleCreateTransactionRequestCardCustomer saleCreateTransactionRequestCardCustomer = (SaleCreateTransactionRequestCardCustomer) o;
    return Objects.equals(this.firstName, saleCreateTransactionRequestCardCustomer.firstName) &&
        Objects.equals(this.lastName, saleCreateTransactionRequestCardCustomer.lastName) &&
        Objects.equals(this.phone, saleCreateTransactionRequestCardCustomer.phone) &&
        Objects.equals(this.city, saleCreateTransactionRequestCardCustomer.city) &&
        Objects.equals(this.state, saleCreateTransactionRequestCardCustomer.state) &&
        Objects.equals(this.country, saleCreateTransactionRequestCardCustomer.country) &&
        Objects.equals(this.email, saleCreateTransactionRequestCardCustomer.email) &&
        Objects.equals(this.address1, saleCreateTransactionRequestCardCustomer.address1) &&
        Objects.equals(this.address2, saleCreateTransactionRequestCardCustomer.address2) &&
        Objects.equals(this.zip, saleCreateTransactionRequestCardCustomer.zip) &&
        Objects.equals(this.dateOfBirth, saleCreateTransactionRequestCardCustomer.dateOfBirth) &&
        Objects.equals(this.driversLicenseNumber, saleCreateTransactionRequestCardCustomer.driversLicenseNumber) &&
        Objects.equals(this.driversLicenseState, saleCreateTransactionRequestCardCustomer.driversLicenseState) &&
        Objects.equals(this.SSN4, saleCreateTransactionRequestCardCustomer.SSN4)&&
        Objects.equals(this.additionalProperties, saleCreateTransactionRequestCardCustomer.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, phone, city, state, country, email, address1, address2, zip, dateOfBirth, driversLicenseNumber, driversLicenseState, SSN4, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleCreateTransactionRequestCardCustomer {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    driversLicenseNumber: ").append(toIndentedString(driversLicenseNumber)).append("\n");
    sb.append("    driversLicenseState: ").append(toIndentedString(driversLicenseState)).append("\n");
    sb.append("    SSN4: ").append(toIndentedString(SSN4)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FirstName");
    openapiFields.add("LastName");
    openapiFields.add("Phone");
    openapiFields.add("City");
    openapiFields.add("State");
    openapiFields.add("Country");
    openapiFields.add("Email");
    openapiFields.add("Address1");
    openapiFields.add("Address2");
    openapiFields.add("Zip");
    openapiFields.add("DateOfBirth");
    openapiFields.add("DriversLicenseNumber");
    openapiFields.add("DriversLicenseState");
    openapiFields.add("SSN4");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SaleCreateTransactionRequestCardCustomer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SaleCreateTransactionRequestCardCustomer.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaleCreateTransactionRequestCardCustomer is not found in the empty JSON string", SaleCreateTransactionRequestCardCustomer.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("Phone") != null && !jsonObj.get("Phone").isJsonNull()) && !jsonObj.get("Phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Phone").toString()));
      }
      if ((jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) && !jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("Address1") != null && !jsonObj.get("Address1").isJsonNull()) && !jsonObj.get("Address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address1").toString()));
      }
      if ((jsonObj.get("Address2") != null && !jsonObj.get("Address2").isJsonNull()) && !jsonObj.get("Address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address2").toString()));
      }
      if ((jsonObj.get("Zip") != null && !jsonObj.get("Zip").isJsonNull()) && !jsonObj.get("Zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Zip").toString()));
      }
      if ((jsonObj.get("DriversLicenseState") != null && !jsonObj.get("DriversLicenseState").isJsonNull()) && !jsonObj.get("DriversLicenseState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DriversLicenseState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DriversLicenseState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleCreateTransactionRequestCardCustomer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaleCreateTransactionRequestCardCustomer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleCreateTransactionRequestCardCustomer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleCreateTransactionRequestCardCustomer.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleCreateTransactionRequestCardCustomer>() {
           @Override
           public void write(JsonWriter out, SaleCreateTransactionRequestCardCustomer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleCreateTransactionRequestCardCustomer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SaleCreateTransactionRequestCardCustomer instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SaleCreateTransactionRequestCardCustomer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SaleCreateTransactionRequestCardCustomer
  * @throws IOException if the JSON string is invalid with respect to SaleCreateTransactionRequestCardCustomer
  */
  public static SaleCreateTransactionRequestCardCustomer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleCreateTransactionRequestCardCustomer.class);
  }

 /**
  * Convert an instance of SaleCreateTransactionRequestCardCustomer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

