/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AuthenticationAcquireClientAuthorizationRequestBankAccount;
import com.konfigthis.client.model.AuthenticationAcquireClientAuthorizationRequestBrowserData;
import com.konfigthis.client.model.AuthenticationAcquireClientAuthorizationRequestCard;
import com.konfigthis.client.model.AuthenticationAcquireClientAuthorizationRequestRiskData;
import com.konfigthis.client.model.SaleCreateTransactionRequestCustomer;
import com.konfigthis.client.model.SaleCreateTransactionRequestEnhancedData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AuthenticationAcquireClientAuthorizationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AuthenticationAcquireClientAuthorizationRequest {
  public static final String SERIALIZED_NAME_DEVICE_GUID = "DeviceGuid";
  @SerializedName(SERIALIZED_NAME_DEVICE_GUID)
  private String deviceGuid;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "OrderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_SEND_RECEIPT = "SendReceipt";
  @SerializedName(SERIALIZED_NAME_SEND_RECEIPT)
  private Boolean sendReceipt;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTION = "StatementDescription";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTION)
  private String statementDescription;

  public static final String SERIALIZED_NAME_CUSTOMER_I_D = "CustomerID";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_I_D)
  private String customerID;

  public static final String SERIALIZED_NAME_RISK_DATA = "RiskData";
  @SerializedName(SERIALIZED_NAME_RISK_DATA)
  private AuthenticationAcquireClientAuthorizationRequestRiskData riskData;

  public static final String SERIALIZED_NAME_CARD = "Card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private AuthenticationAcquireClientAuthorizationRequestCard card;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT = "BankAccount";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT)
  private AuthenticationAcquireClientAuthorizationRequestBankAccount bankAccount;

  public static final String SERIALIZED_NAME_CUSTOMER = "Customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private SaleCreateTransactionRequestCustomer customer;

  public static final String SERIALIZED_NAME_ENHANCED_DATA = "EnhancedData";
  @SerializedName(SERIALIZED_NAME_ENHANCED_DATA)
  private SaleCreateTransactionRequestEnhancedData enhancedData;

  public static final String SERIALIZED_NAME_ASSOCIATION_I_D = "AssociationID";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_I_D)
  private String associationID;

  public static final String SERIALIZED_NAME_BROWSER_DATA = "BrowserData";
  @SerializedName(SERIALIZED_NAME_BROWSER_DATA)
  private AuthenticationAcquireClientAuthorizationRequestBrowserData browserData;

  public AuthenticationAcquireClientAuthorizationRequest() {
  }

  public AuthenticationAcquireClientAuthorizationRequest deviceGuid(String deviceGuid) {
    
    
    
    
    this.deviceGuid = deviceGuid;
    return this;
  }

   /**
   * Device&#39;s Guid provided by ConnexPay.
   * @return deviceGuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Device's Guid provided by ConnexPay.")

  public String getDeviceGuid() {
    return deviceGuid;
  }


  public void setDeviceGuid(String deviceGuid) {
    
    
    
    this.deviceGuid = deviceGuid;
  }


  public AuthenticationAcquireClientAuthorizationRequest amount(Float amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount of the transaction that will be processed. Note: this value is submitted multiple times (in different formats) within the integration to support different purposes i.e. risk analysis, merchant processing, etc.  The minimum amount is: $0.50.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Amount of the transaction that will be processed. Note: this value is submitted multiple times (in different formats) within the integration to support different purposes i.e. risk analysis, merchant processing, etc.  The minimum amount is: $0.50.")

  public Float getAmount() {
    return amount;
  }


  public void setAmount(Float amount) {
    
    
    
    this.amount = amount;
  }


  public AuthenticationAcquireClientAuthorizationRequest sequenceNumber(String sequenceNumber) {
    
    
    
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Transaction sequence number within client environment. Provide a unique SequenceNumber for each new request. If the same value is sent within 30 minutes it will be considered a duplicate request. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric.
   * @return sequenceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction sequence number within client environment. Provide a unique SequenceNumber for each new request. If the same value is sent within 30 minutes it will be considered a duplicate request. Note: value is not searchable or reportable in ConnexPay portal.  Alphanumeric.")

  public String getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(String sequenceNumber) {
    
    
    
    this.sequenceNumber = sequenceNumber;
  }


  public AuthenticationAcquireClientAuthorizationRequest orderNumber(String orderNumber) {
    
    
    
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * This is the most common number you&#39;ll see throughout the ConnexPay Portal.  Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field.  The maximum length is 50 alpha-numeric characters.
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is the most common number you'll see throughout the ConnexPay Portal.  Transaction ID within client environment associated with the order. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple instances of the integration for multiple purposes. Customers in the travel space often send the Record Locator/PNR in this field.  The maximum length is 50 alpha-numeric characters.")

  public String getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(String orderNumber) {
    
    
    
    this.orderNumber = orderNumber;
  }


  public AuthenticationAcquireClientAuthorizationRequest sendReceipt(Boolean sendReceipt) {
    
    
    
    
    this.sendReceipt = sendReceipt;
    return this;
  }

   /**
   * Value determines whether or not a customer shall be emailed a receipt from the ConnexPay platform if the email address is provided in the API customer block. The default value is TRUE. Set to FALSE so that an email receipt is not sent to the customer. Set to TRUE or leave empty if you want e-mail to be sent. If TRUE, customer&#39;s email must be included in the \&quot;Card.Customer.email\&quot; parameter.
   * @return sendReceipt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value determines whether or not a customer shall be emailed a receipt from the ConnexPay platform if the email address is provided in the API customer block. The default value is TRUE. Set to FALSE so that an email receipt is not sent to the customer. Set to TRUE or leave empty if you want e-mail to be sent. If TRUE, customer's email must be included in the \"Card.Customer.email\" parameter.")

  public Boolean getSendReceipt() {
    return sendReceipt;
  }


  public void setSendReceipt(Boolean sendReceipt) {
    
    
    
    this.sendReceipt = sendReceipt;
  }


  public AuthenticationAcquireClientAuthorizationRequest statementDescription(String statementDescription) {
    
    
    
    
    this.statementDescription = statementDescription;
    return this;
  }

   /**
   * US Clients only: The statement description allows a client to customize the Merchant name that appears on the cardholder statement such that the cardholder recognizes the transaction on their statement. ConnexPay recommends sending a recognizable DBA along with the PNR i.e. ABC Travel ABC123. Note: functionality not applicable for American Express OptBlue program.  The maximun length is 25 alpha-numeric characters.
   * @return statementDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "US Clients only: The statement description allows a client to customize the Merchant name that appears on the cardholder statement such that the cardholder recognizes the transaction on their statement. ConnexPay recommends sending a recognizable DBA along with the PNR i.e. ABC Travel ABC123. Note: functionality not applicable for American Express OptBlue program.  The maximun length is 25 alpha-numeric characters.")

  public String getStatementDescription() {
    return statementDescription;
  }


  public void setStatementDescription(String statementDescription) {
    
    
    
    this.statementDescription = statementDescription;
  }


  public AuthenticationAcquireClientAuthorizationRequest customerID(String customerID) {
    
    
    
    
    this.customerID = customerID;
    return this;
  }

   /**
   * Transaction ID within client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes.  The maximum length is 100 characters and is alpha-numeric.
   * @return customerID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction ID within client environment associated with the customer. This value acts as a secondary identifier in conjunction with OrderNumber. The value is searchable and reportable in the ConnexPay portal. This value may be sent in multiple times within the integration for multiple purposes.  The maximum length is 100 characters and is alpha-numeric.")

  public String getCustomerID() {
    return customerID;
  }


  public void setCustomerID(String customerID) {
    
    
    
    this.customerID = customerID;
  }


  public AuthenticationAcquireClientAuthorizationRequest riskData(AuthenticationAcquireClientAuthorizationRequestRiskData riskData) {
    
    
    
    
    this.riskData = riskData;
    return this;
  }

   /**
   * Get riskData
   * @return riskData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AuthenticationAcquireClientAuthorizationRequestRiskData getRiskData() {
    return riskData;
  }


  public void setRiskData(AuthenticationAcquireClientAuthorizationRequestRiskData riskData) {
    
    
    
    this.riskData = riskData;
  }


  public AuthenticationAcquireClientAuthorizationRequest card(AuthenticationAcquireClientAuthorizationRequestCard card) {
    
    
    
    
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AuthenticationAcquireClientAuthorizationRequestCard getCard() {
    return card;
  }


  public void setCard(AuthenticationAcquireClientAuthorizationRequestCard card) {
    
    
    
    this.card = card;
  }


  public AuthenticationAcquireClientAuthorizationRequest bankAccount(AuthenticationAcquireClientAuthorizationRequestBankAccount bankAccount) {
    
    
    
    
    this.bankAccount = bankAccount;
    return this;
  }

   /**
   * Get bankAccount
   * @return bankAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AuthenticationAcquireClientAuthorizationRequestBankAccount getBankAccount() {
    return bankAccount;
  }


  public void setBankAccount(AuthenticationAcquireClientAuthorizationRequestBankAccount bankAccount) {
    
    
    
    this.bankAccount = bankAccount;
  }


  public AuthenticationAcquireClientAuthorizationRequest customer(SaleCreateTransactionRequestCustomer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SaleCreateTransactionRequestCustomer getCustomer() {
    return customer;
  }


  public void setCustomer(SaleCreateTransactionRequestCustomer customer) {
    
    
    
    this.customer = customer;
  }


  public AuthenticationAcquireClientAuthorizationRequest enhancedData(SaleCreateTransactionRequestEnhancedData enhancedData) {
    
    
    
    
    this.enhancedData = enhancedData;
    return this;
  }

   /**
   * Get enhancedData
   * @return enhancedData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SaleCreateTransactionRequestEnhancedData getEnhancedData() {
    return enhancedData;
  }


  public void setEnhancedData(SaleCreateTransactionRequestEnhancedData enhancedData) {
    
    
    
    this.enhancedData = enhancedData;
  }


  public AuthenticationAcquireClientAuthorizationRequest associationID(String associationID) {
    
    
    
    
    this.associationID = associationID;
    return this;
  }

   /**
   * Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting.
   * @return associationID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Utilize the Association ID field to tie a virtual card to a sale or sales. For example, if you have several sales and one virtual card payment to a supplier, you can add association ID to the sales and the virtual card for downstream reporting.")

  public String getAssociationID() {
    return associationID;
  }


  public void setAssociationID(String associationID) {
    
    
    
    this.associationID = associationID;
  }


  public AuthenticationAcquireClientAuthorizationRequest browserData(AuthenticationAcquireClientAuthorizationRequestBrowserData browserData) {
    
    
    
    
    this.browserData = browserData;
    return this;
  }

   /**
   * Get browserData
   * @return browserData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AuthenticationAcquireClientAuthorizationRequestBrowserData getBrowserData() {
    return browserData;
  }


  public void setBrowserData(AuthenticationAcquireClientAuthorizationRequestBrowserData browserData) {
    
    
    
    this.browserData = browserData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AuthenticationAcquireClientAuthorizationRequest instance itself
   */
  public AuthenticationAcquireClientAuthorizationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationAcquireClientAuthorizationRequest authenticationAcquireClientAuthorizationRequest = (AuthenticationAcquireClientAuthorizationRequest) o;
    return Objects.equals(this.deviceGuid, authenticationAcquireClientAuthorizationRequest.deviceGuid) &&
        Objects.equals(this.amount, authenticationAcquireClientAuthorizationRequest.amount) &&
        Objects.equals(this.sequenceNumber, authenticationAcquireClientAuthorizationRequest.sequenceNumber) &&
        Objects.equals(this.orderNumber, authenticationAcquireClientAuthorizationRequest.orderNumber) &&
        Objects.equals(this.sendReceipt, authenticationAcquireClientAuthorizationRequest.sendReceipt) &&
        Objects.equals(this.statementDescription, authenticationAcquireClientAuthorizationRequest.statementDescription) &&
        Objects.equals(this.customerID, authenticationAcquireClientAuthorizationRequest.customerID) &&
        Objects.equals(this.riskData, authenticationAcquireClientAuthorizationRequest.riskData) &&
        Objects.equals(this.card, authenticationAcquireClientAuthorizationRequest.card) &&
        Objects.equals(this.bankAccount, authenticationAcquireClientAuthorizationRequest.bankAccount) &&
        Objects.equals(this.customer, authenticationAcquireClientAuthorizationRequest.customer) &&
        Objects.equals(this.enhancedData, authenticationAcquireClientAuthorizationRequest.enhancedData) &&
        Objects.equals(this.associationID, authenticationAcquireClientAuthorizationRequest.associationID) &&
        Objects.equals(this.browserData, authenticationAcquireClientAuthorizationRequest.browserData)&&
        Objects.equals(this.additionalProperties, authenticationAcquireClientAuthorizationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceGuid, amount, sequenceNumber, orderNumber, sendReceipt, statementDescription, customerID, riskData, card, bankAccount, customer, enhancedData, associationID, browserData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationAcquireClientAuthorizationRequest {\n");
    sb.append("    deviceGuid: ").append(toIndentedString(deviceGuid)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    sendReceipt: ").append(toIndentedString(sendReceipt)).append("\n");
    sb.append("    statementDescription: ").append(toIndentedString(statementDescription)).append("\n");
    sb.append("    customerID: ").append(toIndentedString(customerID)).append("\n");
    sb.append("    riskData: ").append(toIndentedString(riskData)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    enhancedData: ").append(toIndentedString(enhancedData)).append("\n");
    sb.append("    associationID: ").append(toIndentedString(associationID)).append("\n");
    sb.append("    browserData: ").append(toIndentedString(browserData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceGuid");
    openapiFields.add("Amount");
    openapiFields.add("SequenceNumber");
    openapiFields.add("OrderNumber");
    openapiFields.add("SendReceipt");
    openapiFields.add("StatementDescription");
    openapiFields.add("CustomerID");
    openapiFields.add("RiskData");
    openapiFields.add("Card");
    openapiFields.add("BankAccount");
    openapiFields.add("Customer");
    openapiFields.add("EnhancedData");
    openapiFields.add("AssociationID");
    openapiFields.add("BrowserData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeviceGuid");
    openapiRequiredFields.add("Amount");
    openapiRequiredFields.add("RiskData");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AuthenticationAcquireClientAuthorizationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AuthenticationAcquireClientAuthorizationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticationAcquireClientAuthorizationRequest is not found in the empty JSON string", AuthenticationAcquireClientAuthorizationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthenticationAcquireClientAuthorizationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("DeviceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceGuid").toString()));
      }
      if ((jsonObj.get("SequenceNumber") != null && !jsonObj.get("SequenceNumber").isJsonNull()) && !jsonObj.get("SequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SequenceNumber").toString()));
      }
      if ((jsonObj.get("OrderNumber") != null && !jsonObj.get("OrderNumber").isJsonNull()) && !jsonObj.get("OrderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderNumber").toString()));
      }
      if ((jsonObj.get("StatementDescription") != null && !jsonObj.get("StatementDescription").isJsonNull()) && !jsonObj.get("StatementDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatementDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatementDescription").toString()));
      }
      if ((jsonObj.get("CustomerID") != null && !jsonObj.get("CustomerID").isJsonNull()) && !jsonObj.get("CustomerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerID").toString()));
      }
      // validate the required field `RiskData`
      AuthenticationAcquireClientAuthorizationRequestRiskData.validateJsonObject(jsonObj.getAsJsonObject("RiskData"));
      // validate the optional field `Card`
      if (jsonObj.get("Card") != null && !jsonObj.get("Card").isJsonNull()) {
        AuthenticationAcquireClientAuthorizationRequestCard.validateJsonObject(jsonObj.getAsJsonObject("Card"));
      }
      // validate the optional field `BankAccount`
      if (jsonObj.get("BankAccount") != null && !jsonObj.get("BankAccount").isJsonNull()) {
        AuthenticationAcquireClientAuthorizationRequestBankAccount.validateJsonObject(jsonObj.getAsJsonObject("BankAccount"));
      }
      // validate the optional field `Customer`
      if (jsonObj.get("Customer") != null && !jsonObj.get("Customer").isJsonNull()) {
        SaleCreateTransactionRequestCustomer.validateJsonObject(jsonObj.getAsJsonObject("Customer"));
      }
      // validate the optional field `EnhancedData`
      if (jsonObj.get("EnhancedData") != null && !jsonObj.get("EnhancedData").isJsonNull()) {
        SaleCreateTransactionRequestEnhancedData.validateJsonObject(jsonObj.getAsJsonObject("EnhancedData"));
      }
      if ((jsonObj.get("AssociationID") != null && !jsonObj.get("AssociationID").isJsonNull()) && !jsonObj.get("AssociationID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssociationID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssociationID").toString()));
      }
      // validate the optional field `BrowserData`
      if (jsonObj.get("BrowserData") != null && !jsonObj.get("BrowserData").isJsonNull()) {
        AuthenticationAcquireClientAuthorizationRequestBrowserData.validateJsonObject(jsonObj.getAsJsonObject("BrowserData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticationAcquireClientAuthorizationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticationAcquireClientAuthorizationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticationAcquireClientAuthorizationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticationAcquireClientAuthorizationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticationAcquireClientAuthorizationRequest>() {
           @Override
           public void write(JsonWriter out, AuthenticationAcquireClientAuthorizationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticationAcquireClientAuthorizationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AuthenticationAcquireClientAuthorizationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthenticationAcquireClientAuthorizationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthenticationAcquireClientAuthorizationRequest
  * @throws IOException if the JSON string is invalid with respect to AuthenticationAcquireClientAuthorizationRequest
  */
  public static AuthenticationAcquireClientAuthorizationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticationAcquireClientAuthorizationRequest.class);
  }

 /**
  * Convert an instance of AuthenticationAcquireClientAuthorizationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

