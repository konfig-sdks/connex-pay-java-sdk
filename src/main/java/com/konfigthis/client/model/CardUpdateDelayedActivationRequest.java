/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CardUpdateDelayedActivationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CardUpdateDelayedActivationRequest {
  public static final String SERIALIZED_NAME_MERCHANT_GUID = "MerchantGuid";
  @SerializedName(SERIALIZED_NAME_MERCHANT_GUID)
  private String merchantGuid;

  public static final String SERIALIZED_NAME_ACTIVATION_DATE = "ActivationDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_DATE)
  private LocalDate activationDate;

  public static final String SERIALIZED_NAME_AMOUNT_LIMIT = "AmountLimit";
  @SerializedName(SERIALIZED_NAME_AMOUNT_LIMIT)
  private Float amountLimit;

  public static final String SERIALIZED_NAME_TERMINATE_DATE = "TerminateDate";
  @SerializedName(SERIALIZED_NAME_TERMINATE_DATE)
  private LocalDate terminateDate;

  public CardUpdateDelayedActivationRequest() {
  }

  public CardUpdateDelayedActivationRequest merchantGuid(String merchantGuid) {
    
    
    
    
    this.merchantGuid = merchantGuid;
    return this;
  }

   /**
   * Merchant&#39;s guid. Application level value that indicates a virtual card is being requested for clients account. Value provided by ConnexPay.
   * @return merchantGuid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Merchant's guid. Application level value that indicates a virtual card is being requested for clients account. Value provided by ConnexPay.")

  public String getMerchantGuid() {
    return merchantGuid;
  }


  public void setMerchantGuid(String merchantGuid) {
    
    
    
    this.merchantGuid = merchantGuid;
  }


  public CardUpdateDelayedActivationRequest activationDate(LocalDate activationDate) {
    
    
    
    
    this.activationDate = activationDate;
    return this;
  }

   /**
   * Provide a future date, up to 600 days, if you wish to update the virtual card&#39;s activation date. Otherwise leave blank.
   * @return activationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provide a future date, up to 600 days, if you wish to update the virtual card's activation date. Otherwise leave blank.")

  public LocalDate getActivationDate() {
    return activationDate;
  }


  public void setActivationDate(LocalDate activationDate) {
    
    
    
    this.activationDate = activationDate;
  }


  public CardUpdateDelayedActivationRequest amountLimit(Float amountLimit) {
    
    
    
    
    this.amountLimit = amountLimit;
    return this;
  }

   /**
   * Provide a card amount if you wish to update the amount limit for the virtual card, otherwise leave blank.
   * @return amountLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provide a card amount if you wish to update the amount limit for the virtual card, otherwise leave blank.")

  public Float getAmountLimit() {
    return amountLimit;
  }


  public void setAmountLimit(Float amountLimit) {
    
    
    
    this.amountLimit = amountLimit;
  }


  public CardUpdateDelayedActivationRequest terminateDate(LocalDate terminateDate) {
    
    
    
    
    this.terminateDate = terminateDate;
    return this;
  }

   /**
   * The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  ExpirationDate is the month and year that will be applied to the actual VCC. The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed. Note, Returns can still be processed on terminated VCCs.
   * @return terminateDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  ExpirationDate is the month and year that will be applied to the actual VCC. The recommendation is to set the ExpirationDate one or two years in the future and set the TerminateDate just a day or two after the VCC is expected to be processed. Note, Returns can still be processed on terminated VCCs.")

  public LocalDate getTerminateDate() {
    return terminateDate;
  }


  public void setTerminateDate(LocalDate terminateDate) {
    
    
    
    this.terminateDate = terminateDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CardUpdateDelayedActivationRequest instance itself
   */
  public CardUpdateDelayedActivationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardUpdateDelayedActivationRequest cardUpdateDelayedActivationRequest = (CardUpdateDelayedActivationRequest) o;
    return Objects.equals(this.merchantGuid, cardUpdateDelayedActivationRequest.merchantGuid) &&
        Objects.equals(this.activationDate, cardUpdateDelayedActivationRequest.activationDate) &&
        Objects.equals(this.amountLimit, cardUpdateDelayedActivationRequest.amountLimit) &&
        Objects.equals(this.terminateDate, cardUpdateDelayedActivationRequest.terminateDate)&&
        Objects.equals(this.additionalProperties, cardUpdateDelayedActivationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantGuid, activationDate, amountLimit, terminateDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardUpdateDelayedActivationRequest {\n");
    sb.append("    merchantGuid: ").append(toIndentedString(merchantGuid)).append("\n");
    sb.append("    activationDate: ").append(toIndentedString(activationDate)).append("\n");
    sb.append("    amountLimit: ").append(toIndentedString(amountLimit)).append("\n");
    sb.append("    terminateDate: ").append(toIndentedString(terminateDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MerchantGuid");
    openapiFields.add("ActivationDate");
    openapiFields.add("AmountLimit");
    openapiFields.add("TerminateDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MerchantGuid");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CardUpdateDelayedActivationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CardUpdateDelayedActivationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardUpdateDelayedActivationRequest is not found in the empty JSON string", CardUpdateDelayedActivationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardUpdateDelayedActivationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("MerchantGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantGuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardUpdateDelayedActivationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardUpdateDelayedActivationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardUpdateDelayedActivationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardUpdateDelayedActivationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CardUpdateDelayedActivationRequest>() {
           @Override
           public void write(JsonWriter out, CardUpdateDelayedActivationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CardUpdateDelayedActivationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CardUpdateDelayedActivationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardUpdateDelayedActivationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardUpdateDelayedActivationRequest
  * @throws IOException if the JSON string is invalid with respect to CardUpdateDelayedActivationRequest
  */
  public static CardUpdateDelayedActivationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardUpdateDelayedActivationRequest.class);
  }

 /**
  * Convert an instance of CardUpdateDelayedActivationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

