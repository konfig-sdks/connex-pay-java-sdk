/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CardResendTransmissionInfoRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CardResendTransmissionInfoRequest {
  public static final String SERIALIZED_NAME_TRANSMISSION_METHODS = "TransmissionMethods";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_METHODS)
  private List<String> transmissionMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL_RECIPIENT = "EmailRecipient";
  @SerializedName(SERIALIZED_NAME_EMAIL_RECIPIENT)
  private String emailRecipient;

  public static final String SERIALIZED_NAME_MERCHANT_PHONE_NUMBER = "MerchantPhoneNumber";
  @SerializedName(SERIALIZED_NAME_MERCHANT_PHONE_NUMBER)
  private String merchantPhoneNumber;

  public static final String SERIALIZED_NAME_EMAIL_FROM = "EmailFrom";
  @SerializedName(SERIALIZED_NAME_EMAIL_FROM)
  private String emailFrom;

  public static final String SERIALIZED_NAME_RECIPIENT_NAME = "RecipientName";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NAME)
  private String recipientName;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_DAYS_TO_EXPIRE = "DaysToExpire";
  @SerializedName(SERIALIZED_NAME_DAYS_TO_EXPIRE)
  private Integer daysToExpire;

  public static final String SERIALIZED_NAME_FAX_FROM = "FaxFrom";
  @SerializedName(SERIALIZED_NAME_FAX_FROM)
  private String faxFrom;

  public static final String SERIALIZED_NAME_FAX_RECIPIENT = "FaxRecipient";
  @SerializedName(SERIALIZED_NAME_FAX_RECIPIENT)
  private String faxRecipient;

  public CardResendTransmissionInfoRequest() {
  }

  public CardResendTransmissionInfoRequest transmissionMethods(List<String> transmissionMethods) {
    
    
    
    
    this.transmissionMethods = transmissionMethods;
    return this;
  }

  public CardResendTransmissionInfoRequest addTransmissionMethodsItem(String transmissionMethodsItem) {
    this.transmissionMethods.add(transmissionMethodsItem);
    return this;
  }

   /**
   * Methods of Transmission. Supported methods: Email, Link, Fax. Populate this parameter as &#39;Email&#39; if you want to email the virtual card to a customer or supplier. Use the &#39;Link&#39; option to have a URL included in the response.  Use the \&quot;Fax\&quot; option to fax the virtual card to a customer or supplier.
   * @return transmissionMethods
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Methods of Transmission. Supported methods: Email, Link, Fax. Populate this parameter as 'Email' if you want to email the virtual card to a customer or supplier. Use the 'Link' option to have a URL included in the response.  Use the \"Fax\" option to fax the virtual card to a customer or supplier.")

  public List<String> getTransmissionMethods() {
    return transmissionMethods;
  }


  public void setTransmissionMethods(List<String> transmissionMethods) {
    
    
    
    this.transmissionMethods = transmissionMethods;
  }


  public CardResendTransmissionInfoRequest emailRecipient(String emailRecipient) {
    
    
    
    
    this.emailRecipient = emailRecipient;
    return this;
  }

   /**
   * Mandatory when transmission is Email. Otherwise don&#39;t include. This is the email address of the intended recipient. 255 char max.
   * @return emailRecipient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mandatory when transmission is Email. Otherwise don't include. This is the email address of the intended recipient. 255 char max.")

  public String getEmailRecipient() {
    return emailRecipient;
  }


  public void setEmailRecipient(String emailRecipient) {
    
    
    
    this.emailRecipient = emailRecipient;
  }


  public CardResendTransmissionInfoRequest merchantPhoneNumber(String merchantPhoneNumber) {
    
    
    
    
    this.merchantPhoneNumber = merchantPhoneNumber;
    return this;
  }

   /**
   * This is the phone number that should display on the virtual card and is the number that should be used if the link has expired. Up to 15 characters. Numbers and plus sign (+) allowed only.
   * @return merchantPhoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is the phone number that should display on the virtual card and is the number that should be used if the link has expired. Up to 15 characters. Numbers and plus sign (+) allowed only.")

  public String getMerchantPhoneNumber() {
    return merchantPhoneNumber;
  }


  public void setMerchantPhoneNumber(String merchantPhoneNumber) {
    
    
    
    this.merchantPhoneNumber = merchantPhoneNumber;
  }


  public CardResendTransmissionInfoRequest emailFrom(String emailFrom) {
    
    
    
    
    this.emailFrom = emailFrom;
    return this;
  }

   /**
   * For email transmissions, this will be the email address that populates the ‘reply to’ section of the email message. Do not include this parameter on other transmission method types. 255 char max.
   * @return emailFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For email transmissions, this will be the email address that populates the ‘reply to’ section of the email message. Do not include this parameter on other transmission method types. 255 char max.")

  public String getEmailFrom() {
    return emailFrom;
  }


  public void setEmailFrom(String emailFrom) {
    
    
    
    this.emailFrom = emailFrom;
  }


  public CardResendTransmissionInfoRequest recipientName(String recipientName) {
    
    
    
    
    this.recipientName = recipientName;
    return this;
  }

   /**
   * A descriptive name of the email or fax recipient. Does not apply to the Link transmission method type. 255 char max
   * @return recipientName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A descriptive name of the email or fax recipient. Does not apply to the Link transmission method type. 255 char max")

  public String getRecipientName() {
    return recipientName;
  }


  public void setRecipientName(String recipientName) {
    
    
    
    this.recipientName = recipientName;
  }


  public CardResendTransmissionInfoRequest subject(String subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * High-level subject line description of the transmission contents. Does not apply to the Link transmission method type. 255 char max.
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "High-level subject line description of the transmission contents. Does not apply to the Link transmission method type. 255 char max.")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    
    
    
    this.subject = subject;
  }


  public CardResendTransmissionInfoRequest message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * The message body of the email or fax. Does not apply to the Link transmission method type. 1024 char max.
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The message body of the email or fax. Does not apply to the Link transmission method type. 1024 char max.")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public CardResendTransmissionInfoRequest daysToExpire(Integer daysToExpire) {
    
    
    
    
    this.daysToExpire = daysToExpire;
    return this;
  }

   /**
   * The number of days after card issuance until the link to the VC expires. Range: 1-999 days.
   * @return daysToExpire
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of days after card issuance until the link to the VC expires. Range: 1-999 days.")

  public Integer getDaysToExpire() {
    return daysToExpire;
  }


  public void setDaysToExpire(Integer daysToExpire) {
    
    
    
    this.daysToExpire = daysToExpire;
  }


  public CardResendTransmissionInfoRequest faxFrom(String faxFrom) {
    
    
    
    
    this.faxFrom = faxFrom;
    return this;
  }

   /**
   * Mandatory for fax transmission. This can be the client name or fax number the fax is coming from that populates the ‘FaxFrom’ section of the fax. 255 char max.
   * @return faxFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mandatory for fax transmission. This can be the client name or fax number the fax is coming from that populates the ‘FaxFrom’ section of the fax. 255 char max.")

  public String getFaxFrom() {
    return faxFrom;
  }


  public void setFaxFrom(String faxFrom) {
    
    
    
    this.faxFrom = faxFrom;
  }


  public CardResendTransmissionInfoRequest faxRecipient(String faxRecipient) {
    
    
    
    
    this.faxRecipient = faxRecipient;
    return this;
  }

   /**
   * Mandatory for fax transmissions.  The fax number of the intended recipient.
   * @return faxRecipient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mandatory for fax transmissions.  The fax number of the intended recipient.")

  public String getFaxRecipient() {
    return faxRecipient;
  }


  public void setFaxRecipient(String faxRecipient) {
    
    
    
    this.faxRecipient = faxRecipient;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CardResendTransmissionInfoRequest instance itself
   */
  public CardResendTransmissionInfoRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardResendTransmissionInfoRequest cardResendTransmissionInfoRequest = (CardResendTransmissionInfoRequest) o;
    return Objects.equals(this.transmissionMethods, cardResendTransmissionInfoRequest.transmissionMethods) &&
        Objects.equals(this.emailRecipient, cardResendTransmissionInfoRequest.emailRecipient) &&
        Objects.equals(this.merchantPhoneNumber, cardResendTransmissionInfoRequest.merchantPhoneNumber) &&
        Objects.equals(this.emailFrom, cardResendTransmissionInfoRequest.emailFrom) &&
        Objects.equals(this.recipientName, cardResendTransmissionInfoRequest.recipientName) &&
        Objects.equals(this.subject, cardResendTransmissionInfoRequest.subject) &&
        Objects.equals(this.message, cardResendTransmissionInfoRequest.message) &&
        Objects.equals(this.daysToExpire, cardResendTransmissionInfoRequest.daysToExpire) &&
        Objects.equals(this.faxFrom, cardResendTransmissionInfoRequest.faxFrom) &&
        Objects.equals(this.faxRecipient, cardResendTransmissionInfoRequest.faxRecipient)&&
        Objects.equals(this.additionalProperties, cardResendTransmissionInfoRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transmissionMethods, emailRecipient, merchantPhoneNumber, emailFrom, recipientName, subject, message, daysToExpire, faxFrom, faxRecipient, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardResendTransmissionInfoRequest {\n");
    sb.append("    transmissionMethods: ").append(toIndentedString(transmissionMethods)).append("\n");
    sb.append("    emailRecipient: ").append(toIndentedString(emailRecipient)).append("\n");
    sb.append("    merchantPhoneNumber: ").append(toIndentedString(merchantPhoneNumber)).append("\n");
    sb.append("    emailFrom: ").append(toIndentedString(emailFrom)).append("\n");
    sb.append("    recipientName: ").append(toIndentedString(recipientName)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    daysToExpire: ").append(toIndentedString(daysToExpire)).append("\n");
    sb.append("    faxFrom: ").append(toIndentedString(faxFrom)).append("\n");
    sb.append("    faxRecipient: ").append(toIndentedString(faxRecipient)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TransmissionMethods");
    openapiFields.add("EmailRecipient");
    openapiFields.add("MerchantPhoneNumber");
    openapiFields.add("EmailFrom");
    openapiFields.add("RecipientName");
    openapiFields.add("Subject");
    openapiFields.add("Message");
    openapiFields.add("DaysToExpire");
    openapiFields.add("FaxFrom");
    openapiFields.add("FaxRecipient");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TransmissionMethods");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CardResendTransmissionInfoRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CardResendTransmissionInfoRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardResendTransmissionInfoRequest is not found in the empty JSON string", CardResendTransmissionInfoRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardResendTransmissionInfoRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("TransmissionMethods") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("TransmissionMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransmissionMethods` to be an array in the JSON string but got `%s`", jsonObj.get("TransmissionMethods").toString()));
      }
      if ((jsonObj.get("EmailRecipient") != null && !jsonObj.get("EmailRecipient").isJsonNull()) && !jsonObj.get("EmailRecipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailRecipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailRecipient").toString()));
      }
      if ((jsonObj.get("MerchantPhoneNumber") != null && !jsonObj.get("MerchantPhoneNumber").isJsonNull()) && !jsonObj.get("MerchantPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantPhoneNumber").toString()));
      }
      if ((jsonObj.get("EmailFrom") != null && !jsonObj.get("EmailFrom").isJsonNull()) && !jsonObj.get("EmailFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailFrom").toString()));
      }
      if ((jsonObj.get("RecipientName") != null && !jsonObj.get("RecipientName").isJsonNull()) && !jsonObj.get("RecipientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RecipientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RecipientName").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) && !jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      if ((jsonObj.get("FaxFrom") != null && !jsonObj.get("FaxFrom").isJsonNull()) && !jsonObj.get("FaxFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FaxFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FaxFrom").toString()));
      }
      if ((jsonObj.get("FaxRecipient") != null && !jsonObj.get("FaxRecipient").isJsonNull()) && !jsonObj.get("FaxRecipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FaxRecipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FaxRecipient").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardResendTransmissionInfoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardResendTransmissionInfoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardResendTransmissionInfoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardResendTransmissionInfoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CardResendTransmissionInfoRequest>() {
           @Override
           public void write(JsonWriter out, CardResendTransmissionInfoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CardResendTransmissionInfoRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CardResendTransmissionInfoRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardResendTransmissionInfoRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardResendTransmissionInfoRequest
  * @throws IOException if the JSON string is invalid with respect to CardResendTransmissionInfoRequest
  */
  public static CardResendTransmissionInfoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardResendTransmissionInfoRequest.class);
  }

 /**
  * Convert an instance of CardResendTransmissionInfoRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

