/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DtoPayments
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DtoPayments {
  public static final String SERIALIZED_NAME_PAYMENT_GUID = "paymentGuid";
  @SerializedName(SERIALIZED_NAME_PAYMENT_GUID)
  private UUID paymentGuid;

  public static final String SERIALIZED_NAME_PAYMENT_REFERENCE_TOKEN = "paymentReferenceToken";
  @SerializedName(SERIALIZED_NAME_PAYMENT_REFERENCE_TOKEN)
  private String paymentReferenceToken;

  public static final String SERIALIZED_NAME_PAYEE_REFERENCE_TOKEN = "payeeReferenceToken";
  @SerializedName(SERIALIZED_NAME_PAYEE_REFERENCE_TOKEN)
  private String payeeReferenceToken;

  public static final String SERIALIZED_NAME_RID_REFERENCE_TOKEN = "ridReferenceToken";
  @SerializedName(SERIALIZED_NAME_RID_REFERENCE_TOKEN)
  private String ridReferenceToken;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Double value;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_FIELD2 = "field2";
  @SerializedName(SERIALIZED_NAME_FIELD2)
  private String field2;

  public static final String SERIALIZED_NAME_FIELD3 = "field3";
  @SerializedName(SERIALIZED_NAME_FIELD3)
  private String field3;

  public static final String SERIALIZED_NAME_FIELD4 = "field4";
  @SerializedName(SERIALIZED_NAME_FIELD4)
  private String field4;

  public static final String SERIALIZED_NAME_FIELD5 = "field5";
  @SerializedName(SERIALIZED_NAME_FIELD5)
  private String field5;

  public static final String SERIALIZED_NAME_TERMINATION_DATE = "terminationDate";
  @SerializedName(SERIALIZED_NAME_TERMINATION_DATE)
  private String terminationDate;

  public static final String SERIALIZED_NAME_PAYEE_NAME = "payeeName";
  @SerializedName(SERIALIZED_NAME_PAYEE_NAME)
  private String payeeName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_LAST_FOUR = "lastFour";
  @SerializedName(SERIALIZED_NAME_LAST_FOUR)
  private String lastFour;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public DtoPayments() {
  }

  public DtoPayments paymentGuid(UUID paymentGuid) {
    
    
    
    
    this.paymentGuid = paymentGuid;
    return this;
  }

   /**
   * Get paymentGuid
   * @return paymentGuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getPaymentGuid() {
    return paymentGuid;
  }


  public void setPaymentGuid(UUID paymentGuid) {
    
    
    
    this.paymentGuid = paymentGuid;
  }


  public DtoPayments paymentReferenceToken(String paymentReferenceToken) {
    
    
    
    
    this.paymentReferenceToken = paymentReferenceToken;
    return this;
  }

   /**
   * Identifier needed by ConnexPay support teams to research Payment issues.
   * @return paymentReferenceToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier needed by ConnexPay support teams to research Payment issues.")

  public String getPaymentReferenceToken() {
    return paymentReferenceToken;
  }


  public void setPaymentReferenceToken(String paymentReferenceToken) {
    
    
    
    this.paymentReferenceToken = paymentReferenceToken;
  }


  public DtoPayments payeeReferenceToken(String payeeReferenceToken) {
    
    
    
    
    this.payeeReferenceToken = payeeReferenceToken;
    return this;
  }

   /**
   * Payee identifier needed by ConnexPay support teams to research Payee issues.
   * @return payeeReferenceToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payee identifier needed by ConnexPay support teams to research Payee issues.")

  public String getPayeeReferenceToken() {
    return payeeReferenceToken;
  }


  public void setPayeeReferenceToken(String payeeReferenceToken) {
    
    
    
    this.payeeReferenceToken = payeeReferenceToken;
  }


  public DtoPayments ridReferenceToken(String ridReferenceToken) {
    
    
    
    
    this.ridReferenceToken = ridReferenceToken;
    return this;
  }

   /**
   * For Payment Widget customers only. Identifier needed by ConnexPay support teams to research issues related to the Payment Widget.
   * @return ridReferenceToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For Payment Widget customers only. Identifier needed by ConnexPay support teams to research issues related to the Payment Widget.")

  public String getRidReferenceToken() {
    return ridReferenceToken;
  }


  public void setRidReferenceToken(String ridReferenceToken) {
    
    
    
    this.ridReferenceToken = ridReferenceToken;
  }


  public DtoPayments memo(String memo) {
    
    
    
    
    this.memo = memo;
    return this;
  }

   /**
   * Payment-level description highlighting the reason for this Payment.
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment-level description highlighting the reason for this Payment.")

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    
    
    
    this.memo = memo;
  }


  public DtoPayments value(Double value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * Amount of the Payment.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount of the Payment.")

  public Double getValue() {
    return value;
  }


  public void setValue(Double value) {
    
    
    
    this.value = value;
  }


  public DtoPayments status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of the Payment.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the Payment.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public DtoPayments field2(String field2) {
    
    
    
    
    this.field2 = field2;
    return this;
  }

   /**
   * Additional data field that can be used to provide additional data to the Payee and for your reporting purposes.
   * @return field2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional data field that can be used to provide additional data to the Payee and for your reporting purposes.")

  public String getField2() {
    return field2;
  }


  public void setField2(String field2) {
    
    
    
    this.field2 = field2;
  }


  public DtoPayments field3(String field3) {
    
    
    
    
    this.field3 = field3;
    return this;
  }

   /**
   * Additional data field that can be used to provide additional data to the Payee and for your reporting purposes.
   * @return field3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional data field that can be used to provide additional data to the Payee and for your reporting purposes.")

  public String getField3() {
    return field3;
  }


  public void setField3(String field3) {
    
    
    
    this.field3 = field3;
  }


  public DtoPayments field4(String field4) {
    
    
    
    
    this.field4 = field4;
    return this;
  }

   /**
   * Additional data field that can be used to provide additional data to the Payee and for your reporting purposes.
   * @return field4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional data field that can be used to provide additional data to the Payee and for your reporting purposes.")

  public String getField4() {
    return field4;
  }


  public void setField4(String field4) {
    
    
    
    this.field4 = field4;
  }


  public DtoPayments field5(String field5) {
    
    
    
    
    this.field5 = field5;
    return this;
  }

   /**
   * Additional data field that can be used to provide additional data to the Payee and for your reporting purposes.
   * @return field5
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional data field that can be used to provide additional data to the Payee and for your reporting purposes.")

  public String getField5() {
    return field5;
  }


  public void setField5(String field5) {
    
    
    
    this.field5 = field5;
  }


  public DtoPayments terminationDate(String terminationDate) {
    
    
    
    
    this.terminationDate = terminationDate;
    return this;
  }

   /**
   * Get terminationDate
   * @return terminationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTerminationDate() {
    return terminationDate;
  }


  public void setTerminationDate(String terminationDate) {
    
    
    
    this.terminationDate = terminationDate;
  }


  public DtoPayments payeeName(String payeeName) {
    
    
    
    
    this.payeeName = payeeName;
    return this;
  }

   /**
   * The Payee&#39;s name.
   * @return payeeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Payee's name.")

  public String getPayeeName() {
    return payeeName;
  }


  public void setPayeeName(String payeeName) {
    
    
    
    this.payeeName = payeeName;
  }


  public DtoPayments email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Email address the Payment was sent to for the Payee.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email address the Payment was sent to for the Payee.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public DtoPayments lastFour(String lastFour) {
    
    
    
    
    this.lastFour = lastFour;
    return this;
  }

   /**
   * Last four digits of the Payee&#39;s card number.
   * @return lastFour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last four digits of the Payee's card number.")

  public String getLastFour() {
    return lastFour;
  }


  public void setLastFour(String lastFour) {
    
    
    
    this.lastFour = lastFour;
  }


  public DtoPayments address1(String address1) {
    
    
    
    
    this.address1 = address1;
    return this;
  }

   /**
   * Postal address line 1 of the Payee. Alphanumerics and [,.-&#39;] are allowed.
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal address line 1 of the Payee. Alphanumerics and [,.-'] are allowed.")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    
    this.address1 = address1;
  }


  public DtoPayments address2(String address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * Postal address line 2 of the Payee. Alphanumerics and [,.-&#39;] are allowed.
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal address line 2 of the Payee. Alphanumerics and [,.-'] are allowed.")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    
    this.address2 = address2;
  }


  public DtoPayments city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Postal address city of the Payee.
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal address city of the Payee.")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public DtoPayments state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Postal address state for the Payee.
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal address state for the Payee.")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public DtoPayments zipCode(String zipCode) {
    
    
    
    
    this.zipCode = zipCode;
    return this;
  }

   /**
   * Postal code for the Payee.
   * @return zipCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal code for the Payee.")

  public String getZipCode() {
    return zipCode;
  }


  public void setZipCode(String zipCode) {
    
    
    
    this.zipCode = zipCode;
  }


  public DtoPayments country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Postal address country for the Payee.
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal address country for the Payee.")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public DtoPayments createdBy(String createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    
    
    
    this.createdBy = createdBy;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DtoPayments instance itself
   */
  public DtoPayments putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoPayments dtoPayments = (DtoPayments) o;
    return Objects.equals(this.paymentGuid, dtoPayments.paymentGuid) &&
        Objects.equals(this.paymentReferenceToken, dtoPayments.paymentReferenceToken) &&
        Objects.equals(this.payeeReferenceToken, dtoPayments.payeeReferenceToken) &&
        Objects.equals(this.ridReferenceToken, dtoPayments.ridReferenceToken) &&
        Objects.equals(this.memo, dtoPayments.memo) &&
        Objects.equals(this.value, dtoPayments.value) &&
        Objects.equals(this.status, dtoPayments.status) &&
        Objects.equals(this.field2, dtoPayments.field2) &&
        Objects.equals(this.field3, dtoPayments.field3) &&
        Objects.equals(this.field4, dtoPayments.field4) &&
        Objects.equals(this.field5, dtoPayments.field5) &&
        Objects.equals(this.terminationDate, dtoPayments.terminationDate) &&
        Objects.equals(this.payeeName, dtoPayments.payeeName) &&
        Objects.equals(this.email, dtoPayments.email) &&
        Objects.equals(this.lastFour, dtoPayments.lastFour) &&
        Objects.equals(this.address1, dtoPayments.address1) &&
        Objects.equals(this.address2, dtoPayments.address2) &&
        Objects.equals(this.city, dtoPayments.city) &&
        Objects.equals(this.state, dtoPayments.state) &&
        Objects.equals(this.zipCode, dtoPayments.zipCode) &&
        Objects.equals(this.country, dtoPayments.country) &&
        Objects.equals(this.createdBy, dtoPayments.createdBy)&&
        Objects.equals(this.additionalProperties, dtoPayments.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentGuid, paymentReferenceToken, payeeReferenceToken, ridReferenceToken, memo, value, status, field2, field3, field4, field5, terminationDate, payeeName, email, lastFour, address1, address2, city, state, zipCode, country, createdBy, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoPayments {\n");
    sb.append("    paymentGuid: ").append(toIndentedString(paymentGuid)).append("\n");
    sb.append("    paymentReferenceToken: ").append(toIndentedString(paymentReferenceToken)).append("\n");
    sb.append("    payeeReferenceToken: ").append(toIndentedString(payeeReferenceToken)).append("\n");
    sb.append("    ridReferenceToken: ").append(toIndentedString(ridReferenceToken)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    field2: ").append(toIndentedString(field2)).append("\n");
    sb.append("    field3: ").append(toIndentedString(field3)).append("\n");
    sb.append("    field4: ").append(toIndentedString(field4)).append("\n");
    sb.append("    field5: ").append(toIndentedString(field5)).append("\n");
    sb.append("    terminationDate: ").append(toIndentedString(terminationDate)).append("\n");
    sb.append("    payeeName: ").append(toIndentedString(payeeName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    lastFour: ").append(toIndentedString(lastFour)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("paymentGuid");
    openapiFields.add("paymentReferenceToken");
    openapiFields.add("payeeReferenceToken");
    openapiFields.add("ridReferenceToken");
    openapiFields.add("memo");
    openapiFields.add("value");
    openapiFields.add("status");
    openapiFields.add("field2");
    openapiFields.add("field3");
    openapiFields.add("field4");
    openapiFields.add("field5");
    openapiFields.add("terminationDate");
    openapiFields.add("payeeName");
    openapiFields.add("email");
    openapiFields.add("lastFour");
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("zipCode");
    openapiFields.add("country");
    openapiFields.add("createdBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DtoPayments
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DtoPayments.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoPayments is not found in the empty JSON string", DtoPayments.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("paymentGuid") != null && !jsonObj.get("paymentGuid").isJsonNull()) && !jsonObj.get("paymentGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentGuid").toString()));
      }
      if ((jsonObj.get("paymentReferenceToken") != null && !jsonObj.get("paymentReferenceToken").isJsonNull()) && !jsonObj.get("paymentReferenceToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentReferenceToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentReferenceToken").toString()));
      }
      if ((jsonObj.get("payeeReferenceToken") != null && !jsonObj.get("payeeReferenceToken").isJsonNull()) && !jsonObj.get("payeeReferenceToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payeeReferenceToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payeeReferenceToken").toString()));
      }
      if ((jsonObj.get("ridReferenceToken") != null && !jsonObj.get("ridReferenceToken").isJsonNull()) && !jsonObj.get("ridReferenceToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ridReferenceToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ridReferenceToken").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("field2") != null && !jsonObj.get("field2").isJsonNull()) && !jsonObj.get("field2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field2").toString()));
      }
      if ((jsonObj.get("field3") != null && !jsonObj.get("field3").isJsonNull()) && !jsonObj.get("field3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field3").toString()));
      }
      if ((jsonObj.get("field4") != null && !jsonObj.get("field4").isJsonNull()) && !jsonObj.get("field4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field4").toString()));
      }
      if ((jsonObj.get("field5") != null && !jsonObj.get("field5").isJsonNull()) && !jsonObj.get("field5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field5").toString()));
      }
      if ((jsonObj.get("terminationDate") != null && !jsonObj.get("terminationDate").isJsonNull()) && !jsonObj.get("terminationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminationDate").toString()));
      }
      if ((jsonObj.get("payeeName") != null && !jsonObj.get("payeeName").isJsonNull()) && !jsonObj.get("payeeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payeeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payeeName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("lastFour") != null && !jsonObj.get("lastFour").isJsonNull()) && !jsonObj.get("lastFour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastFour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastFour").toString()));
      }
      if ((jsonObj.get("address1") != null && !jsonObj.get("address1").isJsonNull()) && !jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if ((jsonObj.get("address2") != null && !jsonObj.get("address2").isJsonNull()) && !jsonObj.get("address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address2").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("zipCode") != null && !jsonObj.get("zipCode").isJsonNull()) && !jsonObj.get("zipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoPayments.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoPayments' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoPayments> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoPayments.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoPayments>() {
           @Override
           public void write(JsonWriter out, DtoPayments value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoPayments read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DtoPayments instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DtoPayments given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DtoPayments
  * @throws IOException if the JSON string is invalid with respect to DtoPayments
  */
  public static DtoPayments fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoPayments.class);
  }

 /**
  * Convert an instance of DtoPayments to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

