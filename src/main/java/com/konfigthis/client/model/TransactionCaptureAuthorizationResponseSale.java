/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TransactionCaptureAuthorizationResponseSaleCard;
import com.konfigthis.client.model.TransactionCaptureAuthorizationResponseSaleConnexPayTransaction;
import com.konfigthis.client.model.TransactionCaptureAuthorizationResponseSaleRiskResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TransactionCaptureAuthorizationResponseSale
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TransactionCaptureAuthorizationResponseSale {
  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_BATCH_STATUS = "batchStatus";
  @SerializedName(SERIALIZED_NAME_BATCH_STATUS)
  private String batchStatus;

  public static final String SERIALIZED_NAME_TIME_STAMP = "timeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private String timeStamp;

  public static final String SERIALIZED_NAME_DEVICE_GUID = "deviceGuid";
  @SerializedName(SERIALIZED_NAME_DEVICE_GUID)
  private String deviceGuid;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount = 0;

  public static final String SERIALIZED_NAME_ACTIVATED = "activated";
  @SerializedName(SERIALIZED_NAME_ACTIVATED)
  private Boolean activated = true;

  public static final String SERIALIZED_NAME_TENDER_TYPE = "tenderType";
  @SerializedName(SERIALIZED_NAME_TENDER_TYPE)
  private String tenderType;

  public static final String SERIALIZED_NAME_EFFECTIVE_AMOUNT = "effectiveAmount";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AMOUNT)
  private Integer effectiveAmount = 0;

  public static final String SERIALIZED_NAME_RISK_RESPONSE = "riskResponse";
  @SerializedName(SERIALIZED_NAME_RISK_RESPONSE)
  private TransactionCaptureAuthorizationResponseSaleRiskResponse riskResponse;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_CARD_DATA_SOURCE = "cardDataSource";
  @SerializedName(SERIALIZED_NAME_CARD_DATA_SOURCE)
  private String cardDataSource;

  public static final String SERIALIZED_NAME_CUSTOMER_I_D = "customerID";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_I_D)
  private String customerID;

  public static final String SERIALIZED_NAME_BATCH_GUID = "batchGuid";
  @SerializedName(SERIALIZED_NAME_BATCH_GUID)
  private String batchGuid;

  public static final String SERIALIZED_NAME_CONNEX_PAY_TRANSACTION = "connexPayTransaction";
  @SerializedName(SERIALIZED_NAME_CONNEX_PAY_TRANSACTION)
  private TransactionCaptureAuthorizationResponseSaleConnexPayTransaction connexPayTransaction;

  public static final String SERIALIZED_NAME_PROCESSOR_STATUS_CODE = "processorStatusCode";
  @SerializedName(SERIALIZED_NAME_PROCESSOR_STATUS_CODE)
  private String processorStatusCode;

  public static final String SERIALIZED_NAME_PROCESSOR_RESPONSE_MESSAGE = "processorResponseMessage";
  @SerializedName(SERIALIZED_NAME_PROCESSOR_RESPONSE_MESSAGE)
  private String processorResponseMessage;

  public static final String SERIALIZED_NAME_WAS_PROCESSED = "wasProcessed";
  @SerializedName(SERIALIZED_NAME_WAS_PROCESSED)
  private Boolean wasProcessed = true;

  public static final String SERIALIZED_NAME_AUTH_CODE = "authCode";
  @SerializedName(SERIALIZED_NAME_AUTH_CODE)
  private String authCode;

  public static final String SERIALIZED_NAME_REF_NUMBER = "refNumber";
  @SerializedName(SERIALIZED_NAME_REF_NUMBER)
  private String refNumber;

  public static final String SERIALIZED_NAME_CUSTOMER_RECEIPT = "customerReceipt";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_RECEIPT)
  private String customerReceipt;

  public static final String SERIALIZED_NAME_STATEMENT_DESCRIPTION = "statementDescription";
  @SerializedName(SERIALIZED_NAME_STATEMENT_DESCRIPTION)
  private String statementDescription;

  public static final String SERIALIZED_NAME_GENERATED_BY = "generatedBy";
  @SerializedName(SERIALIZED_NAME_GENERATED_BY)
  private String generatedBy;

  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private TransactionCaptureAuthorizationResponseSaleCard card;

  public static final String SERIALIZED_NAME_ADDRESS_VERIFICATION_CODE = "addressVerificationCode";
  @SerializedName(SERIALIZED_NAME_ADDRESS_VERIFICATION_CODE)
  private String addressVerificationCode;

  public static final String SERIALIZED_NAME_ADDRESS_VERIFICATION_RESULT = "addressVerificationResult";
  @SerializedName(SERIALIZED_NAME_ADDRESS_VERIFICATION_RESULT)
  private String addressVerificationResult;

  public static final String SERIALIZED_NAME_CVV_VERIFICATION_CODE = "cvvVerificationCode";
  @SerializedName(SERIALIZED_NAME_CVV_VERIFICATION_CODE)
  private String cvvVerificationCode;

  public static final String SERIALIZED_NAME_CVV_VERIFICATION_RESULT = "cvvVerificationResult";
  @SerializedName(SERIALIZED_NAME_CVV_VERIFICATION_RESULT)
  private String cvvVerificationResult;

  public TransactionCaptureAuthorizationResponseSale() {
  }

  public TransactionCaptureAuthorizationResponseSale guid(String guid) {
    
    
    
    
    this.guid = guid;
    return this;
  }

   /**
   * Get guid
   * @return guid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "52785a8e-9616-4e1c-b01d-365a99b256b0", value = "")

  public String getGuid() {
    return guid;
  }


  public void setGuid(String guid) {
    
    
    
    this.guid = guid;
  }


  public TransactionCaptureAuthorizationResponseSale status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Transaction - Approved", value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public TransactionCaptureAuthorizationResponseSale type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Default", value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public TransactionCaptureAuthorizationResponseSale batchStatus(String batchStatus) {
    
    
    
    
    this.batchStatus = batchStatus;
    return this;
  }

   /**
   * Get batchStatus
   * @return batchStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Batch - Open", value = "")

  public String getBatchStatus() {
    return batchStatus;
  }


  public void setBatchStatus(String batchStatus) {
    
    
    
    this.batchStatus = batchStatus;
  }


  public TransactionCaptureAuthorizationResponseSale timeStamp(String timeStamp) {
    
    
    
    
    this.timeStamp = timeStamp;
    return this;
  }

   /**
   * Get timeStamp
   * @return timeStamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-07-12T21:58:00.15+06:00", value = "")

  public String getTimeStamp() {
    return timeStamp;
  }


  public void setTimeStamp(String timeStamp) {
    
    
    
    this.timeStamp = timeStamp;
  }


  public TransactionCaptureAuthorizationResponseSale deviceGuid(String deviceGuid) {
    
    
    
    
    this.deviceGuid = deviceGuid;
    return this;
  }

   /**
   * Get deviceGuid
   * @return deviceGuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0b7a9536-9fcd-4074-a841-d47eef77b81b", value = "")

  public String getDeviceGuid() {
    return deviceGuid;
  }


  public void setDeviceGuid(String deviceGuid) {
    
    
    
    this.deviceGuid = deviceGuid;
  }


  public TransactionCaptureAuthorizationResponseSale amount(Integer amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    
    
    
    this.amount = amount;
  }


  public TransactionCaptureAuthorizationResponseSale activated(Boolean activated) {
    
    
    
    
    this.activated = activated;
    return this;
  }

   /**
   * Get activated
   * @return activated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getActivated() {
    return activated;
  }


  public void setActivated(Boolean activated) {
    
    
    
    this.activated = activated;
  }


  public TransactionCaptureAuthorizationResponseSale tenderType(String tenderType) {
    
    
    
    
    this.tenderType = tenderType;
    return this;
  }

   /**
   * Get tenderType
   * @return tenderType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Credit", value = "")

  public String getTenderType() {
    return tenderType;
  }


  public void setTenderType(String tenderType) {
    
    
    
    this.tenderType = tenderType;
  }


  public TransactionCaptureAuthorizationResponseSale effectiveAmount(Integer effectiveAmount) {
    
    
    
    
    this.effectiveAmount = effectiveAmount;
    return this;
  }

   /**
   * Get effectiveAmount
   * @return effectiveAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "")

  public Integer getEffectiveAmount() {
    return effectiveAmount;
  }


  public void setEffectiveAmount(Integer effectiveAmount) {
    
    
    
    this.effectiveAmount = effectiveAmount;
  }


  public TransactionCaptureAuthorizationResponseSale riskResponse(TransactionCaptureAuthorizationResponseSaleRiskResponse riskResponse) {
    
    
    
    
    this.riskResponse = riskResponse;
    return this;
  }

   /**
   * Get riskResponse
   * @return riskResponse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCaptureAuthorizationResponseSaleRiskResponse getRiskResponse() {
    return riskResponse;
  }


  public void setRiskResponse(TransactionCaptureAuthorizationResponseSaleRiskResponse riskResponse) {
    
    
    
    this.riskResponse = riskResponse;
  }


  public TransactionCaptureAuthorizationResponseSale orderNumber(String orderNumber) {
    
    
    
    
    this.orderNumber = orderNumber;
    return this;
  }

   /**
   * Get orderNumber
   * @return orderNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "159874", value = "")

  public String getOrderNumber() {
    return orderNumber;
  }


  public void setOrderNumber(String orderNumber) {
    
    
    
    this.orderNumber = orderNumber;
  }


  public TransactionCaptureAuthorizationResponseSale cardDataSource(String cardDataSource) {
    
    
    
    
    this.cardDataSource = cardDataSource;
    return this;
  }

   /**
   * Get cardDataSource
   * @return cardDataSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INTERNET", value = "")

  public String getCardDataSource() {
    return cardDataSource;
  }


  public void setCardDataSource(String cardDataSource) {
    
    
    
    this.cardDataSource = cardDataSource;
  }


  public TransactionCaptureAuthorizationResponseSale customerID(String customerID) {
    
    
    
    
    this.customerID = customerID;
    return this;
  }

   /**
   * Get customerID
   * @return customerID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "xt147", value = "")

  public String getCustomerID() {
    return customerID;
  }


  public void setCustomerID(String customerID) {
    
    
    
    this.customerID = customerID;
  }


  public TransactionCaptureAuthorizationResponseSale batchGuid(String batchGuid) {
    
    
    
    
    this.batchGuid = batchGuid;
    return this;
  }

   /**
   * Get batchGuid
   * @return batchGuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5a80016c-d96f-4339-8e84-47aaf7aff2fd", value = "")

  public String getBatchGuid() {
    return batchGuid;
  }


  public void setBatchGuid(String batchGuid) {
    
    
    
    this.batchGuid = batchGuid;
  }


  public TransactionCaptureAuthorizationResponseSale connexPayTransaction(TransactionCaptureAuthorizationResponseSaleConnexPayTransaction connexPayTransaction) {
    
    
    
    
    this.connexPayTransaction = connexPayTransaction;
    return this;
  }

   /**
   * Get connexPayTransaction
   * @return connexPayTransaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCaptureAuthorizationResponseSaleConnexPayTransaction getConnexPayTransaction() {
    return connexPayTransaction;
  }


  public void setConnexPayTransaction(TransactionCaptureAuthorizationResponseSaleConnexPayTransaction connexPayTransaction) {
    
    
    
    this.connexPayTransaction = connexPayTransaction;
  }


  public TransactionCaptureAuthorizationResponseSale processorStatusCode(String processorStatusCode) {
    
    
    
    
    this.processorStatusCode = processorStatusCode;
    return this;
  }

   /**
   * Get processorStatusCode
   * @return processorStatusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A0000", value = "")

  public String getProcessorStatusCode() {
    return processorStatusCode;
  }


  public void setProcessorStatusCode(String processorStatusCode) {
    
    
    
    this.processorStatusCode = processorStatusCode;
  }


  public TransactionCaptureAuthorizationResponseSale processorResponseMessage(String processorResponseMessage) {
    
    
    
    
    this.processorResponseMessage = processorResponseMessage;
    return this;
  }

   /**
   * Get processorResponseMessage
   * @return processorResponseMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Success", value = "")

  public String getProcessorResponseMessage() {
    return processorResponseMessage;
  }


  public void setProcessorResponseMessage(String processorResponseMessage) {
    
    
    
    this.processorResponseMessage = processorResponseMessage;
  }


  public TransactionCaptureAuthorizationResponseSale wasProcessed(Boolean wasProcessed) {
    
    
    
    
    this.wasProcessed = wasProcessed;
    return this;
  }

   /**
   * Get wasProcessed
   * @return wasProcessed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getWasProcessed() {
    return wasProcessed;
  }


  public void setWasProcessed(Boolean wasProcessed) {
    
    
    
    this.wasProcessed = wasProcessed;
  }


  public TransactionCaptureAuthorizationResponseSale authCode(String authCode) {
    
    
    
    
    this.authCode = authCode;
    return this;
  }

   /**
   * Get authCode
   * @return authCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "VTLMC1", value = "")

  public String getAuthCode() {
    return authCode;
  }


  public void setAuthCode(String authCode) {
    
    
    
    this.authCode = authCode;
  }


  public TransactionCaptureAuthorizationResponseSale refNumber(String refNumber) {
    
    
    
    
    this.refNumber = refNumber;
    return this;
  }

   /**
   * Get refNumber
   * @return refNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "23181066", value = "")

  public String getRefNumber() {
    return refNumber;
  }


  public void setRefNumber(String refNumber) {
    
    
    
    this.refNumber = refNumber;
  }


  public TransactionCaptureAuthorizationResponseSale customerReceipt(String customerReceipt) {
    
    
    
    
    this.customerReceipt = customerReceipt;
    return this;
  }

   /**
   * Get customerReceipt
   * @return customerReceipt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Agent Booking 123\\n8320 S HARDY DRIVE\\nTEMPE AZ 85284\\n07/12/2020 02:57:57\\n\\nCREDIT - SALE\\n\\nCARD # : **** **** **** 4111\\nCARD TYPE :MASTERCARD\\nEntry Mode : MANUAL\\n\\nTRANSACTION ID : 23181066\\nInvoice number : 159874\\nAUTH CODE : VTLMC1\\nSubtotal:                       $10.00\\n--------------------------------------\\nTotal:                          $10.00\\n--------------------------------------\\n\\n\\n\\nJohn Doe\\n\\nCUSTOMER ACKNOWLEDGES RECEIPT OF\\nGOODS AND/OR SERVICES IN THE AMOUNT\\nOF THE TOTAL SHOWN HEREON AND AGREES\\nTO PERFORM THE OBLIGATIONS SET FORTH\\nBY THE CUSTOMER'S AGREEMENT WITH THE\\nISSUER\\nAPPROVED\\n\\n\\n\\n\\nCustomer Copy\\n", value = "")

  public String getCustomerReceipt() {
    return customerReceipt;
  }


  public void setCustomerReceipt(String customerReceipt) {
    
    
    
    this.customerReceipt = customerReceipt;
  }


  public TransactionCaptureAuthorizationResponseSale statementDescription(String statementDescription) {
    
    
    
    
    this.statementDescription = statementDescription;
    return this;
  }

   /**
   * Get statementDescription
   * @return statementDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Agent Booking 123", value = "")

  public String getStatementDescription() {
    return statementDescription;
  }


  public void setStatementDescription(String statementDescription) {
    
    
    
    this.statementDescription = statementDescription;
  }


  public TransactionCaptureAuthorizationResponseSale generatedBy(String generatedBy) {
    
    
    
    
    this.generatedBy = generatedBy;
    return this;
  }

   /**
   * Get generatedBy
   * @return generatedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "rrmerchant", value = "")

  public String getGeneratedBy() {
    return generatedBy;
  }


  public void setGeneratedBy(String generatedBy) {
    
    
    
    this.generatedBy = generatedBy;
  }


  public TransactionCaptureAuthorizationResponseSale card(TransactionCaptureAuthorizationResponseSaleCard card) {
    
    
    
    
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransactionCaptureAuthorizationResponseSaleCard getCard() {
    return card;
  }


  public void setCard(TransactionCaptureAuthorizationResponseSaleCard card) {
    
    
    
    this.card = card;
  }


  public TransactionCaptureAuthorizationResponseSale addressVerificationCode(String addressVerificationCode) {
    
    
    
    
    this.addressVerificationCode = addressVerificationCode;
    return this;
  }

   /**
   * Get addressVerificationCode
   * @return addressVerificationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "N", value = "")

  public String getAddressVerificationCode() {
    return addressVerificationCode;
  }


  public void setAddressVerificationCode(String addressVerificationCode) {
    
    
    
    this.addressVerificationCode = addressVerificationCode;
  }


  public TransactionCaptureAuthorizationResponseSale addressVerificationResult(String addressVerificationResult) {
    
    
    
    
    this.addressVerificationResult = addressVerificationResult;
    return this;
  }

   /**
   * Get addressVerificationResult
   * @return addressVerificationResult
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "No match. Acquirer sent postal/ZIP code only, or street address only, or both postal/ZIP and street address.", value = "")

  public String getAddressVerificationResult() {
    return addressVerificationResult;
  }


  public void setAddressVerificationResult(String addressVerificationResult) {
    
    
    
    this.addressVerificationResult = addressVerificationResult;
  }


  public TransactionCaptureAuthorizationResponseSale cvvVerificationCode(String cvvVerificationCode) {
    
    
    
    
    this.cvvVerificationCode = cvvVerificationCode;
    return this;
  }

   /**
   * Get cvvVerificationCode
   * @return cvvVerificationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "M", value = "")

  public String getCvvVerificationCode() {
    return cvvVerificationCode;
  }


  public void setCvvVerificationCode(String cvvVerificationCode) {
    
    
    
    this.cvvVerificationCode = cvvVerificationCode;
  }


  public TransactionCaptureAuthorizationResponseSale cvvVerificationResult(String cvvVerificationResult) {
    
    
    
    
    this.cvvVerificationResult = cvvVerificationResult;
    return this;
  }

   /**
   * Get cvvVerificationResult
   * @return cvvVerificationResult
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CVV2 Match. Indicates that the Funds Transfer API or the issuer was able to verify the CVV2 value provided by the merchant.", value = "")

  public String getCvvVerificationResult() {
    return cvvVerificationResult;
  }


  public void setCvvVerificationResult(String cvvVerificationResult) {
    
    
    
    this.cvvVerificationResult = cvvVerificationResult;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TransactionCaptureAuthorizationResponseSale instance itself
   */
  public TransactionCaptureAuthorizationResponseSale putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionCaptureAuthorizationResponseSale transactionCaptureAuthorizationResponseSale = (TransactionCaptureAuthorizationResponseSale) o;
    return Objects.equals(this.guid, transactionCaptureAuthorizationResponseSale.guid) &&
        Objects.equals(this.status, transactionCaptureAuthorizationResponseSale.status) &&
        Objects.equals(this.type, transactionCaptureAuthorizationResponseSale.type) &&
        Objects.equals(this.batchStatus, transactionCaptureAuthorizationResponseSale.batchStatus) &&
        Objects.equals(this.timeStamp, transactionCaptureAuthorizationResponseSale.timeStamp) &&
        Objects.equals(this.deviceGuid, transactionCaptureAuthorizationResponseSale.deviceGuid) &&
        Objects.equals(this.amount, transactionCaptureAuthorizationResponseSale.amount) &&
        Objects.equals(this.activated, transactionCaptureAuthorizationResponseSale.activated) &&
        Objects.equals(this.tenderType, transactionCaptureAuthorizationResponseSale.tenderType) &&
        Objects.equals(this.effectiveAmount, transactionCaptureAuthorizationResponseSale.effectiveAmount) &&
        Objects.equals(this.riskResponse, transactionCaptureAuthorizationResponseSale.riskResponse) &&
        Objects.equals(this.orderNumber, transactionCaptureAuthorizationResponseSale.orderNumber) &&
        Objects.equals(this.cardDataSource, transactionCaptureAuthorizationResponseSale.cardDataSource) &&
        Objects.equals(this.customerID, transactionCaptureAuthorizationResponseSale.customerID) &&
        Objects.equals(this.batchGuid, transactionCaptureAuthorizationResponseSale.batchGuid) &&
        Objects.equals(this.connexPayTransaction, transactionCaptureAuthorizationResponseSale.connexPayTransaction) &&
        Objects.equals(this.processorStatusCode, transactionCaptureAuthorizationResponseSale.processorStatusCode) &&
        Objects.equals(this.processorResponseMessage, transactionCaptureAuthorizationResponseSale.processorResponseMessage) &&
        Objects.equals(this.wasProcessed, transactionCaptureAuthorizationResponseSale.wasProcessed) &&
        Objects.equals(this.authCode, transactionCaptureAuthorizationResponseSale.authCode) &&
        Objects.equals(this.refNumber, transactionCaptureAuthorizationResponseSale.refNumber) &&
        Objects.equals(this.customerReceipt, transactionCaptureAuthorizationResponseSale.customerReceipt) &&
        Objects.equals(this.statementDescription, transactionCaptureAuthorizationResponseSale.statementDescription) &&
        Objects.equals(this.generatedBy, transactionCaptureAuthorizationResponseSale.generatedBy) &&
        Objects.equals(this.card, transactionCaptureAuthorizationResponseSale.card) &&
        Objects.equals(this.addressVerificationCode, transactionCaptureAuthorizationResponseSale.addressVerificationCode) &&
        Objects.equals(this.addressVerificationResult, transactionCaptureAuthorizationResponseSale.addressVerificationResult) &&
        Objects.equals(this.cvvVerificationCode, transactionCaptureAuthorizationResponseSale.cvvVerificationCode) &&
        Objects.equals(this.cvvVerificationResult, transactionCaptureAuthorizationResponseSale.cvvVerificationResult)&&
        Objects.equals(this.additionalProperties, transactionCaptureAuthorizationResponseSale.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guid, status, type, batchStatus, timeStamp, deviceGuid, amount, activated, tenderType, effectiveAmount, riskResponse, orderNumber, cardDataSource, customerID, batchGuid, connexPayTransaction, processorStatusCode, processorResponseMessage, wasProcessed, authCode, refNumber, customerReceipt, statementDescription, generatedBy, card, addressVerificationCode, addressVerificationResult, cvvVerificationCode, cvvVerificationResult, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionCaptureAuthorizationResponseSale {\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    batchStatus: ").append(toIndentedString(batchStatus)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    deviceGuid: ").append(toIndentedString(deviceGuid)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    activated: ").append(toIndentedString(activated)).append("\n");
    sb.append("    tenderType: ").append(toIndentedString(tenderType)).append("\n");
    sb.append("    effectiveAmount: ").append(toIndentedString(effectiveAmount)).append("\n");
    sb.append("    riskResponse: ").append(toIndentedString(riskResponse)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    cardDataSource: ").append(toIndentedString(cardDataSource)).append("\n");
    sb.append("    customerID: ").append(toIndentedString(customerID)).append("\n");
    sb.append("    batchGuid: ").append(toIndentedString(batchGuid)).append("\n");
    sb.append("    connexPayTransaction: ").append(toIndentedString(connexPayTransaction)).append("\n");
    sb.append("    processorStatusCode: ").append(toIndentedString(processorStatusCode)).append("\n");
    sb.append("    processorResponseMessage: ").append(toIndentedString(processorResponseMessage)).append("\n");
    sb.append("    wasProcessed: ").append(toIndentedString(wasProcessed)).append("\n");
    sb.append("    authCode: ").append(toIndentedString(authCode)).append("\n");
    sb.append("    refNumber: ").append(toIndentedString(refNumber)).append("\n");
    sb.append("    customerReceipt: ").append(toIndentedString(customerReceipt)).append("\n");
    sb.append("    statementDescription: ").append(toIndentedString(statementDescription)).append("\n");
    sb.append("    generatedBy: ").append(toIndentedString(generatedBy)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    addressVerificationCode: ").append(toIndentedString(addressVerificationCode)).append("\n");
    sb.append("    addressVerificationResult: ").append(toIndentedString(addressVerificationResult)).append("\n");
    sb.append("    cvvVerificationCode: ").append(toIndentedString(cvvVerificationCode)).append("\n");
    sb.append("    cvvVerificationResult: ").append(toIndentedString(cvvVerificationResult)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guid");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("batchStatus");
    openapiFields.add("timeStamp");
    openapiFields.add("deviceGuid");
    openapiFields.add("amount");
    openapiFields.add("activated");
    openapiFields.add("tenderType");
    openapiFields.add("effectiveAmount");
    openapiFields.add("riskResponse");
    openapiFields.add("orderNumber");
    openapiFields.add("cardDataSource");
    openapiFields.add("customerID");
    openapiFields.add("batchGuid");
    openapiFields.add("connexPayTransaction");
    openapiFields.add("processorStatusCode");
    openapiFields.add("processorResponseMessage");
    openapiFields.add("wasProcessed");
    openapiFields.add("authCode");
    openapiFields.add("refNumber");
    openapiFields.add("customerReceipt");
    openapiFields.add("statementDescription");
    openapiFields.add("generatedBy");
    openapiFields.add("card");
    openapiFields.add("addressVerificationCode");
    openapiFields.add("addressVerificationResult");
    openapiFields.add("cvvVerificationCode");
    openapiFields.add("cvvVerificationResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionCaptureAuthorizationResponseSale
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionCaptureAuthorizationResponseSale.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionCaptureAuthorizationResponseSale is not found in the empty JSON string", TransactionCaptureAuthorizationResponseSale.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("guid") != null && !jsonObj.get("guid").isJsonNull()) && !jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("batchStatus") != null && !jsonObj.get("batchStatus").isJsonNull()) && !jsonObj.get("batchStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchStatus").toString()));
      }
      if ((jsonObj.get("timeStamp") != null && !jsonObj.get("timeStamp").isJsonNull()) && !jsonObj.get("timeStamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeStamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeStamp").toString()));
      }
      if ((jsonObj.get("deviceGuid") != null && !jsonObj.get("deviceGuid").isJsonNull()) && !jsonObj.get("deviceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceGuid").toString()));
      }
      if ((jsonObj.get("tenderType") != null && !jsonObj.get("tenderType").isJsonNull()) && !jsonObj.get("tenderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenderType").toString()));
      }
      // validate the optional field `riskResponse`
      if (jsonObj.get("riskResponse") != null && !jsonObj.get("riskResponse").isJsonNull()) {
        TransactionCaptureAuthorizationResponseSaleRiskResponse.validateJsonObject(jsonObj.getAsJsonObject("riskResponse"));
      }
      if ((jsonObj.get("orderNumber") != null && !jsonObj.get("orderNumber").isJsonNull()) && !jsonObj.get("orderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderNumber").toString()));
      }
      if ((jsonObj.get("cardDataSource") != null && !jsonObj.get("cardDataSource").isJsonNull()) && !jsonObj.get("cardDataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardDataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardDataSource").toString()));
      }
      if ((jsonObj.get("customerID") != null && !jsonObj.get("customerID").isJsonNull()) && !jsonObj.get("customerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerID").toString()));
      }
      if ((jsonObj.get("batchGuid") != null && !jsonObj.get("batchGuid").isJsonNull()) && !jsonObj.get("batchGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchGuid").toString()));
      }
      // validate the optional field `connexPayTransaction`
      if (jsonObj.get("connexPayTransaction") != null && !jsonObj.get("connexPayTransaction").isJsonNull()) {
        TransactionCaptureAuthorizationResponseSaleConnexPayTransaction.validateJsonObject(jsonObj.getAsJsonObject("connexPayTransaction"));
      }
      if ((jsonObj.get("processorStatusCode") != null && !jsonObj.get("processorStatusCode").isJsonNull()) && !jsonObj.get("processorStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processorStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processorStatusCode").toString()));
      }
      if ((jsonObj.get("processorResponseMessage") != null && !jsonObj.get("processorResponseMessage").isJsonNull()) && !jsonObj.get("processorResponseMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processorResponseMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processorResponseMessage").toString()));
      }
      if ((jsonObj.get("authCode") != null && !jsonObj.get("authCode").isJsonNull()) && !jsonObj.get("authCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authCode").toString()));
      }
      if ((jsonObj.get("refNumber") != null && !jsonObj.get("refNumber").isJsonNull()) && !jsonObj.get("refNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refNumber").toString()));
      }
      if ((jsonObj.get("customerReceipt") != null && !jsonObj.get("customerReceipt").isJsonNull()) && !jsonObj.get("customerReceipt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerReceipt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerReceipt").toString()));
      }
      if ((jsonObj.get("statementDescription") != null && !jsonObj.get("statementDescription").isJsonNull()) && !jsonObj.get("statementDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statementDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statementDescription").toString()));
      }
      if ((jsonObj.get("generatedBy") != null && !jsonObj.get("generatedBy").isJsonNull()) && !jsonObj.get("generatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generatedBy").toString()));
      }
      // validate the optional field `card`
      if (jsonObj.get("card") != null && !jsonObj.get("card").isJsonNull()) {
        TransactionCaptureAuthorizationResponseSaleCard.validateJsonObject(jsonObj.getAsJsonObject("card"));
      }
      if ((jsonObj.get("addressVerificationCode") != null && !jsonObj.get("addressVerificationCode").isJsonNull()) && !jsonObj.get("addressVerificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressVerificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressVerificationCode").toString()));
      }
      if ((jsonObj.get("addressVerificationResult") != null && !jsonObj.get("addressVerificationResult").isJsonNull()) && !jsonObj.get("addressVerificationResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressVerificationResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressVerificationResult").toString()));
      }
      if ((jsonObj.get("cvvVerificationCode") != null && !jsonObj.get("cvvVerificationCode").isJsonNull()) && !jsonObj.get("cvvVerificationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvvVerificationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvvVerificationCode").toString()));
      }
      if ((jsonObj.get("cvvVerificationResult") != null && !jsonObj.get("cvvVerificationResult").isJsonNull()) && !jsonObj.get("cvvVerificationResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvvVerificationResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvvVerificationResult").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionCaptureAuthorizationResponseSale.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionCaptureAuthorizationResponseSale' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionCaptureAuthorizationResponseSale> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionCaptureAuthorizationResponseSale.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionCaptureAuthorizationResponseSale>() {
           @Override
           public void write(JsonWriter out, TransactionCaptureAuthorizationResponseSale value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionCaptureAuthorizationResponseSale read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TransactionCaptureAuthorizationResponseSale instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionCaptureAuthorizationResponseSale given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionCaptureAuthorizationResponseSale
  * @throws IOException if the JSON string is invalid with respect to TransactionCaptureAuthorizationResponseSale
  */
  public static TransactionCaptureAuthorizationResponseSale fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionCaptureAuthorizationResponseSale.class);
  }

 /**
  * Convert an instance of TransactionCaptureAuthorizationResponseSale to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

