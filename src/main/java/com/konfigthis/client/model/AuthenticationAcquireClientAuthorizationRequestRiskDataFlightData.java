/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Flight Data
 */
@ApiModel(description = "Flight Data")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData {
  public static final String SERIALIZED_NAME_AIRLINE = "Airline";
  @SerializedName(SERIALIZED_NAME_AIRLINE)
  private String airline = "AA";

  public static final String SERIALIZED_NAME_DEPARTURE_AIRPORT = "DepartureAirport";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_AIRPORT)
  private String departureAirport = "NY";

  public static final String SERIALIZED_NAME_DEPARTURE_DATE = "DepartureDate";
  @SerializedName(SERIALIZED_NAME_DEPARTURE_DATE)
  private String departureDate = "06/20/1993";

  public static final String SERIALIZED_NAME_DESTINATION_AIRPORT = "DestinationAirport";
  @SerializedName(SERIALIZED_NAME_DESTINATION_AIRPORT)
  private String destinationAirport = "CA";

  public static final String SERIALIZED_NAME_HOURS_TO_DEPARTURE = "HoursToDeparture";
  @SerializedName(SERIALIZED_NAME_HOURS_TO_DEPARTURE)
  private String hoursToDeparture = "5";

  public static final String SERIALIZED_NAME_JOURNEY_TYPE = "JourneyType";
  @SerializedName(SERIALIZED_NAME_JOURNEY_TYPE)
  private String journeyType = "Day";

  public static final String SERIALIZED_NAME_ROUTE = "Route";
  @SerializedName(SERIALIZED_NAME_ROUTE)
  private String route = "Direct";

  public static final String SERIALIZED_NAME_ROUTE_BY_COUNTRY = "RouteByCountry";
  @SerializedName(SERIALIZED_NAME_ROUTE_BY_COUNTRY)
  private String routeByCountry = "NY, CA";

  public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData() {
  }

  public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData airline(String airline) {
    
    
    
    
    this.airline = airline;
    return this;
  }

   /**
   * Name of airline; likely carrier code
   * @return airline
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AA", value = "Name of airline; likely carrier code")

  public String getAirline() {
    return airline;
  }


  public void setAirline(String airline) {
    
    
    
    this.airline = airline;
  }


  public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData departureAirport(String departureAirport) {
    
    
    
    
    this.departureAirport = departureAirport;
    return this;
  }

   /**
   * Departure airport code
   * @return departureAirport
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NY", value = "Departure airport code")

  public String getDepartureAirport() {
    return departureAirport;
  }


  public void setDepartureAirport(String departureAirport) {
    
    
    
    this.departureAirport = departureAirport;
  }


  public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData departureDate(String departureDate) {
    
    
    
    
    this.departureDate = departureDate;
    return this;
  }

   /**
   * Departure date of flight. Format: mm/dd/yyyy
   * @return departureDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "06/20/1993", value = "Departure date of flight. Format: mm/dd/yyyy")

  public String getDepartureDate() {
    return departureDate;
  }


  public void setDepartureDate(String departureDate) {
    
    
    
    this.departureDate = departureDate;
  }


  public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData destinationAirport(String destinationAirport) {
    
    
    
    
    this.destinationAirport = destinationAirport;
    return this;
  }

   /**
   * Destination airport code
   * @return destinationAirport
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CA", value = "Destination airport code")

  public String getDestinationAirport() {
    return destinationAirport;
  }


  public void setDestinationAirport(String destinationAirport) {
    
    
    
    this.destinationAirport = destinationAirport;
  }


  public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData hoursToDeparture(String hoursToDeparture) {
    
    
    
    
    this.hoursToDeparture = hoursToDeparture;
    return this;
  }

   /**
   * Time in hours to flight departure
   * @return hoursToDeparture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "Time in hours to flight departure")

  public String getHoursToDeparture() {
    return hoursToDeparture;
  }


  public void setHoursToDeparture(String hoursToDeparture) {
    
    
    
    this.hoursToDeparture = hoursToDeparture;
  }


  public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData journeyType(String journeyType) {
    
    
    
    
    this.journeyType = journeyType;
    return this;
  }

   /**
   * Type of journey i.e. Day/Night journey
   * @return journeyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Day", value = "Type of journey i.e. Day/Night journey")

  public String getJourneyType() {
    return journeyType;
  }


  public void setJourneyType(String journeyType) {
    
    
    
    this.journeyType = journeyType;
  }


  public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData route(String route) {
    
    
    
    
    this.route = route;
    return this;
  }

   /**
   * The route type i.e. Direct/Indirect
   * @return route
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Direct", value = "The route type i.e. Direct/Indirect")

  public String getRoute() {
    return route;
  }


  public void setRoute(String route) {
    
    
    
    this.route = route;
  }


  public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData routeByCountry(String routeByCountry) {
    
    
    
    
    this.routeByCountry = routeByCountry;
    return this;
  }

   /**
   * Complete flight route by country
   * @return routeByCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NY, CA", value = "Complete flight route by country")

  public String getRouteByCountry() {
    return routeByCountry;
  }


  public void setRouteByCountry(String routeByCountry) {
    
    
    
    this.routeByCountry = routeByCountry;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData instance itself
   */
  public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData authenticationAcquireClientAuthorizationRequestRiskDataFlightData = (AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData) o;
    return Objects.equals(this.airline, authenticationAcquireClientAuthorizationRequestRiskDataFlightData.airline) &&
        Objects.equals(this.departureAirport, authenticationAcquireClientAuthorizationRequestRiskDataFlightData.departureAirport) &&
        Objects.equals(this.departureDate, authenticationAcquireClientAuthorizationRequestRiskDataFlightData.departureDate) &&
        Objects.equals(this.destinationAirport, authenticationAcquireClientAuthorizationRequestRiskDataFlightData.destinationAirport) &&
        Objects.equals(this.hoursToDeparture, authenticationAcquireClientAuthorizationRequestRiskDataFlightData.hoursToDeparture) &&
        Objects.equals(this.journeyType, authenticationAcquireClientAuthorizationRequestRiskDataFlightData.journeyType) &&
        Objects.equals(this.route, authenticationAcquireClientAuthorizationRequestRiskDataFlightData.route) &&
        Objects.equals(this.routeByCountry, authenticationAcquireClientAuthorizationRequestRiskDataFlightData.routeByCountry)&&
        Objects.equals(this.additionalProperties, authenticationAcquireClientAuthorizationRequestRiskDataFlightData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airline, departureAirport, departureDate, destinationAirport, hoursToDeparture, journeyType, route, routeByCountry, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData {\n");
    sb.append("    airline: ").append(toIndentedString(airline)).append("\n");
    sb.append("    departureAirport: ").append(toIndentedString(departureAirport)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    destinationAirport: ").append(toIndentedString(destinationAirport)).append("\n");
    sb.append("    hoursToDeparture: ").append(toIndentedString(hoursToDeparture)).append("\n");
    sb.append("    journeyType: ").append(toIndentedString(journeyType)).append("\n");
    sb.append("    route: ").append(toIndentedString(route)).append("\n");
    sb.append("    routeByCountry: ").append(toIndentedString(routeByCountry)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Airline");
    openapiFields.add("DepartureAirport");
    openapiFields.add("DepartureDate");
    openapiFields.add("DestinationAirport");
    openapiFields.add("HoursToDeparture");
    openapiFields.add("JourneyType");
    openapiFields.add("Route");
    openapiFields.add("RouteByCountry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData is not found in the empty JSON string", AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("Airline") != null && !jsonObj.get("Airline").isJsonNull()) && !jsonObj.get("Airline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Airline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Airline").toString()));
      }
      if ((jsonObj.get("DepartureAirport") != null && !jsonObj.get("DepartureAirport").isJsonNull()) && !jsonObj.get("DepartureAirport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DepartureAirport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DepartureAirport").toString()));
      }
      if ((jsonObj.get("DepartureDate") != null && !jsonObj.get("DepartureDate").isJsonNull()) && !jsonObj.get("DepartureDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DepartureDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DepartureDate").toString()));
      }
      if ((jsonObj.get("DestinationAirport") != null && !jsonObj.get("DestinationAirport").isJsonNull()) && !jsonObj.get("DestinationAirport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DestinationAirport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DestinationAirport").toString()));
      }
      if ((jsonObj.get("HoursToDeparture") != null && !jsonObj.get("HoursToDeparture").isJsonNull()) && !jsonObj.get("HoursToDeparture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HoursToDeparture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HoursToDeparture").toString()));
      }
      if ((jsonObj.get("JourneyType") != null && !jsonObj.get("JourneyType").isJsonNull()) && !jsonObj.get("JourneyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JourneyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JourneyType").toString()));
      }
      if ((jsonObj.get("Route") != null && !jsonObj.get("Route").isJsonNull()) && !jsonObj.get("Route").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Route` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Route").toString()));
      }
      if ((jsonObj.get("RouteByCountry") != null && !jsonObj.get("RouteByCountry").isJsonNull()) && !jsonObj.get("RouteByCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RouteByCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RouteByCountry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData>() {
           @Override
           public void write(JsonWriter out, AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData
  * @throws IOException if the JSON string is invalid with respect to AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData
  */
  public static AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData.class);
  }

 /**
  * Convert an instance of AuthenticationAcquireClientAuthorizationRequestRiskDataFlightData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

