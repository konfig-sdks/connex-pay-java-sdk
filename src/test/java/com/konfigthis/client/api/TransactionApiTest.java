/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.SaleCreateTransactionRequestCustomParametersInner;
import com.konfigthis.client.model.TransactionCaptureAuthorizationRequest;
import com.konfigthis.client.model.TransactionCaptureAuthorizationRequestConnexPayTransaction;
import com.konfigthis.client.model.TransactionCaptureAuthorizationResponse;
import com.konfigthis.client.model.TransactionCreateAchCreditPaymentRequest;
import com.konfigthis.client.model.TransactionCreateAchCreditPaymentRequestAccountHolder;
import com.konfigthis.client.model.TransactionCreateAchCreditPaymentResponse;
import com.konfigthis.client.model.TransactionSearchVirtualCardHistoryResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Disabled
public class TransactionApiTest {

    private static TransactionApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TransactionApi(apiClient);
    }

    /**
     * Capture
     *
     * Call this endpoint to Capture an Authorization so that it settles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void captureAuthorizationTest() throws ApiException {
        String deviceGuid = null;
        String authOnlyGuid = null;
        String sequenceNumber = null;
        TransactionCaptureAuthorizationRequestConnexPayTransaction connexPayTransaction = null;
        String orderNumber = null;
        String customerID = null;
        String associationID = null;
        List<SaleCreateTransactionRequestCustomParametersInner> customParameters = null;
        TransactionCaptureAuthorizationResponse response = api.captureAuthorization(deviceGuid, authOnlyGuid)
                .sequenceNumber(sequenceNumber)
                .connexPayTransaction(connexPayTransaction)
                .orderNumber(orderNumber)
                .customerID(customerID)
                .associationID(associationID)
                .customParameters(customParameters)
                .execute();
        // TODO: test validations
    }

    /**
     * Issue ACH
     *
     * This endpoint creates an ACH Credit payment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAchCreditPaymentTest() throws ApiException {
        String merchantGuid = null;
        Float amount = null;
        String payeeName = null;
        String incomingTransactionCode = null;
        TransactionCreateAchCreditPaymentRequestAccountHolder accountHolder = null;
        String statementCompanyName = null;
        String description = null;
        TransactionCreateAchCreditPaymentResponse response = api.createAchCreditPayment(merchantGuid, amount, payeeName, incomingTransactionCode, accountHolder)
                .statementCompanyName(statementCompanyName)
                .description(description)
                .execute();
        // TODO: test validations
    }

    /**
     * Search Virtual Card History
     *
     * This API allows you to pull back history of the Virtual Card. This is the same API (and data) that is used when clicking the “Transactions” button on the Virtual Card in the Portal to display the transaction history. The API will return the merchant name where the Virtual Card was used, the date and time, transaction type (auth, settlement, refund, void, etc.), the response/memo which correlates to the transaction type and the amount.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchVirtualCardHistoryTest() throws ApiException {
        String cardGuid = null;
        TransactionSearchVirtualCardHistoryResponse response = api.searchVirtualCardHistory(cardGuid)
                .execute();
        // TODO: test validations
    }

}
