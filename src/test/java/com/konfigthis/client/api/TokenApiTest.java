/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.TokenGenerateReportingTokenRequest;
import com.konfigthis.client.model.TokenGenerateReportingTokenResponse;
import com.konfigthis.client.model.TokenIssueAuthenticationTokenRequest;
import com.konfigthis.client.model.TokenIssueAuthenticationTokenResponse;
import com.konfigthis.client.model.TokenRequestHppTokenRequest;
import com.konfigthis.client.model.TokenRequestHppTokenRequestSale;
import com.konfigthis.client.model.TokenRequestHppTokenResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokenApi
 */
@Disabled
public class TokenApiTest {

    private static TokenApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TokenApi(apiClient);
    }

    /**
     * Reporting Token
     *
     * Reporting API requests require a combination of assigned Bridge user name, Bridge password, and a successfully generated authentication token. The Bridge credentials used are assigned separately from the Purchase and Sales API credentials. The received token for Reporting is valid for 60 minutes from issuance and may be used for all requests during its lifespan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateReportingTokenTest() throws ApiException {
        String userName = null;
        String password = null;
        TokenGenerateReportingTokenResponse response = api.generateReportingToken(userName, password)
                .execute();
        // TODO: test validations
    }

    /**
     * Issuing Token
     *
     * API requests require a combination of assigned user name, password, and successfully generated authentication token. The received token is valid for 24 hours from issuance and may be used for all requests during its lifespan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void issueAuthenticationTokenTest() throws ApiException {
        String grantType = null;
        String username = null;
        String password = null;
        TokenIssueAuthenticationTokenResponse response = api.issueAuthenticationToken(grantType, username, password)
                .execute();
        // TODO: test validations
    }

    /**
     * HPP Token Request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestHppTokenTest() throws ApiException {
        String merchantName = null;
        TokenRequestHppTokenRequestSale sale = null;
        String description = null;
        String resultRedirectUrl = null;
        String logoUrl = null;
        List<String> tenderTypeOptions = null;
        OffsetDateTime expiration = null;
        TokenRequestHppTokenResponse response = api.requestHppToken(merchantName, sale)
                .description(description)
                .resultRedirectUrl(resultRedirectUrl)
                .logoUrl(logoUrl)
                .tenderTypeOptions(tenderTypeOptions)
                .expiration(expiration)
                .execute();
        // TODO: test validations
    }

}
