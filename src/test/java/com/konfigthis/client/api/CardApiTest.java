/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CardActivateDelayedResponse;
import com.konfigthis.client.model.CardCancelVirtualCardResponse;
import com.konfigthis.client.model.CardCreateLodgedCardRequest;
import com.konfigthis.client.model.CardCreateLodgedCardRequestTransmission;
import com.konfigthis.client.model.CardGetDetailResponse;
import com.konfigthis.client.model.CardIssuanceCreateVirtualCardRequestCustomParametersInner;
import com.konfigthis.client.model.CardResendTransmissionInfoRequest;
import com.konfigthis.client.model.CardResendTransmissionInfoResponse;
import com.konfigthis.client.model.CardSearchIssuedVirtualCardsRequest;
import com.konfigthis.client.model.CardTerminateByDateResponse;
import com.konfigthis.client.model.CardUpdateCardDetailsRequest;
import com.konfigthis.client.model.CardUpdateCardDetailsResponse;
import com.konfigthis.client.model.CardUpdateDelayedActivationRequest;
import com.konfigthis.client.model.CardUpdateDelayedActivationResponse;
import com.konfigthis.client.model.CardUpdateLodgedCardRequest;
import com.konfigthis.client.model.CardUpdateLodgedCardResponse;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardApi
 */
@Disabled
public class CardApiTest {

    private static CardApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CardApi(apiClient);
    }

    /**
     * Activate Virtual Card with Delayed Activation
     *
     * Use this API to immediately activate a Virtual Card with a delayed activation date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateDelayedTest() throws ApiException {
        CardActivateDelayedResponse response = api.activateDelayed()
                .execute();
        // TODO: test validations
    }

    /**
     * Cancel Card
     *
     * This endpoint should be called when you want to completely cancel a virtual card you created using the IssueLite endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelVirtualCardTest() throws ApiException {
        CardCancelVirtualCardResponse response = api.cancelVirtualCard()
                .execute();
        // TODO: test validations
    }

    /**
     * Issue Lodged Card
     *
     * Use this endpoint to create a Lodged Card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLodgedCardTest() throws ApiException {
        String merchantGuid = null;
        String firstName = null;
        String lastName = null;
        Float amountLimit = null;
        String limitWindow = null;
        String phone = null;
        String address1 = null;
        String address2 = null;
        String city = null;
        String state = null;
        String zipCode = null;
        String country = null;
        Long usageLimit = null;
        LocalDate expirationDate = null;
        LocalDate terminateDate = null;
        String purchaseType = null;
        String sequenceNumber = null;
        String orderNumber = null;
        String supplierId = null;
        Boolean nonDomesticSupplier = null;
        CardCreateLodgedCardRequestTransmission transmission = null;
        Boolean returnCardData = null;
        String customerID = null;
        String associationId = null;
        List<String> labelIDs = null;
        List<CardIssuanceCreateVirtualCardRequestCustomParametersInner> customParameters = null;
        Object response = api.createLodgedCard(merchantGuid, firstName, lastName, amountLimit, limitWindow)
                .phone(phone)
                .address1(address1)
                .address2(address2)
                .city(city)
                .state(state)
                .zipCode(zipCode)
                .country(country)
                .usageLimit(usageLimit)
                .expirationDate(expirationDate)
                .terminateDate(terminateDate)
                .purchaseType(purchaseType)
                .sequenceNumber(sequenceNumber)
                .orderNumber(orderNumber)
                .supplierId(supplierId)
                .nonDomesticSupplier(nonDomesticSupplier)
                .transmission(transmission)
                .returnCardData(returnCardData)
                .customerID(customerID)
                .associationId(associationId)
                .labelIDs(labelIDs)
                .customParameters(customParameters)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Issue Card Detail
     *
     * This Endpoint returns Virtual Credit Card details for a specific card guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetailTest() throws ApiException {
        String cardGuid = null;
        Boolean showFullPan = null;
        CardGetDetailResponse response = api.getDetail(cardGuid, showFullPan)
                .execute();
        // TODO: test validations
    }

    /**
     * Resend Transmission
     *
     * This endpoint resends payment information to recipient. Or returns a URL you can use within your application to direct a user to a visual representation of the virtual card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendTransmissionInfoTest() throws ApiException {
        List<String> transmissionMethods = null;
        String cardGuid = null;
        String emailRecipient = null;
        String merchantPhoneNumber = null;
        String emailFrom = null;
        String recipientName = null;
        String subject = null;
        String message = null;
        Integer daysToExpire = null;
        String faxFrom = null;
        String faxRecipient = null;
        CardResendTransmissionInfoResponse response = api.resendTransmissionInfo(transmissionMethods, cardGuid)
                .emailRecipient(emailRecipient)
                .merchantPhoneNumber(merchantPhoneNumber)
                .emailFrom(emailFrom)
                .recipientName(recipientName)
                .subject(subject)
                .message(message)
                .daysToExpire(daysToExpire)
                .faxFrom(faxFrom)
                .faxRecipient(faxRecipient)
                .execute();
        // TODO: test validations
    }

    /**
     * Search Issued Cards
     *
     * This endpoint searches for Issued Virtual Cards.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchIssuedVirtualCardsTest() throws ApiException {
        String merchantGuid = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        String saleGuid = null;
        String incomingTransactionCode = null;
        String orderNumber = null;
        String customerID = null;
        LocalDate timeStampFrom = null;
        LocalDate timeStampTo = null;
        Float issuedAmountFrom = null;
        Float issuedAmountTo = null;
        String outgoingTransactionCode = null;
        Long settledAmountFrom = null;
        Long settledAmountTo = null;
        Long returnedAmountFrom = null;
        Long returnedAmountTo = null;
        String response = api.searchIssuedVirtualCards(merchantGuid, pageNumber, pageSize)
                .saleGuid(saleGuid)
                .incomingTransactionCode(incomingTransactionCode)
                .orderNumber(orderNumber)
                .customerID(customerID)
                .timeStampFrom(timeStampFrom)
                .timeStampTo(timeStampTo)
                .issuedAmountFrom(issuedAmountFrom)
                .issuedAmountTo(issuedAmountTo)
                .outgoingTransactionCode(outgoingTransactionCode)
                .settledAmountFrom(settledAmountFrom)
                .settledAmountTo(settledAmountTo)
                .returnedAmountFrom(returnedAmountFrom)
                .returnedAmountTo(returnedAmountTo)
                .execute();
        // TODO: test validations
    }

    /**
     * Terminate Card
     *
     * The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  ExpirationDate is the month and year that will be applied to the actual VCC. Note, Returns can still be processed on terminated VCCs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void terminateByDateTest() throws ApiException {
        String guid = null;
        CardTerminateByDateResponse response = api.terminateByDate(guid)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Card
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCardDetailsTest() throws ApiException {
        String cardGuid = null;
        String purchaseType = null;
        List<String> miDWhitelist = null;
        List<String> miDBlacklist = null;
        Integer usageLimit = null;
        String associationId = null;
        LocalDate terminateDate = null;
        Float amountLimit = null;
        CardUpdateCardDetailsResponse response = api.updateCardDetails(cardGuid)
                .purchaseType(purchaseType)
                .miDWhitelist(miDWhitelist)
                .miDBlacklist(miDBlacklist)
                .usageLimit(usageLimit)
                .associationId(associationId)
                .terminateDate(terminateDate)
                .amountLimit(amountLimit)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Virtual Card with Delayed Activation
     *
     * Request this endpoint to update the activation date or card limit of a virtual card with a future activation date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDelayedActivationTest() throws ApiException {
        String merchantGuid = null;
        String cardGuid = null;
        LocalDate activationDate = null;
        Float amountLimit = null;
        LocalDate terminateDate = null;
        CardUpdateDelayedActivationResponse response = api.updateDelayedActivation(merchantGuid, cardGuid)
                .activationDate(activationDate)
                .amountLimit(amountLimit)
                .terminateDate(terminateDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Lodged Card
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLodgedCardTest() throws ApiException {
        String cardGuid = null;
        Long usageLimit = null;
        Float amountLimit = null;
        String limitWindow = null;
        String purchaseType = null;
        Boolean activated = null;
        String associationId = null;
        LocalDate terminateDate = null;
        CardUpdateLodgedCardResponse response = api.updateLodgedCard(cardGuid)
                .usageLimit(usageLimit)
                .amountLimit(amountLimit)
                .limitWindow(limitWindow)
                .purchaseType(purchaseType)
                .activated(activated)
                .associationId(associationId)
                .terminateDate(terminateDate)
                .execute();
        // TODO: test validations
    }

}
