/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CancelPaymentsDto;
import com.konfigthis.client.model.DtoPayout;
import com.konfigthis.client.model.PayeeDto;
import com.konfigthis.client.model.PaymentsDto;
import com.konfigthis.client.model.PayoutAuthResponse;
import com.konfigthis.client.model.PayoutDto;
import java.util.UUID;
import com.konfigthis.client.model.UpdatePayeeDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PushToCardApi
 */
@Disabled
public class PushToCardApiTest {

    private static PushToCardApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PushToCardApi(apiClient);
    }

    /**
     * Cancel Payments
     *
     * Use this endpoint to cancel payments within a Payout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPaymentsTest() throws ApiException {
        UUID merchantGuid = null;
        List<UUID> payments = null;
        UUID payoutGuid = null;
        String response = api.cancelPayments(merchantGuid, payments, payoutGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Payee
     *
     * Use this endpoint to create a new Payee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPayeeTest() throws ApiException {
        UUID merchantGuid = null;
        String firstName = null;
        String lastName = null;
        String email = null;
        String phone = null;
        UUID payeeGuid = null;
        String address1 = null;
        String address2 = null;
        String city = null;
        String state = null;
        String zipCode = null;
        String status = null;
        String cardId = null;
        PayeeDto response = api.createPayee(merchantGuid, firstName, lastName, email, phone)
                .payeeGuid(payeeGuid)
                .address1(address1)
                .address2(address2)
                .city(city)
                .state(state)
                .zipCode(zipCode)
                .status(status)
                .cardId(cardId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Payout
     *
     * Use this endpoint to create a new Payout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPayoutTest() throws ApiException {
        UUID merchantGuid = null;
        String memo = null;
        List<PaymentsDto> payments = null;
        UUID payoutGuid = null;
        String payoutReferenceToken = null;
        String status = null;
        String orderNumber = null;
        String customerId = null;
        String associationId = null;
        List<Integer> labelIds = null;
        PayoutDto response = api.createPayout(merchantGuid, memo, payments)
                .payoutGuid(payoutGuid)
                .payoutReferenceToken(payoutReferenceToken)
                .status(status)
                .orderNumber(orderNumber)
                .customerId(customerId)
                .associationId(associationId)
                .labelIds(labelIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Authentication Token for DropInUI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthenticationTokenAsyncTest() throws ApiException {
        String payeeGuid = null;
        String payeeEmailAddress = null;
        PayoutAuthResponse response = api.getAuthenticationTokenAsync()
                .payeeGuid(payeeGuid)
                .payeeEmailAddress(payeeEmailAddress)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Payee
     *
     * Use this endpoint to retrieve a Payee for a specific Payee guid. One or both &#39;payeeGuid&#39; or &#39;payeeEmailAddress&#39; must be provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayeeTest() throws ApiException {
        String payeeGuid = null;
        String payeeEmailAddress = null;
        PayeeDto response = api.getPayee()
                .payeeGuid(payeeGuid)
                .payeeEmailAddress(payeeEmailAddress)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Payout Details
     *
     * Use this endpoint to retrieve the details for a Payout for a specific Payout guid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayoutDetailsTest() throws ApiException {
        UUID payoutGuid = null;
        DtoPayout response = api.getPayoutDetails(payoutGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Manage Payee
     *
     * Use this endpoint to enable or disable a Payee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managePayeeTest() throws ApiException {
        UUID payeeGuid = null;
        String status = null;
        String response = api.managePayee(payeeGuid, status)
                .execute();
        // TODO: test validations
    }

    /**
     * Push Funds to a Card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pushFundsToCardAsyncTest() throws ApiException {
        String ridGuid = null;
        String cardId = null;
        String response = api.pushFundsToCardAsync(ridGuid, cardId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Payee
     *
     * Use this endpoint to update data for a Payee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePayeeTest() throws ApiException {
        UUID payeeGuid = null;
        String firstName = null;
        String lastName = null;
        String email = null;
        String address1 = null;
        String address2 = null;
        String city = null;
        String state = null;
        String zipCode = null;
        String phone = null;
        String status = null;
        String response = api.updatePayee(payeeGuid)
                .firstName(firstName)
                .lastName(lastName)
                .email(email)
                .address1(address1)
                .address2(address2)
                .city(city)
                .state(state)
                .zipCode(zipCode)
                .phone(phone)
                .status(status)
                .execute();
        // TODO: test validations
    }

}
