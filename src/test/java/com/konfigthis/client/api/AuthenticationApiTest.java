/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AuthenticationAcquireClientAuthorizationRequest;
import com.konfigthis.client.model.AuthenticationAcquireClientAuthorizationRequestBankAccount;
import com.konfigthis.client.model.AuthenticationAcquireClientAuthorizationRequestBrowserData;
import com.konfigthis.client.model.AuthenticationAcquireClientAuthorizationRequestCard;
import com.konfigthis.client.model.AuthenticationAcquireClientAuthorizationRequestRiskData;
import com.konfigthis.client.model.AuthenticationAcquireClientAuthorizationResponse;
import com.konfigthis.client.model.AuthenticationObtain3DSecureAuthenticationRequest;
import com.konfigthis.client.model.AuthenticationObtain3DSecureAuthenticationRequestBrowserData;
import com.konfigthis.client.model.AuthenticationObtain3DSecureAuthenticationRequestCard;
import com.konfigthis.client.model.AuthenticationObtain3DSecureAuthenticationResponse;
import com.konfigthis.client.model.SaleCreateTransactionRequestCustomer;
import com.konfigthis.client.model.SaleCreateTransactionRequestEnhancedData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Disabled
public class AuthenticationApiTest {

    private static AuthenticationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AuthenticationApi(apiClient);
    }

    /**
     * Auth Only
     *
     * The Auth Only Endpoint is applicable to acquiring clients.  Call Auth Only when you want to process an Authorization only, which will not settle until it&#39;s Captured.  We do not allow you to Capture an Authorization after 5 business days have passed.Calling this endpoint will authorize the card, however, it will not be settled until the [Capture endpoint](https://docs.connexpay.com/reference/capture) is called. Authorizations expire after 5 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acquireClientAuthorizationTest() throws ApiException {
        String deviceGuid = null;
        Float amount = null;
        AuthenticationAcquireClientAuthorizationRequestRiskData riskData = null;
        String sequenceNumber = null;
        String orderNumber = null;
        Boolean sendReceipt = null;
        String statementDescription = null;
        String customerID = null;
        AuthenticationAcquireClientAuthorizationRequestCard card = null;
        AuthenticationAcquireClientAuthorizationRequestBankAccount bankAccount = null;
        SaleCreateTransactionRequestCustomer customer = null;
        SaleCreateTransactionRequestEnhancedData enhancedData = null;
        String associationID = null;
        AuthenticationAcquireClientAuthorizationRequestBrowserData browserData = null;
        AuthenticationAcquireClientAuthorizationResponse response = api.acquireClientAuthorization(deviceGuid, amount, riskData)
                .sequenceNumber(sequenceNumber)
                .orderNumber(orderNumber)
                .sendReceipt(sendReceipt)
                .statementDescription(statementDescription)
                .customerID(customerID)
                .card(card)
                .bankAccount(bankAccount)
                .customer(customer)
                .enhancedData(enhancedData)
                .associationID(associationID)
                .browserData(browserData)
                .execute();
        // TODO: test validations
    }

    /**
     * 3DS Authentication
     *
     * This endpoint can be used for obtaining 3D Secure Authentication separate from the Create Sale or Auth-Only calls.  This is recommended for our US and CA clients.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void obtain3dSecureAuthenticationTest() throws ApiException {
        AuthenticationObtain3DSecureAuthenticationRequestCard card = null;
        String deviceGuid = null;
        AuthenticationObtain3DSecureAuthenticationRequestBrowserData browserData = null;
        Float amount = null;
        AuthenticationObtain3DSecureAuthenticationResponse response = api.obtain3dSecureAuthentication(card, deviceGuid, browserData, amount)
                .execute();
        // TODO: test validations
    }

}
