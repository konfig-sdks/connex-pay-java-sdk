/*
 * ConnexPay Reporting API
 * REST API for retrieving reporting data. Currently Daily Accounting data only.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.SaleCreateTransaction201Response;
import com.konfigthis.client.model.SaleCreateTransactionRequest;
import com.konfigthis.client.model.SaleCreateTransactionRequestBankAccount;
import com.konfigthis.client.model.SaleCreateTransactionRequestBrowserData;
import com.konfigthis.client.model.SaleCreateTransactionRequestCard;
import com.konfigthis.client.model.SaleCreateTransactionRequestConnexPayTransaction;
import com.konfigthis.client.model.SaleCreateTransactionRequestCustomParametersInner;
import com.konfigthis.client.model.SaleCreateTransactionRequestCustomer;
import com.konfigthis.client.model.SaleCreateTransactionRequestEnhancedData;
import com.konfigthis.client.model.SaleCreateTransactionRequestRiskData;
import com.konfigthis.client.model.SaleCreateTransactionResponse;
import com.konfigthis.client.model.SaleSearchSalesRequest;
import com.konfigthis.client.model.SaleSearchSalesResponse;
import com.konfigthis.client.model.SaleUpdateDelayedActivationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SaleApi
 */
@Disabled
public class SaleApiTest {

    private static SaleApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SaleApi(apiClient);
    }

    /**
     * Activate Delayed Sale
     *
     * Activate a delayed activation sale independent of the activation date for which the sale was created.  A client can \&quot;Activate\&quot; a delayed activation sale this way at any time before ConnexPay will automatically activate it during the early hours of the supplied future date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateDelayedTest() throws ApiException {
        String saleGuid = null;
        Object response = api.activateDelayed(saleGuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Sale
     *
     * The Create Sale Endpoint is used by acquiring clients. The Sale transaction is used to create a sale for your consumer. You can create a credit sale or an ACH sale (ACH sales apply to US Clients only). A credit sale will charge a consumer&#39;s credit card. The consumer&#39;s credit card will be authorized immediately when the Sales request is received and will automatically settle/batch that same night. In other words, this one Sale request is just like running an AuthOnly and a Capture in one request.You can postpone charging the consumer&#39;s credit card by providing a date in the &#39;ActivationDate&#39; of your request. Doing so will delay the authorization and charge to the consumer&#39;s credit card until that future date.An ACH sale will create an ACH transaction that will debit the consumer&#39;s bank account. ACH sales received prior to 3:00 PM EST will process overnight. ACH Sales received after 3:00 PM EST will process the following night.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransactionTest() throws ApiException {
        String deviceGuid = null;
        Float amount = null;
        SaleCreateTransactionRequestConnexPayTransaction connexPayTransaction = null;
        SaleCreateTransactionRequestRiskData riskData = null;
        String tenderType = null;
        String sequenceNumber = null;
        String orderNumber = null;
        Boolean sendReceipt = null;
        Boolean riskProcessingOnly = null;
        String statementDescription = null;
        String customerID = null;
        LocalDate activationDate = null;
        String requestIp = null;
        SaleCreateTransactionRequestCard card = null;
        SaleCreateTransactionRequestBankAccount bankAccount = null;
        SaleCreateTransactionRequestCustomer customer = null;
        SaleCreateTransactionRequestEnhancedData enhancedData = null;
        String associationId = null;
        List<SaleCreateTransactionRequestCustomParametersInner> customParameters = null;
        List<String> labelIDs = null;
        SaleCreateTransactionRequestBrowserData browserData = null;
        SaleCreateTransactionResponse response = api.createTransaction(deviceGuid, amount, connexPayTransaction, riskData)
                .tenderType(tenderType)
                .sequenceNumber(sequenceNumber)
                .orderNumber(orderNumber)
                .sendReceipt(sendReceipt)
                .riskProcessingOnly(riskProcessingOnly)
                .statementDescription(statementDescription)
                .customerID(customerID)
                .activationDate(activationDate)
                .requestIp(requestIp)
                .card(card)
                .bankAccount(bankAccount)
                .customer(customer)
                .enhancedData(enhancedData)
                .associationId(associationId)
                .customParameters(customParameters)
                .labelIDs(labelIDs)
                .browserData(browserData)
                .execute();
        // TODO: test validations
    }

    /**
     * Sales Chargebacks
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargebacksByUserTest() throws ApiException {
        String getByUserQuestionMarkStartDateEqual20161201 = null;
        String getByUserQuestionMarkStartDateEqual20161201AmpersandEndDateEqual20161201 = null;
        String getByResolvedDateQuestionMarkStartDateEqual20190920AmpersandEndDateEqual20191021 = null;
        String response = api.getChargebacksByUser(getByUserQuestionMarkStartDateEqual20161201, getByUserQuestionMarkStartDateEqual20161201AmpersandEndDateEqual20161201, getByResolvedDateQuestionMarkStartDateEqual20190920AmpersandEndDateEqual20191021)
                .execute();
        // TODO: test validations
    }

    /**
     * Search sales
     *
     * This endpoint searches sales.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSalesTest() throws ApiException {
        String exportable = null;
        Integer pageNumber = null;
        String pageSize = null;
        String merchantGuid = null;
        Float amountFrom = null;
        Float amountTo = null;
        String cardHolderName = null;
        String cardLastFour = null;
        String cardType = null;
        Integer invoiceNumber = null;
        String orderNumber = null;
        LocalDate orderDateFrom = null;
        LocalDate orderDateTo = null;
        LocalDate timeStampFrom = null;
        LocalDate timeStampTo = null;
        String status = null;
        String merchantCustomerId = null;
        Boolean activated = null;
        LocalDate activationDateFrom = null;
        LocalDate activationDateTo = null;
        SaleSearchSalesResponse response = api.searchSales(exportable, pageNumber, pageSize)
                .merchantGuid(merchantGuid)
                .amountFrom(amountFrom)
                .amountTo(amountTo)
                .cardHolderName(cardHolderName)
                .cardLastFour(cardLastFour)
                .cardType(cardType)
                .invoiceNumber(invoiceNumber)
                .orderNumber(orderNumber)
                .orderDateFrom(orderDateFrom)
                .orderDateTo(orderDateTo)
                .timeStampFrom(timeStampFrom)
                .timeStampTo(timeStampTo)
                .status(status)
                .merchantCustomerId(merchantCustomerId)
                .activated(activated)
                .activationDateFrom(activationDateFrom)
                .activationDateTo(activationDateTo)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Delayed Sale
     *
     * Updates the sale amount or activation date on a delayed activation sale.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDelayedActivationTest() throws ApiException {
        String deviceGuid = null;
        String saleGuid = null;
        Float amount = null;
        LocalDate activationDate = null;
        String response = api.updateDelayedActivation(deviceGuid, saleGuid, amount)
                .activationDate(activationDate)
                .execute();
        // TODO: test validations
    }

}
